{
  "api/Melanchall.DryWetMidi.Common.ControlName.html": {
    "href": "api/Melanchall.DryWetMidi.Common.ControlName.html",
    "title": "Enum ControlName | DryWetMIDI",
    "keywords": "Enum ControlName MIDI controller names. Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public enum ControlName : byte Fields Name Description AllNotesOff Channel Mode Message: All Notes Off. AllSoundOff Channel Mode Message: All Sound Off. Balance Balance. BankSelect Bank Select. BreathController Breath Controller. ChannelVolume Channel Volume (formerly Main Volume). DamperPedal Damper Pedal On/Off (Sustain). DataDecrement Data Decrement (Data Entry -1; see MMA RP-018). DataEntryMsb Data Entry MSB. DataIncrement Data Increment (Data Entry +1; see MMA RP-018). EffectControl1 Effect Control 1. EffectControl2 Effect Control 2. Effects1Depth Effects 1 Depth (default: Reverb Send Level - see MMA RP-023; formerly External Effects Depth). Effects2Depth Effects 2 Depth (formerly Tremolo Depth). Effects3Depth Effects 3 Depth (default: Chorus Send Level - see MMA RP-023; formerly Chorus Depth). Effects4Depth Effects 4 Depth (formerly Celeste [Detune] Depth). Effects5Depth Effects 5 Depth (formerly Phaser Depth). ExpressionController Expression Controller. FootController Foot Controller. GeneralPurposeController1 General Purpose Controller 1. GeneralPurposeController2 General Purpose Controller 2. GeneralPurposeController3 General Purpose Controller 3. GeneralPurposeController4 General Purpose Controller 4. GeneralPurposeController5 General Purpose Controller 5. GeneralPurposeController6 General Purpose Controller 6. GeneralPurposeController7 General Purpose Controller 7. GeneralPurposeController8 General Purpose Controller 8. HighResolutionVelocityPrefix High Resolution Velocity Prefix. Hold2 Hold 2. LegatoFootswitch Legato Footswitch. LocalControl Channel Mode Message: Local Control On/Off. LsbForBalance LSB for Balance. LsbForBankSelect LSB for Bank Select. LsbForBreathController LSB for Breath Controller. LsbForChannelVolume LSB for Channel Volume (formerly Main Volume). LsbForController14 LSB for Control 14 (Undefined). LsbForController15 LSB for Control 15 (Undefined). LsbForController20 LSB for Control 20 (Undefined). LsbForController21 LSB for Control 21 (Undefined). LsbForController22 LSB for Control 22 (Undefined). LsbForController23 LSB for Control 23 (Undefined). LsbForController24 LSB for Control 24 (Undefined). LsbForController25 LSB for Control 25 (Undefined). LsbForController26 LSB for Control 26 (Undefined). LsbForController27 LSB for Control 27 (Undefined). LsbForController28 LSB for Control 28 (Undefined). LsbForController29 LSB for Control 29 (Undefined). LsbForController3 LSB for Control 3 (Undefined). LsbForController30 LSB for Control 30 (Undefined). LsbForController31 LSB for Control 31 (Undefined). LsbForController9 LSB for Control 9 (Undefined). LsbForDataEntry LSB for Data Entry. LsbForEffectControl1 LSB for Effect Control 1. LsbForEffectControl2 LSB for Effect Control 2. LsbForExpressionController LSB for Expression Controller. LsbForFootController LSB for Foot Controller. LsbForGeneralPurposeController1 LSB for General Purpose Controller 1. LsbForGeneralPurposeController2 LSB for General Purpose Controller 2. LsbForGeneralPurposeController3 LSB for General Purpose Controller 3. LsbForGeneralPurposeController4 LSB for General Purpose Controller 4. LsbForModulation LSB for Modulation. LsbForPan LSB for Pan. LsbForPortamentoTime LSB for Portamento Time. Modulation Modulation Wheel or Lever. MonoModeOn Channel Mode Message: Mono Mode On (+ poly off, + all notes off). NonRegisteredParameterNumberLsb Non-Registered Parameter Number (NRPN) - LSB. NonRegisteredParameterNumberMsb Non-Registered Parameter Number (NRPN) - MSB. OmniModeOff Channel Mode Message: Omni Mode Off (+ all notes off). OmniModeOn Channel Mode Message: Omni Mode On (+ all notes off). Pan Pan. PolyModeOn Channel Mode Message: Poly Mode On (+ mono off, +all notes off). Portamento Portamento On/Off. PortamentoControl Portamento Control. PortamentoTime Portamento Time. RegisteredParameterNumberLsb Registered Parameter Number (RPN) - LSB. RegisteredParameterNumberMsb Registered Parameter Number (RPN) - MSB. ResetAllControllers Channel Mode Message: Reset All Controllers (See MMA RP-015). SoftPedal Soft Pedal On/Off. Sostenuto Sostenuto On/Off. SoundController1 Sound Controller 1 (default: Sound Variation). SoundController10 Sound Controller 10 (default undefined - see MMA RP-021). SoundController2 Sound Controller 2 (default: Timbre/Harmonic Intens.). SoundController3 Sound Controller 3 (default: Release Time). SoundController4 Sound Controller 4 (default: Attack Time). SoundController5 Sound Controller 5 (default: Brightness). SoundController6 Sound Controller 6 (default: Decay Time - see MMA RP-021). SoundController7 Sound Controller 7 (default: Vibrato Rate - see MMA RP-021). SoundController8 Sound Controller 8 (default: Vibrato Depth - see MMA RP-021). SoundController9 Sound Controller 9 (default: Vibrato Delay - see MMA RP-021). Undefined Undefined Controller. Extension Methods ControlUtilities.AsSevenBitNumber() ControlUtilities.GetControlChangeEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Common.FourBitNumber.html": {
    "href": "api/Melanchall.DryWetMidi.Common.FourBitNumber.html",
    "title": "Struct FourBitNumber | DryWetMIDI",
    "keywords": "Struct FourBitNumber Type that is used to represent a four-bit number (0-15; or in binary format 0000-1111). Implements IComparable < FourBitNumber > IConvertible Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public struct FourBitNumber : IComparable<FourBitNumber>, IConvertible Remarks Four-bit numbers widely used by MIDI protocol as parameters of MIDI events (channel number, for example). Instead of manipulating built-in .NET numeric types (like byte or int ) and checking for out-of-range errors all validation of numbers in the [0; 15] range happens on data type level via casting .NET integer values to the FourBitNumber (see Explicit(Byte to FourBitNumber) ). Examples For example, to set a note's channel: var noteOnEvent = new NoteOnEvent(); noteOnEvent.Channel = (FourBitNumber)10; Constructors FourBitNumber(Byte) Initializes a new instance of the FourBitNumber with the specified value. Declaration public FourBitNumber(byte value) Parameters Type Name Description Byte value Value representing four-bit number. Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinValue ; MaxValue ] range. Fields MaxValue The largest possible value of a FourBitNumber . Declaration public static readonly FourBitNumber MaxValue Field Value Type Description FourBitNumber MinValue The smallest possible value of a FourBitNumber . Declaration public static readonly FourBitNumber MinValue Field Value Type Description FourBitNumber Values All possible values of FourBitNumber . Declaration public static readonly FourBitNumber[] Values Field Value Type Description FourBitNumber [] Methods CompareTo(FourBitNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(FourBitNumber other) Parameters Type Name Description FourBitNumber other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() GetTypeCode() Returns the TypeCode for value type FourBitNumber . Declaration public TypeCode GetTypeCode() Returns Type Description TypeCode The enumerated constant, Byte . Parse(String) Converts the string representation of a four-bit number to its FourBitNumber equivalent. Declaration public static FourBitNumber Parse(string input) Parameters Type Name Description String input A string containing a number to convert. Returns Type Description FourBitNumber A FourBitNumber equivalent to the four-bit number contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() TryParse(String, out FourBitNumber) Converts the string representation of a four-bit number to its FourBitNumber equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out FourBitNumber fourBitNumber) Parameters Type Name Description String input A string containing a number to convert. FourBitNumber fourBitNumber When this method returns, contains the FourBitNumber equivalent of the four-bit number contained in input , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Explicit(Byte to FourBitNumber) Converts the value of a Byte to a FourBitNumber . Declaration public static explicit operator FourBitNumber(byte number) Parameters Type Name Description Byte number Byte value to convert to a FourBitNumber object. Returns Type Description FourBitNumber number represented as FourBitNumber . Exceptions Type Condition ArgumentOutOfRangeException number is out of [0; 15] range. Implicit(FourBitNumber to Byte) Converts the value of a FourBitNumber to a Byte . Declaration public static implicit operator byte (FourBitNumber number) Parameters Type Name Description FourBitNumber number FourBitNumber object to convert to a byte value. Returns Type Description Byte number represented as Byte . Explicit Interface Implementations IConvertible.ToBoolean(IFormatProvider) Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information. Declaration bool IConvertible.ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Boolean A Boolean value equivalent to the value of this instance. IConvertible.ToByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information. Declaration byte IConvertible.ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Byte An 8-bit unsigned integer equivalent to the value of this instance. IConvertible.ToChar(IFormatProvider) Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information. Declaration char IConvertible.ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Char A Unicode character equivalent to the value of this instance. IConvertible.ToDateTime(IFormatProvider) Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information. Declaration DateTime IConvertible.ToDateTime(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description DateTime A DateTime instance equivalent to the value of this instance. IConvertible.ToDecimal(IFormatProvider) Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information. Declaration decimal IConvertible.ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Decimal A Decimal number equivalent to the value of this instance. IConvertible.ToDouble(IFormatProvider) Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information. Declaration double IConvertible.ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Double A double-precision floating-point number equivalent to the value of this instance. IConvertible.ToInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information. Declaration short IConvertible.ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int16 An 16-bit signed integer equivalent to the value of this instance. IConvertible.ToInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information. Declaration int IConvertible.ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int32 An 32-bit signed integer equivalent to the value of this instance. IConvertible.ToInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information. Declaration long IConvertible.ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int64 An 64-bit signed integer equivalent to the value of this instance. IConvertible.ToSByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information. Declaration sbyte IConvertible.ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description SByte An 8-bit signed integer equivalent to the value of this instance. IConvertible.ToSingle(IFormatProvider) Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information. Declaration float IConvertible.ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Single A single-precision floating-point number equivalent to the value of this instance. IConvertible.ToString(IFormatProvider) Converts the value of this instance to an equivalent String using the specified culture-specific formatting information. Declaration string IConvertible.ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description String A String instance equivalent to the value of this instance. IConvertible.ToType(Type, IFormatProvider) Converts the value of this instance to an System.Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information. Declaration object IConvertible.ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description Type conversionType The Type to which the value of this instance is converted. IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Object An Object instance of type conversionType whose value is equivalent to the value of this instance. IConvertible.ToUInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information. Declaration ushort IConvertible.ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt16 An 16-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information. Declaration uint IConvertible.ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt32 An 32-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information. Declaration ulong IConvertible.ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt64 An 64-bit unsigned integer equivalent to the value of this instance. Implements System.IComparable<T> System.IConvertible"
  },
  "api/Melanchall.DryWetMidi.Common.html": {
    "href": "api/Melanchall.DryWetMidi.Common.html",
    "title": "Namespace Melanchall.DryWetMidi.Common | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Common Classes MidiException Base MIDI exception class. Structs FourBitNumber Type that is used to represent a four-bit number (0-15; or in binary format 0000-1111). SevenBitNumber Type that is used to represent a seven-bit number (0-127; or in binary format 0000000-1111111). Interfaces IMetadata Provides a way to attach arbitrary data to an object. Enums ControlName MIDI controller names. SmpteFormat SMPTE format which represents the frame rate."
  },
  "api/Melanchall.DryWetMidi.Common.IMetadata.html": {
    "href": "api/Melanchall.DryWetMidi.Common.IMetadata.html",
    "title": "Interface IMetadata | DryWetMIDI",
    "keywords": "Interface IMetadata Provides a way to attach arbitrary data to an object. Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public interface IMetadata Properties Metadata Gets or sets a metadata associated with the current object. Declaration object Metadata { get; set; } Property Value Type Description Object"
  },
  "api/Melanchall.DryWetMidi.Common.MidiException.html": {
    "href": "api/Melanchall.DryWetMidi.Common.MidiException.html",
    "title": "Class MidiException | DryWetMIDI",
    "keywords": "Class MidiException Base MIDI exception class. Inheritance Object Exception MidiException InvalidChannelEventParameterValueException InvalidChunkSizeException InvalidMetaEventParameterValueException InvalidMidiTimeCodeComponentException InvalidSystemCommonEventParameterValueException MissedEndOfTrackEventException NoHeaderChunkException NotEnoughBytesException TooManyTrackChunksException UnexpectedRunningStatusException UnexpectedTrackChunksCountException UnknownChannelEventException UnknownChunkException UnknownFileFormatException MidiDeviceException TickGeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiException : Exception, ISerializable Constructors MidiException(SerializationInfo, StreamingContext) Initializes a new instance of the MidiException class with serialized data. Declaration protected MidiException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Common.SevenBitNumber.html": {
    "href": "api/Melanchall.DryWetMidi.Common.SevenBitNumber.html",
    "title": "Struct SevenBitNumber | DryWetMIDI",
    "keywords": "Struct SevenBitNumber Type that is used to represent a seven-bit number (0-127; or in binary format 0000000-1111111). Implements IComparable < SevenBitNumber > IConvertible Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public struct SevenBitNumber : IComparable<SevenBitNumber>, IConvertible Remarks Seven-bit numbers widely used by MIDI protocol as parameters of MIDI events (note number or velocity). Instead of manipulating built-in .NET numeric types (like byte or int ) and checking for out-of-range errors all validation of numbers in the [0; 127] range happens on data type level via casting .NET integer values to the SevenBitNumber (see Explicit(Byte to SevenBitNumber) ). Examples For example, to set a note's number: var noteOnEvent = new NoteOnEvent(); noteOnEvent.NoteNumber = (SevenBitNumber)100; or velocity: var noteOffEvent = new NoteOffEvent(SevenBitNumber.MinValue, (SevenBitNumber)70); where SevenBitNumber.MinValue passed to the noteNumber parameter and (SevenBitNumber)70 passed to the velocity one. Constructors SevenBitNumber(Byte) Initializes a new instance of the SevenBitNumber with the specified value. Declaration public SevenBitNumber(byte value) Parameters Type Name Description Byte value Value representing seven-bit number. Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinValue ; MaxValue ] range. Fields MaxValue The largest possible value of a SevenBitNumber . Declaration public static readonly SevenBitNumber MaxValue Field Value Type Description SevenBitNumber MinValue The smallest possible value of a SevenBitNumber . Declaration public static readonly SevenBitNumber MinValue Field Value Type Description SevenBitNumber Values All possible values of SevenBitNumber . Declaration public static readonly SevenBitNumber[] Values Field Value Type Description SevenBitNumber [] Methods CompareTo(SevenBitNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(SevenBitNumber other) Parameters Type Name Description SevenBitNumber other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides ValueType.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() GetTypeCode() Returns the TypeCode for value type SevenBitNumber . Declaration public TypeCode GetTypeCode() Returns Type Description TypeCode The enumerated constant, Byte . Parse(String) Converts the string representation of a seven-bit number to its SevenBitNumber equivalent. Declaration public static SevenBitNumber Parse(string input) Parameters Type Name Description String input A string containing a number to convert. Returns Type Description SevenBitNumber A SevenBitNumber equivalent to the seven-bit number contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() TryParse(String, out SevenBitNumber) Converts the string representation of a seven-bit number to its SevenBitNumber equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out SevenBitNumber sevenBitNumber) Parameters Type Name Description String input A string containing a number to convert. SevenBitNumber sevenBitNumber When this method returns, contains the SevenBitNumber equivalent of the seven-bit number contained in input , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Explicit(Byte to SevenBitNumber) Converts the value of a Byte to a SevenBitNumber . Declaration public static explicit operator SevenBitNumber(byte number) Parameters Type Name Description Byte number Byte value to convert to a SevenBitNumber object. Returns Type Description SevenBitNumber number represented as SevenBitNumber . Exceptions Type Condition ArgumentOutOfRangeException number is out of [0; 127] range. Implicit(SevenBitNumber to Byte) Converts the value of a SevenBitNumber to a Byte . Declaration public static implicit operator byte (SevenBitNumber number) Parameters Type Name Description SevenBitNumber number SevenBitNumber object to convert to a byte value. Returns Type Description Byte number represented as Byte . Explicit Interface Implementations IConvertible.ToBoolean(IFormatProvider) Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information. Declaration bool IConvertible.ToBoolean(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Boolean A Boolean value equivalent to the value of this instance. IConvertible.ToByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information. Declaration byte IConvertible.ToByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Byte An 8-bit unsigned integer equivalent to the value of this instance. IConvertible.ToChar(IFormatProvider) Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information. Declaration char IConvertible.ToChar(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Char A Unicode character equivalent to the value of this instance. IConvertible.ToDateTime(IFormatProvider) Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information. Declaration DateTime IConvertible.ToDateTime(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description DateTime A DateTime instance equivalent to the value of this instance. IConvertible.ToDecimal(IFormatProvider) Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information. Declaration decimal IConvertible.ToDecimal(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Decimal A Decimal number equivalent to the value of this instance. IConvertible.ToDouble(IFormatProvider) Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information. Declaration double IConvertible.ToDouble(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Double A double-precision floating-point number equivalent to the value of this instance. IConvertible.ToInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information. Declaration short IConvertible.ToInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int16 An 16-bit signed integer equivalent to the value of this instance. IConvertible.ToInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information. Declaration int IConvertible.ToInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int32 An 32-bit signed integer equivalent to the value of this instance. IConvertible.ToInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information. Declaration long IConvertible.ToInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Int64 An 64-bit signed integer equivalent to the value of this instance. IConvertible.ToSByte(IFormatProvider) Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information. Declaration sbyte IConvertible.ToSByte(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description SByte An 8-bit signed integer equivalent to the value of this instance. IConvertible.ToSingle(IFormatProvider) Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information. Declaration float IConvertible.ToSingle(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Single A single-precision floating-point number equivalent to the value of this instance. IConvertible.ToString(IFormatProvider) Converts the value of this instance to an equivalent String using the specified culture-specific formatting information. Declaration string IConvertible.ToString(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description String A String instance equivalent to the value of this instance. IConvertible.ToType(Type, IFormatProvider) Converts the value of this instance to an System.Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information. Declaration object IConvertible.ToType(Type conversionType, IFormatProvider provider) Parameters Type Name Description Type conversionType The Type to which the value of this instance is converted. IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description Object An Object instance of type conversionType whose value is equivalent to the value of this instance. IConvertible.ToUInt16(IFormatProvider) Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information. Declaration ushort IConvertible.ToUInt16(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt16 An 16-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt32(IFormatProvider) Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information. Declaration uint IConvertible.ToUInt32(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt32 An 32-bit unsigned integer equivalent to the value of this instance. IConvertible.ToUInt64(IFormatProvider) Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information. Declaration ulong IConvertible.ToUInt64(IFormatProvider provider) Parameters Type Name Description IFormatProvider provider An IFormatProvider interface implementation that supplies culture-specific formatting information. Returns Type Description UInt64 An 64-bit unsigned integer equivalent to the value of this instance. Implements System.IComparable<T> System.IConvertible"
  },
  "api/Melanchall.DryWetMidi.Common.SmpteFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Common.SmpteFormat.html",
    "title": "Enum SmpteFormat | DryWetMIDI",
    "keywords": "Enum SmpteFormat SMPTE format which represents the frame rate. Namespace : Melanchall.DryWetMidi.Common Assembly : Melanchall.DryWetMidi.dll Syntax public enum SmpteFormat : byte Fields Name Description Thirty 30 frame/sec. ThirtyDrop 29.97 frame/sec (dropped 30). TwentyFive 25 frame/sec. TwentyFour 24 frame/sec."
  },
  "api/Melanchall.DryWetMidi.Composing.ChordDescriptor.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.ChordDescriptor.html",
    "title": "Class ChordDescriptor | DryWetMIDI",
    "keywords": "Class ChordDescriptor Represents an object that describes a chord. Inheritance Object ChordDescriptor Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordDescriptor Constructors ChordDescriptor(IEnumerable<Note>, SevenBitNumber, ITimeSpan) Initializes a new instance of the ChordDescriptor with the specified notes, velocity and length. Declaration public ChordDescriptor(IEnumerable<Note> notes, SevenBitNumber velocity, ITimeSpan length) Parameters Type Name Description IEnumerable < Note > notes Notes of the chord. SevenBitNumber velocity Velocity of the chord's notes. ITimeSpan length Length of the chord. Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . length is null . Properties Length Gets the length of the chord. Declaration public ITimeSpan Length { get; } Property Value Type Description ITimeSpan Notes Gets the notes of the chord. Declaration public IEnumerable<Note> Notes { get; } Property Value Type Description IEnumerable < Note > Velocity Gets the velocity of the chord. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(ChordDescriptor, ChordDescriptor) Determines if two ChordDescriptor objects are equal. Declaration public static bool operator ==(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2) Parameters Type Name Description ChordDescriptor chordDescriptor1 The first ChordDescriptor to compare. ChordDescriptor chordDescriptor2 The second ChordDescriptor to compare. Returns Type Description Boolean true if the descriptors are equal, false otherwise. Inequality(ChordDescriptor, ChordDescriptor) Determines if two ChordDescriptor objects are not equal. Declaration public static bool operator !=(ChordDescriptor chordDescriptor1, ChordDescriptor chordDescriptor2) Parameters Type Name Description ChordDescriptor chordDescriptor1 The first ChordDescriptor to compare. ChordDescriptor chordDescriptor2 The second ChordDescriptor to compare. Returns Type Description Boolean false if the descriptors are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Composing.ChordSelection.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.ChordSelection.html",
    "title": "Delegate ChordSelection | DryWetMIDI",
    "keywords": "Delegate ChordSelection Defines a predicate to select chords from pattern. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate bool ChordSelection(int noteIndex, ChordDescriptor chordDescriptor); Parameters Type Name Description Int32 noteIndex The index of currently processing chord. Index is continuous so it will not be set to zero for sub-patterns. ChordDescriptor chordDescriptor The descriptor of a chord containing all required information about the chord. Returns Type Description Boolean true if a chord should be selected and processed; otherwise, false ."
  },
  "api/Melanchall.DryWetMidi.Composing.ChordTransformation.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.ChordTransformation.html",
    "title": "Delegate ChordTransformation | DryWetMIDI",
    "keywords": "Delegate ChordTransformation Transforms a chord described by the specified ChordDescriptor and returns new ChordDescriptor that is result of transformation. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate ChordDescriptor ChordTransformation(ChordDescriptor chordDescriptor); Parameters Type Name Description ChordDescriptor chordDescriptor Descriptor of a chord to transform. Returns Type Description ChordDescriptor ChordDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Composing.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.html",
    "title": "Namespace Melanchall.DryWetMidi.Composing | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Composing Classes ChordDescriptor Represents an object that describes a chord. NoteDescriptor Represents an object that describes a note. Pattern Represents a musical pattern represented as a sequence of actions to create a musical composition. PatternBuilder Provides a fluent API to build an instance of the Pattern . PatternUtilities Utilities to process an instance of the Pattern . RepeatSettings Defines additional options for a patterns's actions repeating. Enums PatternActionState Defines the state of a pattern action. Delegates ChordSelection Defines a predicate to select chords from pattern. ChordTransformation Transforms a chord described by the specified ChordDescriptor and returns new ChordDescriptor that is result of transformation. NoteSelection Defines a predicate to select notes from pattern. NoteTransformation Transforms a note described by the specified NoteDescriptor and returns new NoteDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Composing.NoteDescriptor.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.NoteDescriptor.html",
    "title": "Class NoteDescriptor | DryWetMIDI",
    "keywords": "Class NoteDescriptor Represents an object that describes a note. Inheritance Object NoteDescriptor Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteDescriptor Constructors NoteDescriptor(Note, SevenBitNumber, ITimeSpan) Initializes a new instance of the NoteDescriptor with the specified note, velocity and length. Declaration public NoteDescriptor(Note note, SevenBitNumber velocity, ITimeSpan length) Parameters Type Name Description Note note Note. SevenBitNumber velocity Velocity of the note. ITimeSpan length Length of the note. Exceptions Type Condition ArgumentNullException One of the following errors occured: note is null . length is null . Properties Length Gets the length of the note. Declaration public ITimeSpan Length { get; } Property Value Type Description ITimeSpan Note Gets the note. Declaration public Note Note { get; } Property Value Type Description Note Velocity Gets the velocity of the note. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(NoteDescriptor, NoteDescriptor) Determines if two NoteDescriptor objects are equal. Declaration public static bool operator ==(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2) Parameters Type Name Description NoteDescriptor noteDescriptor1 The first NoteDescriptor to compare. NoteDescriptor noteDescriptor2 The second NoteDescriptor to compare. Returns Type Description Boolean true if the descriptors are equal, false otherwise. Inequality(NoteDescriptor, NoteDescriptor) Determines if two NoteDescriptor objects are not equal. Declaration public static bool operator !=(NoteDescriptor noteDescriptor1, NoteDescriptor noteDescriptor2) Parameters Type Name Description NoteDescriptor noteDescriptor1 The first NoteDescriptor to compare. NoteDescriptor noteDescriptor2 The second NoteDescriptor to compare. Returns Type Description Boolean false if the descriptors are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Composing.NoteSelection.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.NoteSelection.html",
    "title": "Delegate NoteSelection | DryWetMIDI",
    "keywords": "Delegate NoteSelection Defines a predicate to select notes from pattern. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate bool NoteSelection(int noteIndex, NoteDescriptor noteDescriptor); Parameters Type Name Description Int32 noteIndex The index of currently processing note. Index is continuous so it will not be set to zero for sub-patterns. NoteDescriptor noteDescriptor The descriptor of a note containing all required information about the note. Returns Type Description Boolean true if a note should be selected and processed; otherwise, false ."
  },
  "api/Melanchall.DryWetMidi.Composing.NoteTransformation.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.NoteTransformation.html",
    "title": "Delegate NoteTransformation | DryWetMIDI",
    "keywords": "Delegate NoteTransformation Transforms a note described by the specified NoteDescriptor and returns new NoteDescriptor that is result of transformation. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public delegate NoteDescriptor NoteTransformation(NoteDescriptor noteDescriptor); Parameters Type Name Description NoteDescriptor noteDescriptor Descriptor of a note to transform. Returns Type Description NoteDescriptor NoteDescriptor that is result of transformation."
  },
  "api/Melanchall.DryWetMidi.Composing.Pattern.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.Pattern.html",
    "title": "Class Pattern | DryWetMIDI",
    "keywords": "Class Pattern Represents a musical pattern represented as a sequence of actions to create a musical composition. Inheritance Object Pattern Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Pattern Remarks Pattern allows to represent musical composition as a set of actions like 'note' or 'program change'. In other words, it allows to create MIDI file in more musical manner. There are two ways to get an instance of the Pattern : Build a pattern from scratch with fluent API provided by PatternBuilder . Use one of extension methods within PatternUtilities to create pattern by processing existing one. You can see examples of building musical compositions in the corresponding article . Methods Clone() Clones pattern by creating a copy of it. Declaration public Pattern Clone() Returns Type Description Pattern Copy of the pattern containing all actions from original one. ToFile(TempoMap) Exports the current Pattern to MIDI file using zero channel. Declaration public MidiFile ToFile(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. Returns Type Description MidiFile The MidiFile containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null . ToFile(TempoMap, FourBitNumber) Exports the current Pattern to MIDI file. Declaration public MidiFile ToFile(TempoMap tempoMap, FourBitNumber channel) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. FourBitNumber channel Channel of notes that will be generated by pattern. Returns Type Description MidiFile The MidiFile containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null . ToTrackChunk(TempoMap) Exports the current Pattern to track chunk using zero channel. Declaration public TrackChunk ToTrackChunk(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. Returns Type Description TrackChunk The TrackChunk containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null . ToTrackChunk(TempoMap, FourBitNumber) Exports the current Pattern to track chunk. Declaration public TrackChunk ToTrackChunk(TempoMap tempoMap, FourBitNumber channel) Parameters Type Name Description TempoMap tempoMap Tempo map to process pattern data according with. FourBitNumber channel Channel of notes that will be generated by pattern. Returns Type Description TrackChunk The TrackChunk containing notes events generated by the current Pattern . Exceptions Type Condition ArgumentNullException tempoMap is null . Extension Methods PatternUtilities.TransformNotes(Pattern, NoteTransformation, Boolean) PatternUtilities.TransformNotes(Pattern, NoteSelection, NoteTransformation, Boolean) PatternUtilities.TransformChords(Pattern, ChordTransformation, Boolean) PatternUtilities.TransformChords(Pattern, ChordSelection, ChordTransformation, Boolean) PatternUtilities.SplitAtAnchor(Pattern, Object, Boolean) PatternUtilities.SplitAtAllAnchors(Pattern, Boolean) PatternUtilities.SplitAtMarker(Pattern, String, Boolean, StringComparison) PatternUtilities.SplitAtAllMarkers(Pattern, Boolean) PatternUtilities.SetNotesState(Pattern, NoteSelection, PatternActionState, Boolean) PatternUtilities.SetChordsState(Pattern, ChordSelection, PatternActionState, Boolean) PlaybackUtilities.GetPlayback(Pattern, TempoMap, FourBitNumber, IOutputDevice, PlaybackSettings) PlaybackUtilities.GetPlayback(Pattern, TempoMap, FourBitNumber, PlaybackSettings) PlaybackUtilities.Play(Pattern, TempoMap, FourBitNumber, IOutputDevice, PlaybackSettings)"
  },
  "api/Melanchall.DryWetMidi.Composing.PatternActionState.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.PatternActionState.html",
    "title": "Enum PatternActionState | DryWetMIDI",
    "keywords": "Enum PatternActionState Defines the state of a pattern action. Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public enum PatternActionState Remarks Pattern actions correspond to methods on PatternBuilder . For example, Note(Interval) creates 'Add note' action, so the state will define whether a note will be enabled, disabled or excluded from pattern at all. Fields Name Description Disabled Action is disabled. It will still occupy time span corresponding to the action, but MIDI data will not be generated for it. Enabled Action is enabled and will be exported to MIDI data. Excluded Action is completely excluded from pattern. It won't occupy time span and MIDI data will not be generated."
  },
  "api/Melanchall.DryWetMidi.Composing.PatternBuilder.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.PatternBuilder.html",
    "title": "Class PatternBuilder | DryWetMIDI",
    "keywords": "Class PatternBuilder Provides a fluent API to build an instance of the Pattern . Inheritance Object PatternBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PatternBuilder Examples Following example shows how to create first four bars of Beethoven's 'Moonlight Sonata': // Define a chord for bass part which is just an octave var bassChord = new[] { Interval.Twelve }; // Build the composition var pattern = new PatternBuilder() // The length of all main theme's notes within four first bars is // triplet eight so set it which will free us from necessity to specify // the length of each note explicitly .SetNoteLength(MusicalTimeSpan.Eighth.Triplet()) // Anchor current time (start of the pattern) to jump to it // when we'll start to program bass part .Anchor() // We will add notes relative to G#3. // Instead of Octave.Get(3).GSharp it is possible to use Note.Get(NoteName.GSharp, 3) .SetRootNote(Octave.Get(3).GSharp) // Add first three notes and repeat them seven times which will // give us two bars of the main theme // G#3 .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Repeat(3, 7) // repeat three previous notes seven times // Add notes of the next two bars // G#3 .Note(Interval.One) // +1 (A3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Repeat(3, 1) // repeat three previous notes .Note(Interval.One) // +1 (A3) .Note(Interval.Six) // +6 (D4) .Note(Interval.Ten) // +10 (F#4) .Repeat(3, 1) // repeat three previous notes // reaching the end of third bar .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Four) // +4 (C4) .Note(Interval.Ten) // +10 (F#4) .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Intervaln.Seven) // +7 (D#4) .Note(-Interval.Two) // -2 (F#3) .Note(Interval.Four) // +4 (C4) .Note(Interval.Seven) // +7 (D#4) // Now we will program bass part. To start adding notes from the // beginning of the pattern we need to move to the anchor we set // above .MoveToFirstAnchor() // First two chords have whole length .SetNoteLength(MusicalTimeSpan.Whole) // insert a chord relative to .Chord(bassChord, Octave.Get(2).CSharp) // C#2 (C#2, C#3) .Chord(bassChord, Octave.Get(1).B) // B1 (B1, B2) // Remaining four chords has half length .SetNoteLength(MusicalTimeSpan.Half) .Chord(bassChord, Octave.Get(1).A) // A1 (A1, A2) .Chord(bassChord, Octave.Get(1).FSharp) // F#1 (F#1, F#2) .Chord(bassChord, Octave.Get(1).GSharp) // G#1 (G#1, G#2) .Repeat() // repeat the previous chord // Build a pattern that can be then saved to a MIDI file .Build(); Constructors PatternBuilder() Initializes a new instance of the PatternBuilder . Declaration public PatternBuilder() PatternBuilder(Pattern) Initializes a new instance of the PatternBuilder with the specified pattern. Declaration public PatternBuilder(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to initialize builder with. Remarks This constructor is equivalent to calling default one followed by ReplayPattern(Pattern) call. Using this constructor pattern builder's current position will be placed right after pattern so all further actions will be relative to the end of pattern rather than zero. To start with fresh pattern and place data starting from zero use PatternBuilder() constructor. Exceptions Type Condition ArgumentNullException pattern is null . Fields DefaultNoteLength Default length that will be applied to all further notes and chords if it's not specified explicitly. The length can be altered with SetNoteLength(ITimeSpan) . Declaration public static readonly ITimeSpan DefaultNoteLength Field Value Type Description ITimeSpan DefaultOctave Default octave further notes and chords will be relative to if it's not specified explicitly. Octave can be altered with SetOctave(Octave) . Declaration public static readonly Octave DefaultOctave Field Value Type Description Octave DefaultRootNote Default root note further notes will be based on if it's not specified explicitly. Root note can be altered with SetRootNote(Note) . Declaration public static readonly Note DefaultRootNote Field Value Type Description Note DefaultStep Default step size that will be applied to all further move operations if it's not specified explicitly. Step size can be altered with SetStep(ITimeSpan) . Declaration public static readonly ITimeSpan DefaultStep Field Value Type Description ITimeSpan DefaultVelocity Default velocity that will be applied to all further notes and chords if it's not specified explicitly. Velocity can be altered with SetVelocity(SevenBitNumber) . Declaration public static readonly SevenBitNumber DefaultVelocity Field Value Type Description SevenBitNumber Properties NoteLength Gets the length that will be applied to all further notes and chords if it's not specified explicitly. The length can be altered with SetNoteLength(ITimeSpan) . Declaration public ITimeSpan NoteLength { get; } Property Value Type Description ITimeSpan Remarks There are methods to add notes and chords that don't take length as an argument. In these cases the value of the NoteLength property will be used. For example, Note(Note) or Chord(IEnumerable<Interval>, Note) . Octave Gets the octave further notes and chords will be relative to if it's not specified explicitly. Octave can be altered with SetOctave(Octave) . Declaration public Octave Octave { get; } Property Value Type Description Octave Remarks There are methods to add notes and chords where octave is not specified explicitly. In these cases the value of the Octave property will be used. For example, Note(NoteName) or Chord(IEnumerable<Interval>, NoteName) . RootNote Gets the root note further notes will be based on if it's not specified explicitly. Root note can be altered with SetRootNote(Note) . Declaration public Note RootNote { get; } Property Value Type Description Note Remarks There are methods to add notes by interval where root note is not specified explicitly. In these cases the value of the RootNote property will be used. For example, Note(Interval) . Step Gets the step size that will be applied to all further move operations if it's not specified explicitly. Step size can be altered with SetStep(ITimeSpan) . Declaration public ITimeSpan Step { get; } Property Value Type Description ITimeSpan Remarks There are methods to move current builder's position that don't take step as an argument. In these cases the value of the Step property will be used. For example, StepForward() or StepBack() . Velocity Gets the velocity that will be applied to all further notes and chords if it's not specified explicitly. Velocity can be altered with SetVelocity(SevenBitNumber) . Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber Remarks There are methods to add notes and chords that don't take velocity as an argument. In these cases the value of the Velocity property will be used. For example, Note(Note) or Chord(IEnumerable<Interval>, Note) . Methods Anchor() Places an anchor at the current time. Declaration public PatternBuilder Anchor() Returns Type Description PatternBuilder The current PatternBuilder . Anchor(Object) Places the specified anchor at the current time. Declaration public PatternBuilder Anchor(object anchor) Parameters Type Name Description Object anchor Anchor to place. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null . Build() Build an instance of the Pattern holding all actions defined via builder. Declaration public Pattern Build() Returns Type Description Pattern An instance of the Pattern that holds all actions defined by the current PatternBuilder . Chord(Chord) Adds a chord. Declaration public PatternBuilder Chord(Chord chord) Parameters Type Name Description Chord chord Chord to add. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException chord is null . Chord(Chord, SevenBitNumber) Adds a chord with the specified velocity. Declaration public PatternBuilder Chord(Chord chord, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentNullException chord is null . Chord(Chord, ITimeSpan) Adds a chord with the specified length. Declaration public PatternBuilder Chord(Chord chord, ITimeSpan length) Parameters Type Name Description Chord chord Chord to add. ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . length is null . Chord(Chord, ITimeSpan, SevenBitNumber) Adds a chord with the specified notes length and velocity. Declaration public PatternBuilder Chord(Chord chord, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . length is null . Chord(Chord, Octave) Adds a chord using the specified octave. Declaration public PatternBuilder Chord(Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null . Chord(Chord, Octave, SevenBitNumber) Adds a chord using the specified octave and velocity. Declaration public PatternBuilder Chord(Chord chord, Octave octave, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null . Chord(Chord, Octave, ITimeSpan) Adds a chord using the specified octave and notes length. Declaration public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null . length is null . Chord(Chord, Octave, ITimeSpan, SevenBitNumber) Adds a chord using the specified octave, length and velocity. Declaration public PatternBuilder Chord(Chord chord, Octave octave, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Chord chord Chord to add. Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null . length is null . Chord(IEnumerable<Interval>, Note) Adds a chord by the specified intervals relative to the root note using default length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: intervals is null . rootNote is null . ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, SevenBitNumber) Adds a chord by the specified intervals relative to the root note using default length and specified velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException One of the following errors occured: intervals is null . rootNote is null . ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, ITimeSpan) Adds a chord by the specified intervals relative to the root note using specified length and default velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> interval, Note rootNote, ITimeSpan length) Parameters Type Name Description IEnumerable < Interval > interval The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the interval . To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: interval is null . rootNote is null . length is null . ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, Note, ITimeSpan, SevenBitNumber) Adds a chord by the specified intervals relative to the root note using specified length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, Note rootNote, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals The Interval objects which define a numbers of half steps from the rootNote . Note rootNote The chord's root note. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks The result chord will contain the specified root note and notes produced by transposing the rootNote by the intervals . Exceptions Type Condition ArgumentNullException One of the following errors occured: intervals is null . rootNote is null . length is null . ArgumentOutOfRangeException The number of result chord's note is out of valid range. Chord(IEnumerable<Interval>, NoteName) Adds a chord by the specified intervals and root note's name. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException intervals is null . InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, SevenBitNumber) Adds a chord by the specified intervals, root note's name and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException intervals is null . InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, ITimeSpan) Adds a chord by the specified intervals, root note's name and length. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, ITimeSpan length) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: intervals is null . length is null . InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Interval>, NoteName, ITimeSpan, SevenBitNumber) Adds a chord by the specified intervals, root note's name, length and velocity. Declaration public PatternBuilder Chord(IEnumerable<Interval> intervals, NoteName rootNoteName, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Interval > intervals Intervals that represent the chord. NoteName rootNoteName The root note's name of the chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException One of the following errors occured: intervals is null . length is null . InvalidEnumArgumentException rootNoteName specified an invalid value. Chord(IEnumerable<Note>) Adds a chord by the specified notes using default velocity and length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException notes is null . Chord(IEnumerable<Note>, SevenBitNumber) Adds a chord by the specified notes using specified velocity and default length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException notes is null . Chord(IEnumerable<Note>, ITimeSpan) Adds a chord by the specified notes using specified length and default velocity. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, ITimeSpan length) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . length is null . Chord(IEnumerable<Note>, ITimeSpan, SevenBitNumber) Adds a chord by the specified notes using specified velocity and length. Declaration public PatternBuilder Chord(IEnumerable<Note> notes, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < Note > notes Notes that represent a chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . length is null . Chord(IEnumerable<NoteName>) Adds a chord by the specified notes names using default velocity, length and octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException noteNames is null . Chord(IEnumerable<NoteName>, SevenBitNumber) Adds a chord by the specified notes names using specified velocity and default length, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException noteNames is null . Chord(IEnumerable<NoteName>, ITimeSpan) Adds a chord by the specified notes names using specified length and default velocity, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, ITimeSpan length) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. ITimeSpan length The length of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: noteNames is null . length is null . Chord(IEnumerable<NoteName>, ITimeSpan, SevenBitNumber) Adds a chord by the specified notes names using specified velocity and length, and default octave. Declaration public PatternBuilder Chord(IEnumerable<NoteName> noteNames, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description IEnumerable < NoteName > noteNames Names of notes that represent a chord. ITimeSpan length The length of a chord. SevenBitNumber velocity The velocity of a chord. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. Exceptions Type Condition ArgumentNullException One of the following errors occured: noteNames is null . length is null . Chord(String) Adds a chord. Declaration public PatternBuilder Chord(string chord) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. Chord(String, SevenBitNumber) Adds a chord with the specified velocity. Declaration public PatternBuilder Chord(string chord, SevenBitNumber velocity) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. Chord(String, ITimeSpan) Adds a chord with the specified length. Declaration public PatternBuilder Chord(string chord, ITimeSpan length) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException length is null . Chord(String, ITimeSpan, SevenBitNumber) Adds a chord with the specified notes length and velocity. Declaration public PatternBuilder Chord(string chord, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes will be resolved according to Octave . To change octave use SetOctave(Octave) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException length is null . Chord(String, Octave) Adds a chord using the specified octave. Declaration public PatternBuilder Chord(string chord, Octave octave) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). Octave octave Octave to resolve chord's notes. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException octave is null . Chord(String, Octave, SevenBitNumber) Adds a chord using the specified octave and velocity. Declaration public PatternBuilder Chord(string chord, Octave octave, SevenBitNumber velocity) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). Octave octave Octave to resolve chord's notes. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes length will be taken from NoteLength . To change notes length use SetNoteLength(ITimeSpan) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException octave is null . Chord(String, Octave, ITimeSpan) Adds a chord using the specified octave and notes length. Declaration public PatternBuilder Chord(string chord, Octave octave, ITimeSpan length) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Chord's notes velocity will be taken from Velocity . To change velocity use SetVelocity(SevenBitNumber) method. Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException One of the following errors occured: octave is null . length is null . Chord(String, Octave, ITimeSpan, SevenBitNumber) Adds a chord using the specified octave, length and velocity. Declaration public PatternBuilder Chord(string chord, Octave octave, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description String chord A chord as a string (like Dmin, for example). Octave octave Octave to resolve chord's notes. ITimeSpan length Chord's notes length. SevenBitNumber velocity Chord's notes velocity. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentException chord is null or contains white-spaces only. FormatException chord has invalid format. ArgumentNullException One of the following errors occured: octave is null . length is null . Lyrics(String) Adds lyrics. Declaration public PatternBuilder Lyrics(string text) Parameters Type Name Description String text Text of lyrics. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException text is null . Marker(String) Adds a marker. Declaration public PatternBuilder Marker(string marker) Parameters Type Name Description String marker The text of marker. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException marker is null . MoveToFirstAnchor() Move to the first anchor. Declaration public PatternBuilder MoveToFirstAnchor() Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidOperationException There are no anchors. MoveToFirstAnchor(Object) Moves to the first specified anchor. Declaration public PatternBuilder MoveToFirstAnchor(object anchor) Parameters Type Name Description Object anchor Anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null . ArgumentException There are no anchors with the anchor key. MoveToLastAnchor() Moves to the last anchor. Declaration public PatternBuilder MoveToLastAnchor() Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidOperationException The are no anchors. MoveToLastAnchor(Object) Moves to the last specified anchor. Declaration public PatternBuilder MoveToLastAnchor(object anchor) Parameters Type Name Description Object anchor Anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null . ArgumentException There are no anchors with the anchor key. MoveToNthAnchor(Int32) Moves to the nth anchor. Declaration public PatternBuilder MoveToNthAnchor(int index) Parameters Type Name Description Int32 index Index of an anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentOutOfRangeException index is out of range. MoveToNthAnchor(Object, Int32) Moves to the nth specified anchor. Declaration public PatternBuilder MoveToNthAnchor(object anchor, int index) Parameters Type Name Description Object anchor Anchor to move to. Int32 index Index of an anchor to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException anchor is null . ArgumentOutOfRangeException index is out of range. MoveToPreviousTime() Moves the current time to the previous one. Declaration public PatternBuilder MoveToPreviousTime() Returns Type Description PatternBuilder The current PatternBuilder . Remarks On every action current time is stored in the time history. To return to the last saved time you can call the MoveToPreviousTime() . MoveToStart() Moves the current time to the start (zero time) of a pattern. Declaration public PatternBuilder MoveToStart() Returns Type Description PatternBuilder The current PatternBuilder . MoveToTime(ITimeSpan) Moves the current time to the specified one. Declaration public PatternBuilder MoveToTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time to move to. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException time is null . Note(Interval) Adds a note by the specified interval relative to the current root note using default length and velocity. Declaration public PatternBuilder Note(Interval interval) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, SevenBitNumber) Adds a note by the specified interval relative to the current root note using default length and specified velocity. Declaration public PatternBuilder Note(Interval interval, SevenBitNumber velocity) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, ITimeSpan) Adds a note by the specified interval relative to the current root note using specified length and default velocity. Declaration public PatternBuilder Note(Interval interval, ITimeSpan length) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: interval is null . length is null . ArgumentOutOfRangeException The number of result note is out of valid range. Note(Interval, ITimeSpan, SevenBitNumber) Adds a note by the specified interval relative to the current root note using specified length and velocity. Declaration public PatternBuilder Note(Interval interval, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Interval interval The Interval which defines a number of half steps from the current root note. ITimeSpan length The length of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set root note use SetRootNote(Note) method. By default the root note is C4. Exceptions Type Condition ArgumentNullException One of the following errors occured: interval is null . length is null . ArgumentOutOfRangeException The number of result note is out of valid range. Note(Note) Adds a note using default length and velocity. Declaration public PatternBuilder Note(Note note) Parameters Type Name Description Note note A note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException note is null . Note(Note, SevenBitNumber) Adds a note using specified velocity and default length. Declaration public PatternBuilder Note(Note note, SevenBitNumber velocity) Parameters Type Name Description Note note A note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentNullException note is null . Note(Note, ITimeSpan) Adds a note using specified length and default velocity. Declaration public PatternBuilder Note(Note note, ITimeSpan length) Parameters Type Name Description Note note A note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException One of the following errors occured: note is null . length is null . Note(Note, ITimeSpan, SevenBitNumber) Adds a note using specified velocity and length. Declaration public PatternBuilder Note(Note note, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description Note note A note. ITimeSpan length The length of the note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException One of the following errors occured: note is null . length is null . Note(NoteName) Adds a note by the specified note name using default velocity, length and octave. Declaration public PatternBuilder Note(NoteName noteName) Parameters Type Name Description NoteName noteName The name of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. Note(NoteName, SevenBitNumber) Adds a note by the specified note name using specified velocity and default length and octave. Declaration public PatternBuilder Note(NoteName noteName, SevenBitNumber velocity) Parameters Type Name Description NoteName noteName The name of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. Note(NoteName, ITimeSpan) Adds a note by the specified note name using specified length and default velocity and octave. Declaration public PatternBuilder Note(NoteName noteName, ITimeSpan length) Parameters Type Name Description NoteName noteName The name of a note. ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException length is null . Note(NoteName, ITimeSpan, SevenBitNumber) Adds a note by the specified note name using specified velocity and length, and default octave. Declaration public PatternBuilder Note(NoteName noteName, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description NoteName noteName The name of a note. ITimeSpan length The length of a note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default octave use SetOctave(Octave) method. By default the octave number is 4. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException length is null . Note(String) Adds a note using default length and velocity. Declaration public PatternBuilder Note(string note) Parameters Type Name Description String note A note as a string (like A2, for example). Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentException note is null or contains white-spaces only. FormatException note has invalid format. Note(String, SevenBitNumber) Adds a note using specified velocity and default length. Declaration public PatternBuilder Note(string note, SevenBitNumber velocity) Parameters Type Name Description String note A note as a string (like A2, for example). SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default note length use SetNoteLength(ITimeSpan) method. By default the length is 1/4. Exceptions Type Condition ArgumentException note is null or contains white-spaces only. FormatException note has invalid format. Note(String, ITimeSpan) Adds a note using specified length and default velocity. Declaration public PatternBuilder Note(string note, ITimeSpan length) Parameters Type Name Description String note A note as a string (like A2, for example). ITimeSpan length The length of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default velocity use SetVelocity(SevenBitNumber) method. By default the velocity is 100. Exceptions Type Condition ArgumentNullException length is null . ArgumentException note is null or contains white-spaces only. FormatException note has invalid format. Note(String, ITimeSpan, SevenBitNumber) Adds a note using specified velocity and length. Declaration public PatternBuilder Note(string note, ITimeSpan length, SevenBitNumber velocity) Parameters Type Name Description String note A note as a string (like A2, for example). ITimeSpan length The length of the note. SevenBitNumber velocity The velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException length is null . ArgumentException note is null or contains white-spaces only. FormatException note has invalid format. Pattern(Pattern) Adds a pattern. Declaration public PatternBuilder Pattern(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to add. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException pattern is null . ProgramChange(SevenBitNumber) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(SevenBitNumber programNumber) Parameters Type Name Description SevenBitNumber programNumber The number of a MIDI program. Returns Type Description PatternBuilder The current PatternBuilder . ProgramChange(GeneralMidi2Program) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(GeneralMidi2Program program) Parameters Type Name Description GeneralMidi2Program program The General MIDI Level 2 program. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. ProgramChange(GeneralMidiProgram) Inserts ProgramChangeEvent to specify an instrument that will be used by following notes. Declaration public PatternBuilder ProgramChange(GeneralMidiProgram program) Parameters Type Name Description GeneralMidiProgram program The General MIDI Level 1 program. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. Repeat(RepeatSettings) Repeats the previous action one time. Declaration public PatternBuilder Repeat(RepeatSettings settings = null) Parameters Type Name Description RepeatSettings settings Settings according to which actions should be repeated. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immediately on next actions. Exceptions Type Condition InvalidOperationException There are no actions to repeat. Repeat(Int32, RepeatSettings) Repeats the previous action the specified number of times. Declaration public PatternBuilder Repeat(int repeatsNumber, RepeatSettings settings = null) Parameters Type Name Description Int32 repeatsNumber Count of repetitions. RepeatSettings settings Settings according to which actions should be repeated. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immediately on next actions. Exceptions Type Condition ArgumentOutOfRangeException repeatsNumber is negative. InvalidOperationException There are no actions to repeat. Repeat(Int32, Int32, RepeatSettings) Repeats the specified number of previous actions. Declaration public PatternBuilder Repeat(int actionsCount, int repeatsNumber, RepeatSettings settings = null) Parameters Type Name Description Int32 actionsCount Number of previous actions to repeat. Int32 repeatsNumber Count of repetitions. RepeatSettings settings Settings according to which actions should be repeated. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Note that SetNoteLength(ITimeSpan) , SetOctave(Octave) , SetStep(ITimeSpan) and SetVelocity(SevenBitNumber) are not actions and will not be repeated since default values applies immediately on next actions. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: actionsCount is negative. actionsCount is greater than count of existing actions. repeatsNumber is negative. ReplayPattern(Pattern) Replays all actions contained in the specified pattern. Declaration public PatternBuilder ReplayPattern(Pattern pattern) Parameters Type Name Description Pattern pattern Pattern to replay actions of. Returns Type Description PatternBuilder The current PatternBuilder . Remarks ReplayPattern(Pattern) inserts all actions from pattern that were added by using methods of PatternBuilder to produce the specified pattern. These actions will be added as separate ones unlike Pattern(Pattern) which adds pattern as one single action. Exceptions Type Condition ArgumentNullException pattern is null . SetNoteLength(ITimeSpan) Sets default note length that will be used by next actions of the builder. Declaration public PatternBuilder SetNoteLength(ITimeSpan length) Parameters Type Name Description ITimeSpan length New default note length. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default note length is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException length is null . SetOctave(Octave) Sets default note octave that will be used by next actions of the builder. Declaration public PatternBuilder SetOctave(Octave octave) Parameters Type Name Description Octave octave New default octave. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default octave is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException octave is null . SetRootNote(Note) Sets a root note that will be used by next actions of the builder using Interval objects. Declaration public PatternBuilder SetRootNote(Note rootNote) Parameters Type Name Description Note rootNote The root note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting a root note is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException rootNote is null . SetStep(ITimeSpan) Sets default step for step back and step forward actions of the builder. Declaration public PatternBuilder SetStep(ITimeSpan step) Parameters Type Name Description ITimeSpan step New default step. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default step is not an action and thus will not be stored in a pattern. Exceptions Type Condition ArgumentNullException step is null . SetVelocity(SevenBitNumber) Sets default velocity that will be used by next actions of the builder. Declaration public PatternBuilder SetVelocity(SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber velocity New default velocity of a note. Returns Type Description PatternBuilder The current PatternBuilder . Remarks Setting default velocity is not an action and thus will not be stored in a pattern. StepBack() Moves the current time by the default step back. Declaration public PatternBuilder StepBack() Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default step use SetStep(ITimeSpan) method. By default the step is 1/4. StepBack(ITimeSpan) Moves the current time by the specified step back. Declaration public PatternBuilder StepBack(ITimeSpan step) Parameters Type Name Description ITimeSpan step Step to move by. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException step is null . StepForward() Moves the current time by the default step forward. Declaration public PatternBuilder StepForward() Returns Type Description PatternBuilder The current PatternBuilder . Remarks To set default step use SetStep(ITimeSpan) method. By default the step is 1/4. StepForward(ITimeSpan) Moves the current time by the specified step forward. Declaration public PatternBuilder StepForward(ITimeSpan step) Parameters Type Name Description ITimeSpan step Step to move by. Returns Type Description PatternBuilder The current PatternBuilder . Exceptions Type Condition ArgumentNullException step is null ."
  },
  "api/Melanchall.DryWetMidi.Composing.PatternUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.PatternUtilities.html",
    "title": "Class PatternUtilities | DryWetMIDI",
    "keywords": "Class PatternUtilities Utilities to process an instance of the Pattern . Inheritance Object PatternUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public static class PatternUtilities Methods CombineInParallel(IEnumerable<Pattern>) Combines the specified patterns into single one starting all them at the same time (i.e. stacking patterns). Declaration public static Pattern CombineInParallel(this IEnumerable<Pattern> patterns) Parameters Type Name Description IEnumerable < Pattern > patterns Patterns to combine. Returns Type Description Pattern Pattern that made up from patterns arranged into stack. Exceptions Type Condition ArgumentNullException patterns is null . CombineInSequence(IEnumerable<Pattern>) Combines the specified patterns into single one placing them after each other. Declaration public static Pattern CombineInSequence(this IEnumerable<Pattern> patterns) Parameters Type Name Description IEnumerable < Pattern > patterns Patterns to combine. Returns Type Description Pattern Pattern that made up from patterns following each other. Exceptions Type Condition ArgumentNullException patterns is null . SetChordsState(Pattern, ChordSelection, PatternActionState, Boolean) Sets the state of chords within the specified pattern. Declaration public static void SetChordsState(this Pattern pattern, ChordSelection chordSelection, PatternActionState state, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to set chords state within. ChordSelection chordSelection Predicate to select chords to set state. PatternActionState state State of chords selected with chordSelection . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . chordSelection is null . InvalidEnumArgumentException state specified an invalid value. SetNotesState(Pattern, NoteSelection, PatternActionState, Boolean) Sets the state of notes within the specified pattern. Declaration public static void SetNotesState(this Pattern pattern, NoteSelection noteSelection, PatternActionState state, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to set notes state within. NoteSelection noteSelection Predicate to select notes to set state. PatternActionState state State of notes selected with noteSelection . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . noteSelection is null . InvalidEnumArgumentException state specified an invalid value. SplitAtAllAnchors(Pattern, Boolean) Splits a pattern into subpatterns in points where anchors inserted. Declaration public static IEnumerable<Pattern> SplitAtAllAnchors(this Pattern pattern, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true . Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is split at anchors. Exceptions Type Condition ArgumentNullException pattern is null . SplitAtAllMarkers(Pattern, Boolean) Splits a pattern into subpatterns in points where markers inserted. Declaration public static IEnumerable<Pattern> SplitAtAllMarkers(this Pattern pattern, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true . Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is split at markers. Exceptions Type Condition ArgumentNullException pattern is null . SplitAtAnchor(Pattern, Object, Boolean) Splits a pattern into subpatterns in points where the specified anchor inserted. Declaration public static IEnumerable<Pattern> SplitAtAnchor(this Pattern pattern, object anchor, bool removeEmptyPatterns = true) Parameters Type Name Description Pattern pattern Pattern to split. Object anchor Anchor to split pattern at. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true . Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is split at anchor . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . anchor is null . SplitAtMarker(Pattern, String, Boolean, StringComparison) Splits a pattern into subpatterns in points where the specified marker inserted. Declaration public static IEnumerable<Pattern> SplitAtMarker(this Pattern pattern, string marker, bool removeEmptyPatterns = true, StringComparison stringComparison = StringComparison.CurrentCulture) Parameters Type Name Description Pattern pattern Pattern to split. String marker Marker to split pattern at. Boolean removeEmptyPatterns A value indicating whether empty patterns should be automatically removed or not. The default value is true . StringComparison stringComparison Value that specifies how the marker strings will be compared. Returns Type Description IEnumerable < Pattern > A collection whose elements are the subpatterns from the pattern that is split at marker . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . marker is null . InvalidEnumArgumentException stringComparison specified an invalid value. TransformChords(Pattern, ChordSelection, ChordTransformation, Boolean) Creates a new Pattern by transforming chords in the specified pattern using predicate to select chords to transform.. Declaration public static Pattern TransformChords(this Pattern pattern, ChordSelection chordSelection, ChordTransformation chordTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. ChordSelection chordSelection Predicate to select chords to transform. ChordTransformation chordTransformation Transformation to apply to chords of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Returns Type Description Pattern Pattern that created by transforming chords of the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . chordSelection is null . chordTransformation is null . TransformChords(Pattern, ChordTransformation, Boolean) Creates a new Pattern by transforming chords in the specified pattern. Declaration public static Pattern TransformChords(this Pattern pattern, ChordTransformation chordTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. ChordTransformation chordTransformation Transformation to apply to chords of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Returns Type Description Pattern Pattern that created by transforming chords of the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . chordTransformation is null . TransformNotes(Pattern, NoteSelection, NoteTransformation, Boolean) Creates a new Pattern by transforming notes in the specified pattern using predicate to select notes to transform. Declaration public static Pattern TransformNotes(this Pattern pattern, NoteSelection noteSelection, NoteTransformation noteTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. NoteSelection noteSelection Predicate to select notes to transform. NoteTransformation noteTransformation Transformation to apply to notes of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Returns Type Description Pattern Pattern that created by transforming notes of the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . noteSelection is null . noteTransformation is null . TransformNotes(Pattern, NoteTransformation, Boolean) Creates a new Pattern by transforming notes in the specified pattern. Declaration public static Pattern TransformNotes(this Pattern pattern, NoteTransformation noteTransformation, bool recursive = true) Parameters Type Name Description Pattern pattern Pattern to transform notes of. NoteTransformation noteTransformation Transformation to apply to notes of the pattern . Boolean recursive A value indicating whether nested patterns should be processed or not. The default value is true . Returns Type Description Pattern Pattern that created by transforming notes of the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . noteTransformation is null ."
  },
  "api/Melanchall.DryWetMidi.Composing.RepeatSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Composing.RepeatSettings.html",
    "title": "Class RepeatSettings | DryWetMIDI",
    "keywords": "Class RepeatSettings Defines additional options for a patterns's actions repeating. Inheritance Object RepeatSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Composing Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RepeatSettings Properties ChordTransformation Gets or sets a transformation for every repeated chord. If set to null , no transformation will be applied. Declaration public ChordTransformation ChordTransformation { get; set; } Property Value Type Description ChordTransformation NoteTransformation Gets or sets a transformation for every repeated note. If set to null , no transformation will be applied. Declaration public NoteTransformation NoteTransformation { get; set; } Property Value Type Description NoteTransformation See Also PatternBuilder"
  },
  "api/Melanchall.DryWetMidi.Core.ActiveSensingEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ActiveSensingEvent.html",
    "title": "Class ActiveSensingEvent | DryWetMIDI",
    "keywords": "Class ActiveSensingEvent Represents Active Sensing event. Inheritance Object MidiEvent SystemRealTimeEvent ActiveSensingEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ActiveSensingEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI active sense message tells a MIDI device that the MIDI connection is still active. Constructors ActiveSensingEvent() Initializes a new instance of the ActiveSensingEvent . Declaration public ActiveSensingEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.BaseTextEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BaseTextEvent.html",
    "title": "Class BaseTextEvent | DryWetMIDI",
    "keywords": "Class BaseTextEvent Represents a text meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CopyrightNoticeEvent CuePointEvent DeviceNameEvent InstrumentNameEvent LyricEvent MarkerEvent ProgramNameEvent SequenceTrackNameEvent TextEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class BaseTextEvent : MetaEvent Remarks There are several meta events that have text content and the same structure. All these events are derived from BaseTextEvent . Constructors BaseTextEvent(MidiEventType) Initializes a new instance of the BaseTextEvent . Declaration public BaseTextEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType BaseTextEvent(MidiEventType, String) Initializes a new instance of the BaseTextEvent with the specified text. Declaration public BaseTextEvent(MidiEventType eventType, string text) Parameters Type Name Description MidiEventType eventType The type of event. String text Text contained in the event. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Properties Text Gets or sets text contained in the event. Declaration public string Text { get; set; } Property Value Type Description String Methods GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected sealed override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected sealed override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Text event cannot be read since the size is negative number. WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected sealed override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.BufferingPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BufferingPolicy.html",
    "title": "Enum BufferingPolicy | DryWetMIDI",
    "keywords": "Enum BufferingPolicy Specifies how reading engine should buffer incoming MIDI data before reading it. The default is UseFixedSizeBuffer . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum BufferingPolicy Fields Name Description BufferAllData Put entire MIDI data to buffer in memory and read it from here. DontUseBuffering Don't buffer data and read it from stream as is. UseCustomBuffer Use buffer specified by Buffer . UseFixedSizeBuffer Use buffer of fixed size specified by BufferSize ."
  },
  "api/Melanchall.DryWetMidi.Core.BytesFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BytesFormat.html",
    "title": "Enum BytesFormat | DryWetMIDI",
    "keywords": "Enum BytesFormat Defines format of a MIDI data bytes. Depending on this format the specific MIDI data reading/writing rules can be applied. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum BytesFormat Remarks If File format specified, a system exclusive bytes layout is F0 <length> <bytes to be transmitted after F0> , and 0xFF status byte means a meta event. If Device format specified, a system exclusive bytes layout is F0 <bytes to be transmitted after F0> , and 0xFF status byte means Reset system real-time event. Fields Name Description Device Format used in communication with MIDI devices. File Format used by MIDI files."
  },
  "api/Melanchall.DryWetMidi.Core.BytesPacketToken.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BytesPacketToken.html",
    "title": "Class BytesPacketToken | DryWetMIDI",
    "keywords": "Class BytesPacketToken Inheritance Object MidiToken BytesPacketToken Inherited Members MidiToken.TokenType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BytesPacketToken : MidiToken Properties Data Declaration public byte[] Data { get; } Property Value Type Description Byte [] Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.BytesToMidiEventConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.BytesToMidiEventConverter.html",
    "title": "Class BytesToMidiEventConverter | DryWetMIDI",
    "keywords": "Class BytesToMidiEventConverter Provides methods to convert bytes to an instance of the MidiEvent . Inheritance Object BytesToMidiEventConverter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BytesToMidiEventConverter : IDisposable Constructors BytesToMidiEventConverter() Initializes a new instance of the BytesToMidiEventConverter . Declaration public BytesToMidiEventConverter() BytesToMidiEventConverter(Int32) Initializes a new instance of the BytesToMidiEventConverter with the specified initial capacity of internal buffer. Declaration public BytesToMidiEventConverter(int capacity) Parameters Type Name Description Int32 capacity Initial capacity of the internal buffer. Exceptions Type Condition ArgumentOutOfRangeException capacity is negative. Properties BytesFormat Gets or sets the format of source bytes layout. The default is File . Declaration public BytesFormat BytesFormat { get; set; } Property Value Type Description BytesFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. CustomMetaEventTypes Gets or sets collection of custom meta events types. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection Remarks Types within this collection must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown if some types don't meet these requirements. DecodeTextCallback Gets or sets a callback used to decode a string from the specified bytes during reading a text-based meta event's text. The default is null . Declaration public DecodeTextCallback DecodeTextCallback { get; set; } Property Value Type Description DecodeTextCallback Remarks If callback is not set, TextEncoding will be used. InvalidChannelEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a channel event's parameter value. The default is Abort . Declaration public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy { get; set; } Property Value Type Description InvalidChannelEventParameterValuePolicy Remarks Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according with this policy. If Abort is used, an instance of the InvalidChannelEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidMetaEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a meta event's parameter value. The default is Abort . Declaration public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy { get; set; } Property Value Type Description InvalidMetaEventParameterValuePolicy Remarks For example, 255 is the invalid value for the Scale and will be processed according with this policy. If Abort is used, an instance of the InvalidMetaEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidSystemCommonEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a system common event's parameter value. The default is Abort . Declaration public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy { get; set; } Property Value Type Description InvalidSystemCommonEventParameterValuePolicy Remarks For example, 255 is the invalid value for the Number and will be processed according with this policy. If Abort is used, an instance of the InvalidSystemCommonEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NotEnoughBytesPolicy Gets or sets reaction of the reading engine on lack of bytes in the underlying stream that are needed to read MIDI data (for example, DWORD requires 4 bytes available). The default is Abort . Declaration public NotEnoughBytesPolicy NotEnoughBytesPolicy { get; set; } Property Value Type Description NotEnoughBytesPolicy Remarks If Abort is used, an instance of the NotEnoughBytesException will be thrown if the reader's underlying stream doesn't have enough bytes to read MIDI data. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ReadDeltaTimes Gets or sets a value indicating whether incoming bytes array contains delta-times before each event data (and thus they must be read) or not. The default value is false . Declaration public bool ReadDeltaTimes { get; set; } Property Value Type Description Boolean SilentNoteOnPolicy Gets or sets reaction of the reading engine on Note On events with velocity of zero. The default is NoteOff . Declaration public SilentNoteOnPolicy SilentNoteOnPolicy { get; set; } Property Value Type Description SilentNoteOnPolicy Remarks Although it is recommended to treat silent Note On event as Note Off you can turn this behavior off to get original event. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TextEncoding Gets or sets an Encoding that will be used to read the text of a text-based meta events. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding Remarks Value of this property will be used only if DecodeTextCallback is not set. UnknownChannelEventCallback Gets or sets a callback used to read unknown channel event if UnknownChannelEventPolicy set to UseCallback . Declaration public UnknownChannelEventCallback UnknownChannelEventCallback { get; set; } Property Value Type Description UnknownChannelEventCallback UnknownChannelEventPolicy Gets or sets reaction of the reading engine on unknown channel event. The default is Abort . Declaration public UnknownChannelEventPolicy UnknownChannelEventPolicy { get; set; } Property Value Type Description UnknownChannelEventPolicy Remarks If Abort is used, an instance of the UnknownChannelEventException will be thrown if channel event has unknown status byte. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ZeroLengthDataPolicy Gets or sets reaction of the reading engine on zero-length objects such as strings or arrays. The default is ReadAsEmptyObject . Declaration public ZeroLengthDataPolicy ZeroLengthDataPolicy { get; set; } Property Value Type Description ZeroLengthDataPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Methods Convert(Byte, Byte[]) Converts the specified status byte and data bytes to an instance of the MidiEvent . Declaration public MidiEvent Convert(byte statusByte, byte[] dataBytes) Parameters Type Name Description Byte statusByte The status byte of MIDI event. Byte [] dataBytes Data bytes of MIDI event (bytes except status byte). Can be null if MIDI event has no data bytes. Returns Type Description MidiEvent MidiEvent read from statusByte and dataBytes . Convert(Byte[]) Converts the specified bytes to an instance of the MidiEvent . First byte is the status byte of MIDI event. If bytes array contains multiple events, only first one will be read. Declaration public MidiEvent Convert(byte[] bytes) Parameters Type Name Description Byte [] bytes Bytes representing a MIDI event. Returns Type Description MidiEvent MidiEvent read from bytes . Remarks Use ConvertMultiple(Byte[]) or ConvertMultiple(Byte[], Int32, Int32) to read multiple events. Exceptions Type Condition ArgumentNullException bytes is null . ArgumentException bytes is an empty array. Convert(Byte[], Int32, Int32) Converts sub-array of the specified bytes to an instance of the MidiEvent . First byte at the specified offset is the status byte of MIDI event. If sub-array contains multiple events, only first one will be read. Declaration public MidiEvent Convert(byte[] bytes, int offset, int length) Parameters Type Name Description Byte [] bytes Bytes to take sub-array from. Int32 offset Offset of sub-array to read MIDI event from. Int32 length Length of sub-array to read MIDI event from. Returns Type Description MidiEvent MidiEvent read from bytes starting from offset and taking length of bytes. Remarks Use ConvertMultiple(Byte[]) or ConvertMultiple(Byte[], Int32, Int32) to read multiple events. Exceptions Type Condition ArgumentNullException bytes is null . ArgumentException bytes is an empty array. ArgumentOutOfRangeException One of the following errors occured: offset is out of range. length is out of range. ConvertMultiple(Byte[]) Converts the specified bytes to a collection of MidiEvent . Declaration public ICollection<MidiEvent> ConvertMultiple(byte[] bytes) Parameters Type Name Description Byte [] bytes Bytes to convert to collection of MidiEvent . Returns Type Description ICollection < MidiEvent > Collection of MidiEvent read from bytes . Exceptions Type Condition ArgumentNullException bytes is null . ArgumentException bytes is an empty array. InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid (is out of [0; 127] range) and that should be treated as error according to the InvalidChannelEventParameterValuePolicy . InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid and that should be treated as error according to the InvalidMetaEventParameterValuePolicy . NotEnoughBytesException MIDI events data cannot be read since the sub-array bytes doesn't have enough bytes and that should be treated as error according to the NotEnoughBytesPolicy . UnexpectedRunningStatusException Unexpected running status is encountered. ConvertMultiple(Byte[], Int32, Int32) Converts sub-array of the specified bytes to a collection of MidiEvent . Declaration public ICollection<MidiEvent> ConvertMultiple(byte[] bytes, int offset, int length) Parameters Type Name Description Byte [] bytes Bytes to take sub-array from. Int32 offset Offset of sub-array to read MIDI events from. Int32 length Length of sub-array to read MIDI events from. Returns Type Description ICollection < MidiEvent > Collection of MidiEvent read from bytes starting from offset and taking length of bytes. Exceptions Type Condition ArgumentNullException bytes is null . ArgumentException bytes is an empty array. ArgumentOutOfRangeException One of the following errors occured: offset is out of range. length is out of range. InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid (is out of [0; 127] range) and that should be treated as error according to the InvalidChannelEventParameterValuePolicy . InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid and that should be treated as error according to the InvalidMetaEventParameterValuePolicy . NotEnoughBytesException MIDI events data cannot be read since the sub-array bytes doesn't have enough bytes and that should be treated as error according to the NotEnoughBytesPolicy . UnexpectedRunningStatusException Unexpected running status is encountered. Dispose() Releases all resources used by the current instance of the BytesToMidiEventConverter class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.ChannelAftertouchEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelAftertouchEvent.html",
    "title": "Class ChannelAftertouchEvent | DryWetMIDI",
    "keywords": "Class ChannelAftertouchEvent Represents a Channel Pressure (Aftertouch) message. Inheritance Object MidiEvent ChannelEvent ChannelAftertouchEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelAftertouchEvent : ChannelEvent Remarks This message is most often sent by pressing down on the key after it \"bottoms out\". This message is different from polyphonic after-touch. Use this message to send the single greatest pressure value (of all the current depressed keys). Constructors ChannelAftertouchEvent() Initializes a new instance of the ChannelAftertouchEvent . Declaration public ChannelAftertouchEvent() ChannelAftertouchEvent(SevenBitNumber) Initializes a new instance of the ChannelAftertouchEvent with the specified aftertouch (pressure) value. Declaration public ChannelAftertouchEvent(SevenBitNumber aftertouchValue) Parameters Type Name Description SevenBitNumber aftertouchValue Aftertouch (pressure) value. Properties AftertouchValue Gets or sets aftertouch (pressure) value. Declaration public SevenBitNumber AftertouchValue { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ChannelEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelEvent.html",
    "title": "Class ChannelEvent | DryWetMIDI",
    "keywords": "Class ChannelEvent Represents a MIDI file channel event. Inheritance Object MidiEvent ChannelEvent ChannelAftertouchEvent ControlChangeEvent NoteAftertouchEvent NoteEvent PitchBendEvent ProgramChangeEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class ChannelEvent : MidiEvent Constructors ChannelEvent(MidiEventType) Initializes a new instance of the ChannelEvent with the specified parameters count. Declaration protected ChannelEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Properties Channel Gets or sets channel for this event. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Methods ReadDataByte(MidiReader, ReadingSettings) Reads channel event's data byte using the specified reader and settings. Declaration protected byte ReadDataByte(MidiReader reader, ReadingSettings settings) Parameters Type Name Description MidiReader reader Reader to read data byte with. ReadingSettings settings Settings according to which a data byte should be read and processed. Returns Type Description Byte A data byte read with reader ."
  },
  "api/Melanchall.DryWetMidi.Core.ChannelPrefixEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChannelPrefixEvent.html",
    "title": "Class ChannelPrefixEvent | DryWetMIDI",
    "keywords": "Class ChannelPrefixEvent Represents a MIDI Channel Prefix meta event. Inheritance Object MidiEvent MetaEvent ChannelPrefixEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelPrefixEvent : MetaEvent Remarks The MIDI channel prefix meta message specifies a MIDI channel so that meta messages that follow are specific to a channel. Constructors ChannelPrefixEvent() Initializes a new instance of the ChannelPrefixEvent . Declaration public ChannelPrefixEvent() ChannelPrefixEvent(Byte) Initializes a new instance of the ChannelPrefixEvent with the specified MIDI channel. Declaration public ChannelPrefixEvent(byte channel) Parameters Type Name Description Byte channel MIDI channel. Properties Channel Gets or sets MIDI channel. Declaration public byte Channel { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.ChunkHeaderToken.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunkHeaderToken.html",
    "title": "Class ChunkHeaderToken | DryWetMIDI",
    "keywords": "Class ChunkHeaderToken Inheritance Object MidiToken ChunkHeaderToken Inherited Members MidiToken.TokenType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunkHeaderToken : MidiToken Properties ChunkContentSize Declaration public uint ChunkContentSize { get; } Property Value Type Description UInt32 ChunkId Declaration public string ChunkId { get; } Property Value Type Description String Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ChunksCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunksCollection.html",
    "title": "Class ChunksCollection | DryWetMIDI",
    "keywords": "Class ChunksCollection Collection of MidiChunk objects. Inheritance Object ChunksCollection Implements ICollection < MidiChunk > IEnumerable < MidiChunk > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunksCollection : ICollection<MidiChunk>, IEnumerable<MidiChunk>, IEnumerable Properties Count Gets the number of chunks contained in the collection. Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Gets a value indicating whether the ChunksCollection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Gets or sets the chunk at the specified index. Declaration public MidiChunk this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the chunk to get or set. Property Value Type Description MidiChunk The chunk at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . ArgumentNullException value is null . Methods Add(MidiChunk) Adds a chunk to the end of the collection. Declaration public void Add(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to be added to the end of the collection. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunk is null . AddRange(IEnumerable<MidiChunk>) Adds chunks the end of the collection. Declaration public void AddRange(IEnumerable<MidiChunk> chunks) Parameters Type Name Description IEnumerable < MidiChunk > chunks Chunks to add to the collection. Remarks Note that header chunks cannot be added into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null . Clear() Removes all chunks from the ChunksCollection . Declaration public void Clear() Contains(MidiChunk) Determines whether the ChunksCollection contains a specific chunk. Declaration public bool Contains(MidiChunk item) Parameters Type Name Description MidiChunk item The chunk to locate in the ChunksCollection . Returns Type Description Boolean true if chunk is found in the ChunksCollection ; otherwise, false . CopyTo(MidiChunk[], Int32) Copies the elements of the ChunksCollection to an Array , starting at a particular index. Declaration public void CopyTo(MidiChunk[] array, int arrayIndex) Parameters Type Name Description MidiChunk [] array The one-dimensional Array that is the destination of the elements copied from ChunksCollection . The array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null . ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ChunksCollection is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the ChunksCollection . Declaration public IEnumerator<MidiChunk> GetEnumerator() Returns Type Description IEnumerator < MidiChunk > An enumerator for the ChunksCollection . IndexOf(MidiChunk) Searches for the specified chunk and returns the zero-based index of the first occurrence within the entire ChunksCollection . Declaration public int IndexOf(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to locate in the ChunksCollection . Returns Type Description Int32 The zero-based index of the first occurrence of chunk within the entire ChunksCollection , if found; otherwise, –1. Exceptions Type Condition ArgumentNullException chunk is null . Insert(Int32, MidiChunk) Inserts a chunk into the collection at the specified index. Declaration public void Insert(int index, MidiChunk chunk) Parameters Type Name Description Int32 index The zero-based index at which the chunk should be inserted. MidiChunk chunk The chunk to insert. Remarks Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunk is null . ArgumentOutOfRangeException One of the following errors occured: index is less than 0. index is greater than Count . InsertRange(Int32, IEnumerable<MidiChunk>) Inserts a set of chunks into the collection at the specified index. Declaration public void InsertRange(int index, IEnumerable<MidiChunk> chunks) Parameters Type Name Description Int32 index The zero-based index at which the chunk should be inserted. IEnumerable < MidiChunk > chunks The chunk to insert. Remarks Note that header chunks cannot be inserted into the collection since it may cause inconsistence in the file structure. Header chunk with appropriate information will be written to a file automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException chunks is null . ArgumentOutOfRangeException One of the following errors occured: index is less than 0. index is greater than Count . Remove(MidiChunk) Removes the first occurrence of a specific chunk from the collection. Declaration public bool Remove(MidiChunk chunk) Parameters Type Name Description MidiChunk chunk The chunk to remove from the collection. The value cannot be null . Returns Type Description Boolean true if chunk is successfully removed; otherwise, false . This method also returns false if chunk was not found in the collection. Exceptions Type Condition ArgumentNullException chunk is null . RemoveAll(Predicate<MidiChunk>) Removes all the chunks that match the conditions defined by the specified predicate. Declaration public int RemoveAll(Predicate<MidiChunk> match) Parameters Type Name Description Predicate < MidiChunk > match The Predicate<T> delegate that defines the conditions of the chunks to remove. Returns Type Description Int32 The number of chunks removed from the ChunksCollection . Exceptions Type Condition ArgumentNullException match is null . RemoveAt(Int32) Removes the chunk at the specified index of the collection. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the chunk to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the ChunksCollection . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator for the ChunksCollection . Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Core.ChunkType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunkType.html",
    "title": "Class ChunkType | DryWetMIDI",
    "keywords": "Class ChunkType Represents a chunk's identity described by its type and corresponding ID. Inheritance Object ChunkType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunkType Constructors ChunkType(Type, String) Initializes a new instance of the ChunkType with the specified type and ID. Declaration public ChunkType(Type type, string id) Parameters Type Name Description Type type Type of a chunk. String id 4-character ID of a chunk. Properties Id Gets the ID of chunks described by this instance of the ChunkType . Declaration public string Id { get; } Property Value Type Description String Type Gets the type of chunks described by this instance of the ChunkType . Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Melanchall.DryWetMidi.Core.ChunkTypesCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ChunkTypesCollection.html",
    "title": "Class ChunkTypesCollection | DryWetMIDI",
    "keywords": "Class ChunkTypesCollection Collection of ChunkType objects which provide identity information of a chunk. Inheritance Object ChunkTypesCollection Implements IEnumerable < ChunkType > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChunkTypesCollection : IEnumerable<ChunkType>, IEnumerable Methods Add(Type, String) Adds chunk type along with the corresponding ID. Declaration public void Add(Type type, string id) Parameters Type Name Description Type type Type of chunk. String id ID of chunk. Exceptions Type Condition ArgumentNullException One of the following errors occured: type is null . id is null . ArgumentException Chunk type specified by type and id already exists in the ChunksCollection . GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator<ChunkType> GetEnumerator() Returns Type Description IEnumerator < ChunkType > An enumerator that can be used to iterate through the collection. TryGetId(Type, out String) Gets the ID associated with the specified chunk type. Declaration public bool TryGetId(Type type, out string id) Parameters Type Name Description Type type Chunk type to get ID for. String id When this method returns, contains the ID associated with the specified chunk type, if the type is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the ChunkTypesCollection contains an ID for the specified chunk type; otherwise, false . TryGetType(String, out Type) Gets the chunk type associated with the specified ID. Declaration public bool TryGetType(string id, out Type type) Parameters Type Name Description String id ID of the chunk type to get. Type type When this method returns, contains the chunk type associated with the specified ID, if ID is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the ChunkTypesCollection contains a chunk type with the specified ID; otherwise, false . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Core.ContinueEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ContinueEvent.html",
    "title": "Class ContinueEvent | DryWetMIDI",
    "keywords": "Class ContinueEvent Represents Continue event. Inheritance Object MidiEvent SystemRealTimeEvent ContinueEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ContinueEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI continue message tells a MIDI slave device to resume playback. Constructors ContinueEvent() Initializes a new instance of the ContinueEvent . Declaration public ContinueEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ControlChangeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ControlChangeEvent.html",
    "title": "Class ControlChangeEvent | DryWetMIDI",
    "keywords": "Class ControlChangeEvent Represents a Control Change message. Inheritance Object MidiEvent ChannelEvent ControlChangeEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ControlChangeEvent : ChannelEvent Remarks This message is sent when a controller value changes. Controllers include devices such as pedals and levers. Constructors ControlChangeEvent() Initializes a new instance of the ControlChangeEvent . Declaration public ControlChangeEvent() ControlChangeEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the ControlChangeEvent with the specified controller number and controller value. Declaration public ControlChangeEvent(SevenBitNumber controlNumber, SevenBitNumber controlValue) Parameters Type Name Description SevenBitNumber controlNumber Controller number. SevenBitNumber controlValue Controller value. Properties ControlNumber Gets or sets controller number. Declaration public SevenBitNumber ControlNumber { get; set; } Property Value Type Description SevenBitNumber ControlValue Gets or sets controller value. Declaration public SevenBitNumber ControlValue { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods ControlUtilities.GetControlName(ControlChangeEvent)"
  },
  "api/Melanchall.DryWetMidi.Core.ControlUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ControlUtilities.html",
    "title": "Class ControlUtilities | DryWetMIDI",
    "keywords": "Class ControlUtilities Set of extension methods for ControlChangeEvent event. Inheritance Object ControlUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class ControlUtilities Methods AsSevenBitNumber(ControlName) Converts ControlName to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this ControlName controlName) Parameters Type Name Description ControlName controlName ControlName to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the controlName . Exceptions Type Condition InvalidEnumArgumentException controlName specified an invalid value. GetControlChangeEvent(ControlName, SevenBitNumber, FourBitNumber) Gets an instance of the ControlChangeEvent corresponding to the specified controller. Declaration public static ControlChangeEvent GetControlChangeEvent(this ControlName controlName, SevenBitNumber controlValue, FourBitNumber channel) Parameters Type Name Description ControlName controlName ControlName to get an event for. SevenBitNumber controlValue Controller value to set to event. FourBitNumber channel Channel an event should be created for. Returns Type Description ControlChangeEvent An instance of the ControlChangeEvent corresponding to the controlName . Exceptions Type Condition InvalidEnumArgumentException controlName specified an invalid value. GetControlName(ControlChangeEvent) Gets name of the controller presented by an instance of ControlChangeEvent . Declaration public static ControlName GetControlName(this ControlChangeEvent controlChangeEvent) Parameters Type Name Description ControlChangeEvent controlChangeEvent Control Change event to get controller name of. Returns Type Description ControlName Controller name of the controlChangeEvent event. Exceptions Type Condition ArgumentNullException controlChangeEvent is null ."
  },
  "api/Melanchall.DryWetMidi.Core.CopyrightNoticeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.CopyrightNoticeEvent.html",
    "title": "Class CopyrightNoticeEvent | DryWetMIDI",
    "keywords": "Class CopyrightNoticeEvent Represents a Copyright Notice meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CopyrightNoticeEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CopyrightNoticeEvent : BaseTextEvent Remarks The MIDI copyright notice meta message places a copyright notice in a MIDI file. Constructors CopyrightNoticeEvent() Initializes a new instance of the CopyrightNoticeEvent . Declaration public CopyrightNoticeEvent() CopyrightNoticeEvent(String) Initializes a new instance of the CopyrightNoticeEvent with the specified text of copyright notice. Declaration public CopyrightNoticeEvent(string text) Parameters Type Name Description String text Text of copyright notice. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.CuePointEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.CuePointEvent.html",
    "title": "Class CuePointEvent | DryWetMIDI",
    "keywords": "Class CuePointEvent Represents a Cue Point meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent CuePointEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CuePointEvent : BaseTextEvent Remarks The MIDI cue point meta message denotes a cue in a MIDI file, usually to signify the beginning of an action. It can describe something that happens within a film, video or stage production at that point in the musical score. E.g. 'Car crashes', 'Door opens', etc. Constructors CuePointEvent() Initializes a new instance of the CuePointEvent . Declaration public CuePointEvent() CuePointEvent(String) Initializes a new instance of the CuePointEvent with the specified text of cue. Declaration public CuePointEvent(string text) Parameters Type Name Description String text Text of the cue. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.DecodeTextCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Core.DecodeTextCallback.html",
    "title": "Delegate DecodeTextCallback | DryWetMIDI",
    "keywords": "Delegate DecodeTextCallback Callback used to decode a string from the specified bytes during reading a text-based meta event's text. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public delegate string DecodeTextCallback(byte[] bytes, ReadingSettings settings); Parameters Type Name Description Byte [] bytes Bytes to decode a string from. ReadingSettings settings Settings used to read MIDI data. Returns Type Description String A string decoded from given bytes. Remarks All meta events types derived from BaseTextEvent have Text property. Value of this property will be read using this callback if DecodeTextCallback is set."
  },
  "api/Melanchall.DryWetMidi.Core.DeviceNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.DeviceNameEvent.html",
    "title": "Class DeviceNameEvent | DryWetMIDI",
    "keywords": "Class DeviceNameEvent Represents a Device Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent DeviceNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DeviceNameEvent : BaseTextEvent Remarks This optional event is used to identify the hardware device used to produce sounds for this track. Constructors DeviceNameEvent() Initializes a new instance of the DeviceNameEvent . Declaration public DeviceNameEvent() DeviceNameEvent(String) Initializes a new instance of the DeviceNameEvent with the specified device name. Declaration public DeviceNameEvent(string deviceName) Parameters Type Name Description String deviceName Name of the device. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.EndOfTrackEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EndOfTrackEvent.html",
    "title": "Class EndOfTrackEvent | DryWetMIDI",
    "keywords": "Class EndOfTrackEvent Represents an End Of Track meta event. Inheritance Object MidiEvent MetaEvent EndOfTrackEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EndOfTrackEvent : MetaEvent Remarks The MIDI end of track meta message denotes the end of a MIDI track. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.EndOfTrackStoringPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EndOfTrackStoringPolicy.html",
    "title": "Enum EndOfTrackStoringPolicy | DryWetMIDI",
    "keywords": "Enum EndOfTrackStoringPolicy Specifies how reading engine should react on End Of Track event encountered. The default is Omit . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum EndOfTrackStoringPolicy Fields Name Description Omit Omit an event and don't store it to the Events . Store Store an event to the Events ."
  },
  "api/Melanchall.DryWetMidi.Core.EscapeSysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EscapeSysExEvent.html",
    "title": "Class EscapeSysExEvent | DryWetMIDI",
    "keywords": "Class EscapeSysExEvent Reprsents an \"escape\" system exclusive event which defines an escape sequence. Inheritance Object MidiEvent SysExEvent EscapeSysExEvent Inherited Members SysExEvent.EndOfEventByte SysExEvent.Completed SysExEvent.Data MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EscapeSysExEvent : SysExEvent Remarks \"Escape\" system exclisive events start with 0xF7 byte and don't have a terminal 0xF7 byte that is required for normal sysex events. When an \"escape\" sysex event is encountered whilst reading a MIDI file, its interpretation (SysEx packet or escape sequence) is determined as follows: - When an event with 0xF0 status but lacking a terminal 0xF7 is encountered, then this is the first of a Casio-style multi-packet message, and a flag (boolean variable) should be set to indicate this. - If an event with 0xF7 status is encountered whilst this flag is set, then this is a continuation event (a system exclusive packet, one of many). If this event has a terminal 0xF7, then it is the last packet and flag should be cleared. - If an event with 0xF7 status is encountered whilst flag is clear, then this event is an escape sequence. Constructors EscapeSysExEvent() Initializes a new instance of the EscapeSysExEvent . Declaration public EscapeSysExEvent() EscapeSysExEvent(Byte[]) Initializes a new instance of the EscapeSysExEvent with the specified data. Declaration public EscapeSysExEvent(byte[] data) Parameters Type Name Description Byte [] data Data of the \"escape\" sysex event. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.EventsCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventsCollection.html",
    "title": "Class EventsCollection | DryWetMIDI",
    "keywords": "Class EventsCollection Collection of MidiEvent objects. Inheritance Object EventsCollection Implements ICollection < MidiEvent > IEnumerable < MidiEvent > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventsCollection : ICollection<MidiEvent>, IEnumerable<MidiEvent>, IEnumerable Properties Count Gets the number of events contained in the collection. Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Gets a value indicating whether the EventsCollection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Gets or sets the event at the specified index. Declaration public MidiEvent this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the event to get or set. Property Value Type Description MidiEvent The event at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . ArgumentNullException value is null . Methods Add(MidiEvent) Adds an event to the end of collection. Declaration public void Add(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to be added to the end of the collection. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException midiEvent is null . AddRange(IEnumerable<MidiEvent>) Adds events to the end of collection. Declaration public void AddRange(IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Events to be added to the end of the collection. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null . Clear() Removes all events from the EventsCollection . Declaration public void Clear() Contains(MidiEvent) Determines whether the EventsCollection contains a specific event. Declaration public bool Contains(MidiEvent item) Parameters Type Name Description MidiEvent item The event to locate in the EventsCollection . Returns Type Description Boolean true if event is found in the EventsCollection ; otherwise, false . CopyTo(MidiEvent[], Int32) Copies the elements of the EventsCollection to an Array , starting at a particular index. Declaration public void CopyTo(MidiEvent[] array, int arrayIndex) Parameters Type Name Description MidiEvent [] array The one-dimensional Array that is the destination of the elements copied from EventsCollection . The array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null . ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source EventsCollection is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the EventsCollection . Declaration public IEnumerator<MidiEvent> GetEnumerator() Returns Type Description IEnumerator < MidiEvent > An enumerator for the EventsCollection . IndexOf(MidiEvent) Searches for the specified event and returns the zero-based index of the first occurrence within the entire EventsCollection . Declaration public int IndexOf(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to locate in the EventsCollection . Returns Type Description Int32 The zero-based index of the first occurrence of event within the entire EventsCollection , if found; otherwise, –1. Exceptions Type Condition ArgumentNullException midiEvent is null . Insert(Int32, MidiEvent) Inserts an event into the collection at the specified index. Declaration public void Insert(int index, MidiEvent midiEvent) Parameters Type Name Description Int32 index The zero-based index at which the event should be inserted. MidiEvent midiEvent The event to insert. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on a MIDI file writing. Exceptions Type Condition ArgumentNullException midiEvent is null . ArgumentOutOfRangeException One of the following errors occured: index is less than 0. index is greater than Count . InsertRange(Int32, IEnumerable<MidiEvent>) Inserts a set of events into the collection at the specified index. Declaration public void InsertRange(int index, IEnumerable<MidiEvent> midiEvents) Parameters Type Name Description Int32 index The zero-based index at which the events should be inserted. IEnumerable < MidiEvent > midiEvents The events to insert. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on a MIDI file writing. Exceptions Type Condition ArgumentNullException midiEvents is null . ArgumentOutOfRangeException One of the following errors occured: index is less than 0. index is greater than Count . Remove(MidiEvent) Removes the first occurrence of a specific event from the collection. Declaration public bool Remove(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent The event to remove from the collection. The value cannot be null . Returns Type Description Boolean true if event is successfully removed; otherwise, false . This method also returns false if event was not found in the collection. Exceptions Type Condition ArgumentNullException midiEvent is null . RemoveAll(Predicate<MidiEvent>) Removes all the events that match the conditions defined by the specified predicate. Declaration public int RemoveAll(Predicate<MidiEvent> match) Parameters Type Name Description Predicate < MidiEvent > match The Predicate<T> delegate that defines the conditions of the events to remove. Returns Type Description Int32 The number of events removed from the EventsCollection . Exceptions Type Condition ArgumentNullException match is null . RemoveAt(Int32) Removes the event at the specified index of the collection. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the event to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0; or index is equal to or greater than Count . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the EventsCollection . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator for the EventsCollection . Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ChordsManagingUtilities.ManageChords(EventsCollection, ChordDetectionSettings, TimedObjectsComparer) ChordsManagingUtilities.GetChords(IEnumerable<MidiEvent>, ChordDetectionSettings) ChordsManagingUtilities.GetChords(EventsCollection, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(EventsCollection, Action<Chord>, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(EventsCollection, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(EventsCollection, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(EventsCollection, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities.GetObjects(IEnumerable<MidiEvent>, ObjectType, ObjectDetectionSettings) GetObjectsUtilities.GetObjects(EventsCollection, ObjectType, ObjectDetectionSettings) NotesManagingUtilities.ManageNotes(EventsCollection, NoteDetectionSettings, TimedObjectsComparer) NotesManagingUtilities.GetNotes(IEnumerable<MidiEvent>, NoteDetectionSettings) NotesManagingUtilities.GetNotes(EventsCollection, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(EventsCollection, Action<Note>, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(EventsCollection, Action<Note>, Predicate<Note>, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(EventsCollection, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(EventsCollection, Predicate<Note>, NoteDetectionSettings) TimedEventsManagingUtilities.ManageTimedEvents(EventsCollection, TimedEventDetectionSettings, TimedObjectsComparer) TimedEventsManagingUtilities.GetTimedEvents(EventsCollection, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(EventsCollection, Action<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(EventsCollection, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.RemoveTimedEvents(EventsCollection) TimedEventsManagingUtilities.RemoveTimedEvents(EventsCollection, Predicate<TimedEvent>, TimedEventDetectionSettings) TimedObjectUtilities.AddObjects(EventsCollection, IEnumerable<ITimedObject>) PlaybackUtilities.GetPlayback(IEnumerable<MidiEvent>, TempoMap, IOutputDevice, PlaybackSettings) PlaybackUtilities.GetPlayback(IEnumerable<MidiEvent>, TempoMap, PlaybackSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.EventType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventType.html",
    "title": "Class EventType | DryWetMIDI",
    "keywords": "Class EventType Represents an event's identity described by its type and corresponding status byte. Inheritance Object EventType Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventType Constructors EventType(Type, Byte) Initializes a new instance of the EventType with the specified type and status byte. Declaration public EventType(Type type, byte statusByte) Parameters Type Name Description Type type Type of an event. Byte statusByte Status byte of an event. Properties StatusByte Gets the status byte of events described by this instance of the EventType . Declaration public byte StatusByte { get; } Property Value Type Description Byte Type Gets the type of events described by this instance of the EventType . Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Melanchall.DryWetMidi.Core.EventTypesCollection.html": {
    "href": "api/Melanchall.DryWetMidi.Core.EventTypesCollection.html",
    "title": "Class EventTypesCollection | DryWetMIDI",
    "keywords": "Class EventTypesCollection Collection of EventType objects which provide identity information of an event. Inheritance Object EventTypesCollection Implements IEnumerable < EventType > IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class EventTypesCollection : IEnumerable<EventType>, IEnumerable Methods Add(Type, Byte) Adds event type along with the corresponding status byte. Declaration public void Add(Type type, byte statusByte) Parameters Type Name Description Type type Type of event. Byte statusByte Status byte of event. Exceptions Type Condition ArgumentNullException type is null . ArgumentException Event type specified by type and statusByte already exists in the EventsCollection . GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator<EventType> GetEnumerator() Returns Type Description IEnumerator < EventType > An enumerator that can be used to iterate through the collection. TryGetStatusByte(Type, out Byte) Gets the status byte associated with the specified event type. Declaration public bool TryGetStatusByte(Type type, out byte statusByte) Parameters Type Name Description Type type Event type to get status byte for. Byte statusByte When this method returns, contains the status byte associated with the specified event type, if the type is found; otherwise, 0. This parameter is passed uninitialized. Returns Type Description Boolean true if the EventTypesCollection contains a status byte for the specified event type; otherwise, false . TryGetType(Byte, out Type) Gets the event type associated with the specified status byte. Declaration public bool TryGetType(byte statusByte, out Type type) Parameters Type Name Description Byte statusByte The status byte of the event type to get. Type type When this method returns, contains the event type associated with the specified status byte, if the status byte is found; otherwise, null . This parameter is passed uninitialized. Returns Type Description Boolean true if the EventTypesCollection contains an event type with the specified status byte; otherwise, false . Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ExtraTrackChunkPolicy.html",
    "title": "Enum ExtraTrackChunkPolicy | DryWetMIDI",
    "keywords": "Enum ExtraTrackChunkPolicy Specifies how reading engine should react on new track chunk if already read chunks count greater or equals the one declared at the file header. The default is Read . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum ExtraTrackChunkPolicy : byte Fields Name Description Read Read a track chunk anyway. Skip Skip chunk and go to the next one."
  },
  "api/Melanchall.DryWetMidi.Core.FileHeaderToken.html": {
    "href": "api/Melanchall.DryWetMidi.Core.FileHeaderToken.html",
    "title": "Class FileHeaderToken | DryWetMIDI",
    "keywords": "Class FileHeaderToken Inheritance Object MidiToken FileHeaderToken Inherited Members MidiToken.TokenType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class FileHeaderToken : MidiToken Properties FileFormat Declaration public ushort FileFormat { get; } Property Value Type Description UInt16 TimeDivision Declaration public TimeDivision TimeDivision { get; } Property Value Type Description TimeDivision TracksNumber Declaration public ushort TracksNumber { get; } Property Value Type Description UInt16 Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.html": {
    "href": "api/Melanchall.DryWetMidi.Core.html",
    "title": "Namespace Melanchall.DryWetMidi.Core | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Core Classes ActiveSensingEvent Represents Active Sensing event. BaseTextEvent Represents a text meta event. BytesPacketToken BytesToMidiEventConverter Provides methods to convert bytes to an instance of the MidiEvent . ChannelAftertouchEvent Represents a Channel Pressure (Aftertouch) message. ChannelEvent Represents a MIDI file channel event. ChannelPrefixEvent Represents a MIDI Channel Prefix meta event. ChunkHeaderToken ChunksCollection Collection of MidiChunk objects. ChunkType Represents a chunk's identity described by its type and corresponding ID. ChunkTypesCollection Collection of ChunkType objects which provide identity information of a chunk. ContinueEvent Represents Continue event. ControlChangeEvent Represents a Control Change message. ControlUtilities Set of extension methods for ControlChangeEvent event. CopyrightNoticeEvent Represents a Copyright Notice meta event. CuePointEvent Represents a Cue Point meta event. DeviceNameEvent Represents a Device Name meta event. EndOfTrackEvent Represents an End Of Track meta event. EscapeSysExEvent Reprsents an \"escape\" system exclusive event which defines an escape sequence. EventsCollection Collection of MidiEvent objects. EventType Represents an event's identity described by its type and corresponding status byte. EventTypesCollection Collection of EventType objects which provide identity information of an event. FileHeaderToken InstrumentNameEvent Represents an Instrument Name meta event. InvalidChannelEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a channel event. InvalidChunkSizeException The exception that is thrown when the actual size of a MIDI file chunk differs from the one declared in its header. InvalidMetaEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a meta event. InvalidMidiTimeCodeComponentException The exception that is thrown when the reading engine has encountered an invalid MIDI time code component (i.e. a value that doesn't belong to values of MidiTimeCodeComponent ) during reading MidiTimeCodeEvent . InvalidSystemCommonEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a system common event. KeySignatureEvent Represents a Key Signature meta event. LyricEvent Represents a Lyric meta event. MarkerEvent Represents a Marker meta event. MetaEvent Represents a MIDI file meta event. MidiChunk Represents a chunk of Standard MIDI file. MidiChunkEqualityCheckSettings Holds settings according to which MidiChunk objects should be compared for equality. MidiEvent Represents a MIDI file event stored in a track chunk. MidiEventEqualityCheckSettings Holds settings according to which MidiEvent objects should be compared for equality. MidiEventToBytesConverter Provides methods to convert an instance of the MidiEvent to bytes. MidiEventToken MidiFile Represents a MIDI file. MidiFileEqualityCheckSettings Holds settings according to which MidiFile objects should be compared for equality. MidiFileUtilities Provides useful methods to manipulate an instance of the MidiFile . MidiReader Reader of the MIDI data types. MidiTimeCodeEvent Represents MIDI Time Code (MIDI Quarter Frame) event. MidiToken MidiTokensReader MidiTokensReaderUtilities MidiWriter Writer of the MIDI data types. MissedEndOfTrackEventException The exception that is thrown when a MIDI file chunk doesn't end with an End of Track event. NoHeaderChunkException The exception that is thrown when a MIDI file doesn't contain a header chunk. NormalSysExEvent Represents a normal system exclusive event. NoteAftertouchEvent Represents a Polyphonic Key Pressure (Aftertouch) message. NoteEvent Base class that represents a Note On or a Note Off message. NoteEventUtilities Set of extension methods for NoteOnEvent and NoteOffEvent events. NotEnoughBytesException The exception that is thrown when a MIDI file doesn't contain enough bytes to read a value. NoteOffEvent Represents a Note Off message. NoteOnEvent Represents a Note On message. PitchBendEvent Represents a Pitch Bend Change message. PortPrefixEvent Represents a MIDI Port meta event. ProgramChangeEvent Represents a Program Change message. ProgramNameEvent Represents a Program Name meta event. ReaderSettings Settings according to which MidiReader should read MIDI data. ReadingSettings Settings according to which MIDI data should be read. ResetEvent Represents Reset event. SequenceNumberEvent Represents a Sequence Number meta event. SequencerSpecificEvent Represents a Sequencer Specific meta event. SequenceTrackNameEvent Represents a Sequence/Track Name meta event. SetTempoEvent Represents a Set Tempo meta event. SmfConstants Constants related to Standard MIDI Files. SmpteOffsetEvent Represents a SMPTE Offset meta event. SmpteTimeDivision Time division that represents subdivisions of a second, in a way consistent with SMPTE and MIDI time code. SongPositionPointerEvent Represents Song Position Pointer event. SongSelectEvent Represents Song Select event. StartEvent Represents Start event. StopEvent Represents Stop event. SysExEvent Represents a MIDI file system exclusive event. SystemCommonEvent Represents a system common event. SystemRealTimeEvent Represents a system real-time event. TextEvent Represents a Text meta event. TicksPerQuarterNoteTimeDivision Time division that represents number of delta-time \"ticks\" which make up a quarter-note. TimeDivision MIDI file time division. TimeSignatureEvent Represents a Time Signature meta event. TimingClockEvent Represents Timing Clock event. TooManyTrackChunksException The exception that is thrown while writing a MIDI file when the Chunks contains more than MaxValue track chunks which is the maximum allowed count for chunks of this type. TrackChunk Represents a track chunk of a standard MIDI file. TrackChunkUtilities Provides extension methods for TrackChunk . TuneRequestEvent Represents Tune Request event. UnexpectedRunningStatusException The exception that is thrown when the reading engine encountered unexpected running status. UnexpectedTrackChunksCountException The exception that is thrown when count of track chunks in a MIDI file differs from the one declared in the header chunk of this file. UnknownChannelEventAction An action that should be done in case of unknown channel event. UnknownChannelEventException The exception that is thrown when the reading engine encountered unknown channel event. UnknownChunk Represents an unknown chunk. UnknownChunkException The exception that is thrown when the reading engine encountered a chunk with unknown ID. UnknownFileFormatException The exception that is thrown when a MIDI file format is unknown. UnknownMetaEvent Represents an unknown meta event. WriterSettings Settings according to which MidiWriter should write MIDI data. WritingSettings Settings according to which MIDI data should be written. Enums BufferingPolicy Specifies how reading engine should buffer incoming MIDI data before reading it. The default is UseFixedSizeBuffer . BytesFormat Defines format of a MIDI data bytes. Depending on this format the specific MIDI data reading/writing rules can be applied. EndOfTrackStoringPolicy Specifies how reading engine should react on End Of Track event encountered. The default is Omit . ExtraTrackChunkPolicy Specifies how reading engine should react on new track chunk if already read chunks count greater or equals the one declared at the file header. The default is Read . InvalidChannelEventParameterValuePolicy Specifies how reading engine should react on invalid value of a channel event's parameter value. Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according to this policy. The default is Abort . InvalidChunkSizePolicy Specifies how reading engine should react on difference between actual chunk's size and the one declared in its header. The default is Abort . InvalidMetaEventParameterValuePolicy Specifies how reading engine should react on invalid value of a meta event's parameter value. For example, 255 is the invalid value for the Scale and will be processed according with this policy. The default is Abort . InvalidSystemCommonEventParameterValuePolicy Specifies how reading engine should react on invalid value of a system common event's parameter value. For example, 255 is the invalid value for the Number and will be processed according with this policy. The default is Abort . MidiEventType The type of a MIDI event. MidiFileFormat Format of a Standard MIDI file which specifies overall structure of the file. MidiTimeCodeComponent MIDI time code component. MidiTimeCodeType MIDI time code type (frames per second). MidiTokenType MissedEndOfTrackPolicy Specifies how reading engine should react on missed End Of Track event. The default is Ignore . NoHeaderChunkPolicy Specifies how reading engine should react on missing of the header chunk in the MIDI file. The default is Abort . NotEnoughBytesPolicy Specifies how reading engine should react on lack of bytes in the underlying stream that are needed to read MIDI data (for example, DWORD requires 4 bytes available). The default is Abort . SilentNoteOnPolicy Specifies how reading engine should react on Note On events with velocity of zero. The default is NoteOff . UnexpectedTrackChunksCountPolicy Specifies how reading engine should react on unexpected track chunks count. The default is Ignore . UnknownChannelEventInstruction Instruction for reading engine which tells how unknown channel event should be handled. UnknownChannelEventPolicy Specifies how reading engine should react on unknown channel event. The default is Abort . UnknownChunkIdPolicy Specifies how reading engine should react on chunk with unknown ID. The default is ReadAsUnknownChunk . UnknownFileFormatPolicy Specifies how reading engine should react on file format which doesn't belong to the MidiFileFormat . ZeroLengthDataPolicy Specifies how reading engine should read zero-length objects such as strings or arrays. The default is ReadAsEmptyObject . Delegates DecodeTextCallback Callback used to decode a string from the specified bytes during reading a text-based meta event's text. UnknownChannelEventCallback Callback used to read unknown channel event if UnknownChannelEventPolicy set to UseCallback ."
  },
  "api/Melanchall.DryWetMidi.Core.InstrumentNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InstrumentNameEvent.html",
    "title": "Class InstrumentNameEvent | DryWetMIDI",
    "keywords": "Class InstrumentNameEvent Represents an Instrument Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent InstrumentNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InstrumentNameEvent : BaseTextEvent Remarks The MIDI instrument name meta message shows the name of the instrument used in the current track. This optional event is used to provide a textual clue regarding the intended instrumentation for a track (e.g. 'Piano' or 'Flute', etc). If used, it is reccommended to place this event near the start of a track. Constructors InstrumentNameEvent() Initializes a new instance of the InstrumentNameEvent . Declaration public InstrumentNameEvent() InstrumentNameEvent(String) Initializes a new instance of the InstrumentNameEvent with the specified instrument name. Declaration public InstrumentNameEvent(string instrumentName) Parameters Type Name Description String instrumentName Name of the instrument. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValueException.html",
    "title": "Class InvalidChannelEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidChannelEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a channel event. Inheritance Object Exception MidiException InvalidChannelEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidChannelEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidChannelEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties EventType Gets the type of channel event that caused this exception. Declaration public MidiEventType EventType { get; } Property Value Type Description MidiEventType Value Gets the value of the channel event's parameter that caused this exception. Declaration public byte Value { get; } Property Value Type Description Byte Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChannelEventParameterValuePolicy.html",
    "title": "Enum InvalidChannelEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidChannelEventParameterValuePolicy Specifies how reading engine should react on invalid value of a channel event's parameter value. Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according to this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidChannelEventParameterValuePolicy : byte Fields Name Description Abort Abort reading and throw an InvalidChannelEventParameterValueException . ReadValid Read byte and take its lower (rightmost) seven bits as the final value. SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChunkSizeException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChunkSizeException.html",
    "title": "Class InvalidChunkSizeException | DryWetMIDI",
    "keywords": "Class InvalidChunkSizeException The exception that is thrown when the actual size of a MIDI file chunk differs from the one declared in its header. Inheritance Object Exception MidiException InvalidChunkSizeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidChunkSizeException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidChunkSizePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties ActualSize Gets the actual size of a chunk. Declaration public long ActualSize { get; } Property Value Type Description Int64 ChunkId Gets the ID of a chunk caused this exception. Declaration public string ChunkId { get; } Property Value Type Description String ExpectedSize Gets the expected size of a chunk written in its header. Declaration public long ExpectedSize { get; } Property Value Type Description Int64 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidChunkSizePolicy.html",
    "title": "Enum InvalidChunkSizePolicy | DryWetMIDI",
    "keywords": "Enum InvalidChunkSizePolicy Specifies how reading engine should react on difference between actual chunk's size and the one declared in its header. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidChunkSizePolicy : byte Fields Name Description Abort Abort reading and throw an InvalidChunkSizeException . Ignore Ignore difference between actual chunk's size and the declared one."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValueException.html",
    "title": "Class InvalidMetaEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidMetaEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a meta event. Inheritance Object Exception MidiException InvalidMetaEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidMetaEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidMetaEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties EventType Gets the type of event that caused this exception. Declaration public MidiEventType EventType { get; } Property Value Type Description MidiEventType PropertyName Gets the name of event's property which value is invalid. Declaration public string PropertyName { get; } Property Value Type Description String Value Gets the value of the meta event's parameter that caused this exception. Declaration public int Value { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMetaEventParameterValuePolicy.html",
    "title": "Enum InvalidMetaEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidMetaEventParameterValuePolicy Specifies how reading engine should react on invalid value of a meta event's parameter value. For example, 255 is the invalid value for the Scale and will be processed according with this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidMetaEventParameterValuePolicy Fields Name Description Abort Abort reading and throw an InvalidMetaEventParameterValueException . SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidMidiTimeCodeComponentException.html",
    "title": "Class InvalidMidiTimeCodeComponentException | DryWetMIDI",
    "keywords": "Class InvalidMidiTimeCodeComponentException The exception that is thrown when the reading engine has encountered an invalid MIDI time code component (i.e. a value that doesn't belong to values of MidiTimeCodeComponent ) during reading MidiTimeCodeEvent . Inheritance Object Exception MidiException InvalidMidiTimeCodeComponentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidMidiTimeCodeComponentException : MidiException, ISerializable Properties MidiTimeCodeComponent Gets the value representing MIDI time code component that caused this exception. Declaration public byte MidiTimeCodeComponent { get; } Property Value Type Description Byte Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValueException.html",
    "title": "Class InvalidSystemCommonEventParameterValueException | DryWetMIDI",
    "keywords": "Class InvalidSystemCommonEventParameterValueException The exception that is thrown when the reading engine has encountered an invalid parameter of a system common event. Inheritance Object Exception MidiException InvalidSystemCommonEventParameterValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class InvalidSystemCommonEventParameterValueException : MidiException, ISerializable Remarks Note that this exception will be thrown only if InvalidSystemCommonEventParameterValuePolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties ComponentName Gets the name of MIDI Time Code event's component which value is invalid. Declaration public string ComponentName { get; } Property Value Type Description String ComponentValue Gets the value of the system common event's parameter that caused this exception. Declaration public int ComponentValue { get; } Property Value Type Description Int32 EventType Gets the type of an event that caused this exception. Declaration public MidiEventType EventType { get; } Property Value Type Description MidiEventType Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.InvalidSystemCommonEventParameterValuePolicy.html",
    "title": "Enum InvalidSystemCommonEventParameterValuePolicy | DryWetMIDI",
    "keywords": "Enum InvalidSystemCommonEventParameterValuePolicy Specifies how reading engine should react on invalid value of a system common event's parameter value. For example, 255 is the invalid value for the Number and will be processed according with this policy. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum InvalidSystemCommonEventParameterValuePolicy Fields Name Description Abort Abort reading and throw an InvalidSystemCommonEventParameterValueException . SnapToLimits Read value and snap it to limits of the allowable range if it is out of them."
  },
  "api/Melanchall.DryWetMidi.Core.KeySignatureEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.KeySignatureEvent.html",
    "title": "Class KeySignatureEvent | DryWetMIDI",
    "keywords": "Class KeySignatureEvent Represents a Key Signature meta event. Inheritance Object MidiEvent MetaEvent KeySignatureEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class KeySignatureEvent : MetaEvent Remarks The MIDI key signature meta message specifies the key signature and scale of a MIDI file. Constructors KeySignatureEvent() Initializes a new instance of the KeySignatureEvent . Declaration public KeySignatureEvent() KeySignatureEvent(SByte, Byte) Initializes a new instance of the KeySignatureEvent with the specified key and scale. Declaration public KeySignatureEvent(sbyte key, byte scale) Parameters Type Name Description SByte key The number of flats (if negative) or sharps (if positive). Byte scale The scale (0 for major or 1 for minor). Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: key is out of [ MinKey ; MaxKey ] range. scale is out of [ MinScale ; MaxScale ] range. Fields DefaultKey Default key (C). Declaration public const sbyte DefaultKey = 0 Field Value Type Description SByte DefaultScale Default scale (major). Declaration public const byte DefaultScale = 0 Field Value Type Description Byte MaxKey Represents the largest possible key value. Declaration public const sbyte MaxKey = 7 Field Value Type Description SByte MaxScale Represents the largest possible scale value. Declaration public const byte MaxScale = 1 Field Value Type Description Byte MinKey Represents the smallest possible key value. Declaration public const sbyte MinKey = -7 Field Value Type Description SByte MinScale Represents the smallest possible scale value. Declaration public const byte MinScale = 0 Field Value Type Description Byte Properties Key Gets or sets key signature in terms of number of flats (if negative) or sharps (if positive). Declaration public sbyte Key { get; set; } Property Value Type Description SByte Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinKey ; MaxKey ] range. Scale Gets or sets scale (0 for major or 1 for minor). Declaration public byte Scale { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinScale ; MaxScale ] range. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.LyricEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.LyricEvent.html",
    "title": "Class LyricEvent | DryWetMIDI",
    "keywords": "Class LyricEvent Represents a Lyric meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent LyricEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class LyricEvent : BaseTextEvent Remarks The MIDI lyrics meta message shows the lyrics of a song at a particular time in the MIDI sequence. Constructors LyricEvent() Initializes a new instance of the LyricEvent . Declaration public LyricEvent() LyricEvent(String) Initializes a new instance of the LyricEvent with the specified text of lyrics. Declaration public LyricEvent(string text) Parameters Type Name Description String text Text of the lyrics. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MarkerEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MarkerEvent.html",
    "title": "Class MarkerEvent | DryWetMIDI",
    "keywords": "Class MarkerEvent Represents a Marker meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent MarkerEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MarkerEvent : BaseTextEvent Remarks The MIDI marker meta message marks a point in time for a MIDI sequence. Constructors MarkerEvent() Initializes a new instance of the MarkerEvent . Declaration public MarkerEvent() MarkerEvent(String) Initializes a new instance of the MarkerEvent with the specified text of marker. Declaration public MarkerEvent(string text) Parameters Type Name Description String text Text of the marker. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MetaEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MetaEvent.html",
    "title": "Class MetaEvent | DryWetMIDI",
    "keywords": "Class MetaEvent Represents a MIDI file meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent ChannelPrefixEvent EndOfTrackEvent KeySignatureEvent PortPrefixEvent SequenceNumberEvent SequencerSpecificEvent SetTempoEvent SmpteOffsetEvent TimeSignatureEvent UnknownMetaEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MetaEvent : MidiEvent Remarks Meta event specifies non-MIDI information useful to specific applications. As with chunks , future meta events may be designed which may not be known to existing programs, so programs must properly ignore meta events which they do not recognize, and indeed, should expect to see them. Programs must never ignore the length of a meta-event which they do recognize, and they shouldn't be surprised if it's bigger than they expected. If so, they must ignore everything past what they know about. However, they must not add anything of their own to the end of a meta-event. You can create custom meta events that can be read from and written to a MIDI file. See Custom meta events article to learn more. See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Constructors MetaEvent() Initializes a new instance of the MetaEvent . Declaration protected MetaEvent() Methods GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected abstract int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. GetStandardMetaEventStatusBytes() Returns array of status bytes of standard meta events. Declaration public static byte[] GetStandardMetaEventStatusBytes() Returns Type Description Byte [] Array of status bytes of standard meta events. Remarks This method can be used for choosing status byte for custom meta event to prevent the status byte is equal to one of the standard ones. ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected abstract void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected abstract void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written."
  },
  "api/Melanchall.DryWetMidi.Core.MidiChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiChunk.html",
    "title": "Class MidiChunk | DryWetMIDI",
    "keywords": "Class MidiChunk Represents a chunk of Standard MIDI file. Inheritance Object MidiChunk TrackChunk UnknownChunk Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiChunk Remarks MIDI files are made up of chunks. Each chunk has a 4-character type ID and a 32-bit length, which is the number of bytes in the chunk. You manage chunks via Chunks property of the MidiFile . There are two standard types of MIDI chunks: header chunk and track chunk. The first one will not be presented in the Chunks . Its data is used by the reading engine to set properties of the MidiFile such as TimeDivision and OriginalFormat . You cannot add header chunks in the chunks collection of the file since an appropriate one will be written by writing engine automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) or Write(Stream, MidiFileFormat, WritingSettings) . The structure of a MIDI chunk allows any custom chunks be placed in a MIDI file along with the standard ones described above. You can implement custom chunks that can be read from and written to a MIDI file. See Custom chunks article to learn more. If you doesn't specify information about your custom chunk types the reading engine will read them as instances of the UnknownChunk class where Data property will hold chunk's data and ChunkId will hold the ID of a chunk. See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Constructors MidiChunk(String) Initializes a new instance of the MidiChunk with the specified ID. Declaration protected MidiChunk(string id) Parameters Type Name Description String id The type of the chunk. Exceptions Type Condition ArgumentNullException id is null . ArgumentException id is empty, or consists only of white-space characters; or length of id doesn't equal 4. Fields IdLength The length of a chunk's ID. This field is constant. Declaration public const int IdLength = 4 Field Value Type Description Int32 Properties ChunkId Gets 4-character ID of the chunk which specifies its type. Declaration public string ChunkId { get; } Property Value Type Description String Methods Clone() Clones chunk by creating a copy of it. Declaration public abstract MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. Equals(MidiChunk, MidiChunk) Determines whether two specified MidiChunk objects have the same content. Declaration public static bool Equals(MidiChunk chunk1, MidiChunk chunk2) Parameters Type Name Description MidiChunk chunk1 The first chunk to compare, or null . MidiChunk chunk2 The second chunk to compare, or null . Returns Type Description Boolean true if the chunk1 is equal to the chunk2 ; otherwise, false . Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings) Determines whether two specified MidiChunk objects have the same content. Declaration public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings) Parameters Type Name Description MidiChunk chunk1 The first chunk to compare, or null . MidiChunk chunk2 The second chunk to compare, or null . MidiChunkEqualityCheckSettings settings Settings according to which chunks should be compared. Returns Type Description Boolean true if the chunk1 is equal to the chunk2 ; otherwise, false . Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings, out String) Determines whether two specified MidiChunk objects have the same content using the specified comparison settings. Declaration public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, MidiChunkEqualityCheckSettings settings, out string message) Parameters Type Name Description MidiChunk chunk1 The first chunk to compare, or null . MidiChunk chunk2 The second chunk to compare, or null . MidiChunkEqualityCheckSettings settings Settings according to which chunks should be compared. String message Message containing information about what exactly is different in chunk1 and chunk2 . Returns Type Description Boolean true if the chunk1 is equal to the chunk2 ; otherwise, false . Equals(MidiChunk, MidiChunk, out String) Determines whether two specified MidiChunk objects have the same content. Declaration public static bool Equals(MidiChunk chunk1, MidiChunk chunk2, out string message) Parameters Type Name Description MidiChunk chunk1 The first chunk to compare, or null . MidiChunk chunk2 The second chunk to compare, or null . String message Message containing information about what exactly is different in chunk1 and chunk2 . Returns Type Description Boolean true if the chunk1 is equal to the chunk2 ; otherwise, false . GetContentSize(WritingSettings) Gets size of chunk's content as number of bytes required to write it according to specified WritingSettings . Declaration protected abstract uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write chunk's content. GetStandardChunkIds() Returns array of IDs of standard chunks. Declaration public static string[] GetStandardChunkIds() Returns Type Description String [] Array of IDs of standard chunks. Remarks Standard chunks are header chunk (ID is MThd) and track chunk (ID is MTrk). ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a chunk. Content is a part of chunk's data without its header (ID and size). Declaration protected abstract void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. WriteContent(MidiWriter, WritingSettings) Writes content of a chunk. Content is a part of chunk's data without its header (ID and size). Declaration protected abstract void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written."
  },
  "api/Melanchall.DryWetMidi.Core.MidiChunkEqualityCheckSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiChunkEqualityCheckSettings.html",
    "title": "Class MidiChunkEqualityCheckSettings | DryWetMIDI",
    "keywords": "Class MidiChunkEqualityCheckSettings Holds settings according to which MidiChunk objects should be compared for equality. Inheritance Object MidiChunkEqualityCheckSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiChunkEqualityCheckSettings Properties EventEqualityCheckSettings Gets or sets settings according to which MidiEvent objects should be compared for equality. Declaration public MidiEventEqualityCheckSettings EventEqualityCheckSettings { get; set; } Property Value Type Description MidiEventEqualityCheckSettings"
  },
  "api/Melanchall.DryWetMidi.Core.MidiEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEvent.html",
    "title": "Class MidiEvent | DryWetMIDI",
    "keywords": "Class MidiEvent Represents a MIDI file event stored in a track chunk. Inheritance Object MidiEvent ChannelEvent MetaEvent SysExEvent SystemCommonEvent SystemRealTimeEvent Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiEvent Remarks See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Constructors MidiEvent(MidiEventType) Initializes a new instance of the MidiEvent with the specified event type. Declaration public MidiEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Fields UnknownContentSize Constant for content's size of events that don't have size information stored. Declaration public const int UnknownContentSize = -1 Field Value Type Description Int32 Properties DeltaTime Gets or sets delta-time of the event. Declaration public long DeltaTime { get; set; } Property Value Type Description Int64 Remarks Delta-time represents the amount of time before the following event. If the first event in a track occurs at the very beginning of a track, or if two events occur simultaneously, a delta-time of zero is used. Delta-time is in some fraction of a beat (or a second, for recording a track with SMPTE times), as specified by the file's time division. Exceptions Type Condition ArgumentOutOfRangeException Delta-time is negative. EventType Gets the type of the event. Declaration public MidiEventType EventType { get; } Property Value Type Description MidiEventType Methods Clone() Clones event by creating a copy of it. Declaration public MidiEvent Clone() Returns Type Description MidiEvent Copy of the event. CloneEvent() Clones event by creating a copy of it. Declaration protected abstract MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Equals(MidiEvent, MidiEvent) Determines whether two specified MidiEvent objects have the same content. Declaration public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2) Parameters Type Name Description MidiEvent midiEvent1 The first event to compare, or null . MidiEvent midiEvent2 The second event to compare, or null . Returns Type Description Boolean true if the midiEvent1 is equal to the midiEvent2 ; otherwise, false . Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) Determines whether two specified MidiEvent objects have the same content. Declaration public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings) Parameters Type Name Description MidiEvent midiEvent1 The first event to compare, or null . MidiEvent midiEvent2 The second event to compare, or null . MidiEventEqualityCheckSettings settings Settings according to which events should be compared. Returns Type Description Boolean true if the midiEvent1 is equal to the midiEvent2 ; otherwise, false . Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, out String) Determines whether two specified MidiEvent objects have the same content using the specified comparison settings. Declaration public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, MidiEventEqualityCheckSettings settings, out string message) Parameters Type Name Description MidiEvent midiEvent1 The first event to compare, or null . MidiEvent midiEvent2 The second event to compare, or null . MidiEventEqualityCheckSettings settings Settings according to which events should be compared. String message Message containing information about what exactly is different in midiEvent1 and midiEvent2 . Returns Type Description Boolean true if the midiEvent1 is equal to the midiEvent2 ; otherwise, false . Equals(MidiEvent, MidiEvent, out String) Determines whether two specified MidiEvent objects have the same content. Declaration public static bool Equals(MidiEvent midiEvent1, MidiEvent midiEvent2, out string message) Parameters Type Name Description MidiEvent midiEvent1 The first event to compare, or null . MidiEvent midiEvent2 The second event to compare, or null . String message Message containing information about what exactly is different in midiEvent1 and midiEvent2 . Returns Type Description Boolean true if the midiEvent1 is equal to the midiEvent2 ; otherwise, false ."
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventEqualityCheckSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventEqualityCheckSettings.html",
    "title": "Class MidiEventEqualityCheckSettings | DryWetMIDI",
    "keywords": "Class MidiEventEqualityCheckSettings Holds settings according to which MidiEvent objects should be compared for equality. Inheritance Object MidiEventEqualityCheckSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventEqualityCheckSettings Properties CompareDeltaTimes Gets or sets a value indicating whether DeltaTime values should be compared or not. The default value is true . Declaration public bool CompareDeltaTimes { get; set; } Property Value Type Description Boolean TextComparison Gets or sets a value that specifies the rules for the comparison of text data (in meta events). The default value is CurrentCulture . Declaration public StringComparison TextComparison { get; set; } Property Value Type Description StringComparison Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventToBytesConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventToBytesConverter.html",
    "title": "Class MidiEventToBytesConverter | DryWetMIDI",
    "keywords": "Class MidiEventToBytesConverter Provides methods to convert an instance of the MidiEvent to bytes. Inheritance Object MidiEventToBytesConverter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventToBytesConverter : IDisposable Constructors MidiEventToBytesConverter() Initializes a new instance of the MidiEventToBytesConverter . Declaration public MidiEventToBytesConverter() MidiEventToBytesConverter(Int32) Initializes a new instance of the MidiEventToBytesConverter with the specified initial capacity of internal buffer. Declaration public MidiEventToBytesConverter(int capacity) Parameters Type Name Description Int32 capacity Initial capacity of the internal buffer. Exceptions Type Condition ArgumentOutOfRangeException capacity is negative. Properties BytesFormat Gets or sets the format of target bytes layout. The default is File . Declaration public BytesFormat BytesFormat { get; set; } Property Value Type Description BytesFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. CustomMetaEventTypes Gets or sets collection of custom meta events types. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection Remarks Types within this collection must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown while writing a MIDI file if some types don't meet these requirements. NoteOffAsSilentNoteOn Gets or sets a value indicating whether Note Off events should be written as Note On ones with velocity of zero, or not. In conjunction with UseRunningStatus set to true can give some compression of MIDI data. The default value is false . Declaration public bool NoteOffAsSilentNoteOn { get; set; } Property Value Type Description Boolean TextEncoding Gets or sets an Encoding that will be used to write the text of a text-based meta event. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding UseRunningStatus Gets or sets a value indicating whether 'running status' (to turn off writing of the status bytes of consecutive events of the same type) should be used or not. The default value is false . Declaration public bool UseRunningStatus { get; set; } Property Value Type Description Boolean WriteDeltaTimes Gets or sets a value indicating whether delta-times of events must be written to bytes array or not. The default value is false . Declaration public bool WriteDeltaTimes { get; set; } Property Value Type Description Boolean Methods Convert(MidiEvent) Converts an instance of the MidiEvent to bytes array. Declaration public byte[] Convert(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event to convert. Returns Type Description Byte [] Array of bytes representing midiEvent . Exceptions Type Condition ArgumentNullException midiEvent is null . Convert(MidiEvent, Int32) Converts an instance of the MidiEvent to bytes array using the specified minimum size of resulting array. Declaration public byte[] Convert(MidiEvent midiEvent, int minSize) Parameters Type Name Description MidiEvent midiEvent MIDI event to convert. Int32 minSize Minimum size of bytes array representing midiEvent . Returns Type Description Byte [] Array of bytes representing midiEvent . Exceptions Type Condition ArgumentNullException midiEvent is null . ArgumentOutOfRangeException minSize is negative. Convert(IEnumerable<MidiEvent>) Converts collection of MidiEvent to bytes array. Declaration public byte[] Convert(IEnumerable<MidiEvent> midiEvents) Parameters Type Name Description IEnumerable < MidiEvent > midiEvents MIDI events to convert. Returns Type Description Byte [] Array of bytes representing midiEvents . Exceptions Type Condition ArgumentNullException midiEvents is null . Dispose() Releases all resources used by the current instance of the MidiEventToBytesConverter class. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventToken.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventToken.html",
    "title": "Class MidiEventToken | DryWetMIDI",
    "keywords": "Class MidiEventToken Inheritance Object MidiToken MidiEventToken Inherited Members MidiToken.TokenType Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventToken : MidiToken Properties Event Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MidiEventType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiEventType.html",
    "title": "Enum MidiEventType | DryWetMIDI",
    "keywords": "Enum MidiEventType The type of a MIDI event. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiEventType : byte Fields Name Description ActiveSensing Active Sensing event. ChannelAftertouch Channel Pressure (Aftertouch) event. ChannelPrefix MIDI Channel Prefix meta event. Continue Continue event. ControlChange Control Change event. CopyrightNotice Copyright Notice meta event. CuePoint Cue Point meta event. CustomMeta Custom meta event. DeviceName Device Name meta event. EndOfTrack End of Track meta event. EscapeSysEx \"Escape\" system exclusive event which defines an escape sequence. InstrumentName Instrument Name meta event. KeySignature Key Signature meta event. Lyric Lyric meta event. Marker Marker meta event. MidiTimeCode MIDI Time Code (MIDI Quarter Frame) event. NormalSysEx Normal system exclusive event. NoteAftertouch Polyphonic Key Pressure (Aftertouch) event. NoteOff Note Off event. NoteOn Note On event. PitchBend Pitch Bend Change event. PortPrefix MIDI Port meta event. ProgramChange Program Change event. ProgramName Program Name meta event. Reset Reset event. SequenceNumber Sequence Number meta event. SequencerSpecific Sequencer Specific meta event. SequenceTrackName Sequence/Track Name meta event. SetTempo Set Tempo meta event. SmpteOffset SMPTE Offset meta event. SongPositionPointer Song Position Pointer event. SongSelect Song Select event. Start Start event. Stop Stop event. Text Text meta event. TimeSignature Time Signature meta event. TimingClock Timing Clock event. TuneRequest Tune Request event. UnknownMeta Unknown meta event."
  },
  "api/Melanchall.DryWetMidi.Core.MidiFile.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFile.html",
    "title": "Class MidiFile | DryWetMIDI",
    "keywords": "Class MidiFile Represents a MIDI file. Inheritance Object MidiFile Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiFile Remarks An instance of MidiFile can be obtained via one of Read ( Read(String, ReadingSettings) or Read(Stream, ReadingSettings) ) static methods or via constructor which allows to create a MIDI file from scratch. Content of MIDI file available via Chunks property which contains instances of following chunk classes (derived from MidiChunk ): TrackChunk UnknownChunk Any of the types specified by CustomChunkTypes property of the ReadingSettings that was used to read the file To save MIDI data to file on disk or to stream use appropriate Write method ( Write(String, Boolean, MidiFileFormat, WritingSettings) or Write(Stream, MidiFileFormat, WritingSettings) ). See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Constructors MidiFile() Initializes a new instance of the MidiFile . Declaration public MidiFile() MidiFile(MidiChunk[]) Initializes a new instance of the MidiFile with the specified chunks. Declaration public MidiFile(params MidiChunk[] chunks) Parameters Type Name Description MidiChunk [] chunks Chunks to add to the file. Remarks Note that the library doesn't provide class for MIDI file header chunk so it cannot be added into the collection. Use OriginalFormat and TimeDivision properties instead. Header chunk with appropriate information will be written to a file automatically on Write method. Exceptions Type Condition ArgumentNullException chunks is null . MidiFile(IEnumerable<MidiChunk>) Initializes a new instance of the MidiFile with the specified chunks. Declaration public MidiFile(IEnumerable<MidiChunk> chunks) Parameters Type Name Description IEnumerable < MidiChunk > chunks Chunks to add to the file. Remarks Note that the library doesn't provide class for MIDI file header chunk so it cannot be added into the collection. Use OriginalFormat and TimeDivision properties instead. Header chunk with appropriate information will be written to a file automatically on Write method. Exceptions Type Condition ArgumentNullException chunks is null . Properties Chunks Gets collection of chunks of a MIDI file. Declaration public ChunksCollection Chunks { get; } Property Value Type Description ChunksCollection Remarks MIDI files are made up of chunks. Сollection returned by this property may contain chunks of the following types: TrackChunk UnknownChunk Custom chunk types You cannot create instance of the UnknownChunk . It will be created by the library on reading unknown chunk (neither track chunk nor custom one). OriginalFormat Gets original format of the file was read or null if the current MidiFile was created by constructor. Declaration public MidiFileFormat OriginalFormat { get; } Property Value Type Description MidiFileFormat Exceptions Type Condition UnknownFileFormatException File format is unknown. InvalidOperationException Unable to get original format of the file. It means the current MidiFile was created via constructor rather than via Read method. TimeDivision Gets or sets a time division of a MIDI file. Declaration public TimeDivision TimeDivision { get; set; } Property Value Type Description TimeDivision Remarks Time division specifies the meaning of the delta-times of MIDI events within TrackChunk . There are two types of the time division: ticks per quarter note and SMPTE. The first type represented by TicksPerQuarterNoteTimeDivision class and the second one represented by SmpteTimeDivision class. Methods Clone() Clones the current MidiFile creating a copy of it. Declaration public MidiFile Clone() Returns Type Description MidiFile Copy of the current MidiFile . Equals(MidiFile, MidiFile) Determines whether two specified MidiFile objects have the same content. Declaration public static bool Equals(MidiFile midiFile1, MidiFile midiFile2) Parameters Type Name Description MidiFile midiFile1 The first file to compare, or null . MidiFile midiFile2 The second file to compare, or null . Returns Type Description Boolean true if the midiFile1 is equal to the midiFile2 ; otherwise, false . Equals(MidiFile, MidiFile, MidiFileEqualityCheckSettings) Determines whether two specified MidiFile objects have the same content. Declaration public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings) Parameters Type Name Description MidiFile midiFile1 The first file to compare, or null . MidiFile midiFile2 The second file to compare, or null . MidiFileEqualityCheckSettings settings Settings according to which files should be compared. Returns Type Description Boolean true if the midiFile1 is equal to the midiFile2 ; otherwise, false . Equals(MidiFile, MidiFile, MidiFileEqualityCheckSettings, out String) Determines whether two specified MidiFile objects have the same content using the specified comparison settings. Declaration public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, MidiFileEqualityCheckSettings settings, out string message) Parameters Type Name Description MidiFile midiFile1 The first file to compare, or null . MidiFile midiFile2 The second file to compare, or null . MidiFileEqualityCheckSettings settings Settings according to which files should be compared. String message Message containing information about what exactly is different in midiFile1 and midiFile2 . Returns Type Description Boolean true if the midiFile1 is equal to the midiFile2 ; otherwise, false . Equals(MidiFile, MidiFile, out String) Determines whether two specified MidiFile objects have the same content. Declaration public static bool Equals(MidiFile midiFile1, MidiFile midiFile2, out string message) Parameters Type Name Description MidiFile midiFile1 The first file to compare, or null . MidiFile midiFile2 The second file to compare, or null . String message Message containing information about what exactly is different in midiFile1 and midiFile2 . Returns Type Description Boolean true if the midiFile1 is equal to the midiFile2 ; otherwise, false . Read(Stream, ReadingSettings) Reads a MIDI file from the stream. Declaration public static MidiFile Read(Stream stream, ReadingSettings settings = null) Parameters Type Name Description Stream stream Stream to read file from. ReadingSettings settings Settings according to which the file must be read. Specify null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file was read from the stream. Remarks Stream must be readable, seekable and be able to provide its position and length via Position and Length properties. Exceptions Type Condition ArgumentNullException stream is null . ArgumentException One of the following errors occured: stream doesn't support reading. stream is already read. IOException An I/O error occurred while reading the file. ObjectDisposedException stream is disposed. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. The caller does not have the required permission. NoHeaderChunkException There is no header chunk in a file and that should be treated as error according to the NoHeaderChunkPolicy of the settings . InvalidChunkSizeException Actual header or track chunk's size differs from the one declared in its header and that should be treated as error according to the InvalidChunkSizePolicy of the settings . UnknownChunkException Chunk to be read has unknown ID and that should be treated as error accordng to the UnknownChunkIdPolicy of the settings . UnexpectedTrackChunksCountException Actual track chunks count differs from the expected one (declared in the file header) and that should be treated as error according to the UnexpectedTrackChunksCountPolicy of the specified settings . UnknownFileFormatException The header chunk of the file specifies unknown file format and that should be treated as error according to the UnknownFileFormatPolicy of the settings . InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid (is out of [0; 127] range) and that should be treated as error according to the InvalidChannelEventParameterValuePolicy of the settings . InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid and that should be treated as error according to the InvalidMetaEventParameterValuePolicy of the settings . UnknownChannelEventException Reader has encountered an unknown channel event and that should be treated as error according to the UnknownChannelEventPolicy of the settings . NotEnoughBytesException MIDI file data cannot be read since the reader's underlying stream doesn't have enough bytes and that should be treated as error according to the NotEnoughBytesPolicy of the settings . UnexpectedRunningStatusException Unexpected running status is encountered. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event and that should be treated as error accordng to the MissedEndOfTrackPolicy of the settings . InvalidOperationException Buffer of settings is null in case of BufferingPolicy set to UseCustomBuffer . Read(String, ReadingSettings) Reads a MIDI file specified by its full path. Declaration public static MidiFile Read(string filePath, ReadingSettings settings = null) Parameters Type Name Description String filePath Path to the file to read. ReadingSettings settings Settings according to which the file must be read. Specify null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null . PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission. NoHeaderChunkException There is no header chunk in a file and that should be treated as error according to the NoHeaderChunkPolicy of the settings . InvalidChunkSizeException Actual header or track chunk's size differs from the one declared in its header and that should be treated as error according to the InvalidChunkSizePolicy of the settings . UnknownChunkException Chunk to be read has unknown ID and that should be treated as error accordng to the UnknownChunkIdPolicy of the settings . UnexpectedTrackChunksCountException Actual track chunks count differs from the expected one (declared in the file header) and that should be treated as error according to the UnexpectedTrackChunksCountPolicy of the specified settings . UnknownFileFormatException The header chunk of the file specifies unknown file format and that should be treated as error according to the UnknownFileFormatPolicy of the settings . InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid (is out of [0; 127] range) and that should be treated as error according to the InvalidChannelEventParameterValuePolicy of the settings . InvalidMetaEventParameterValueException Value of a meta event's parameter just read is invalid and that should be treated as error according to the InvalidMetaEventParameterValuePolicy of the settings . UnknownChannelEventException Reader has encountered an unknown channel event and that should be treated as error according to the UnknownChannelEventPolicy of the settings . NotEnoughBytesException MIDI file data cannot be read since the reader's underlying stream doesn't have enough bytes and that should be treated as error according to the NotEnoughBytesPolicy of the settings . UnexpectedRunningStatusException Unexpected running status is encountered. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event and that should be treated as error accordng to the MissedEndOfTrackPolicy of the settings . InvalidOperationException Buffer of settings is null in case of BufferingPolicy set to UseCustomBuffer . ReadLazy(Stream, ReadingSettings) Declaration public static MidiTokensReader ReadLazy(Stream stream, ReadingSettings settings = null) Parameters Type Name Description Stream stream ReadingSettings settings Returns Type Description MidiTokensReader ReadLazy(String, ReadingSettings) Declaration public static MidiTokensReader ReadLazy(string filePath, ReadingSettings settings = null) Parameters Type Name Description String filePath ReadingSettings settings Returns Type Description MidiTokensReader Write(Stream, MidiFileFormat, WritingSettings) Writes current MidiFile to the stream. Declaration public void Write(Stream stream, MidiFileFormat format = MidiFileFormat.MultiTrack, WritingSettings settings = null) Parameters Type Name Description Stream stream Stream to write file's data to. MidiFileFormat format Format of the file to be written. WritingSettings settings Settings according to which the file must be written. Specify null to use default settings. Exceptions Type Condition ArgumentNullException stream is null . ArgumentException stream doesn't support writing. InvalidEnumArgumentException format specified an invalid value. InvalidOperationException Time division is null . IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. TooManyTrackChunksException Count of track chunks presented in the file exceeds maximum value allowed for MIDI file. Write(String, Boolean, MidiFileFormat, WritingSettings) Writes the MIDI file to location specified by full path. Declaration public void Write(string filePath, bool overwriteFile = false, MidiFileFormat format = MidiFileFormat.MultiTrack, WritingSettings settings = null) Parameters Type Name Description String filePath Full path of the file to write to. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists exception will be thrown. MidiFileFormat format MIDI file format to write in. WritingSettings settings Settings according to which the file must be written. Specify null to use default settings. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null . InvalidEnumArgumentException format specified an invalid value. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission. InvalidOperationException Time division is null . TooManyTrackChunksException Count of track chunks presented in the file exceeds maximum value allowed for MIDI file. Extension Methods MidiFileUtilities.GetChannels(MidiFile) TrackChunkUtilities.GetTrackChunks(MidiFile) ChordsManagingUtilities.GetChords(MidiFile, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(MidiFile, Action<Chord>, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(MidiFile, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(MidiFile, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(MidiFile, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities.GetObjects(MidiFile, ObjectType, ObjectDetectionSettings) NotesManagingUtilities.GetNotes(MidiFile, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(MidiFile, Action<Note>, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(MidiFile, Action<Note>, Predicate<Note>, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(MidiFile, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(MidiFile, Predicate<Note>, NoteDetectionSettings) TempoMapManagingUtilities.ManageTempoMap(MidiFile) TempoMapManagingUtilities.GetTempoMap(MidiFile) TempoMapManagingUtilities.ReplaceTempoMap(MidiFile, TempoMap) TimedEventsManagingUtilities.GetTimedEvents(MidiFile, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(MidiFile, Action<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(MidiFile, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.RemoveTimedEvents(MidiFile) TimedEventsManagingUtilities.RemoveTimedEvents(MidiFile, Predicate<TimedEvent>, TimedEventDetectionSettings) MidiFileUtilities.GetDuration<TTimeSpan>(MidiFile) MidiFileUtilities.GetDuration(MidiFile, TimeSpanType) MidiFileUtilities.IsEmpty(MidiFile) MidiFileUtilities.ShiftEvents(MidiFile, ITimeSpan) PlaybackUtilities.GetPlayback(MidiFile, IOutputDevice, PlaybackSettings) PlaybackUtilities.GetPlayback(MidiFile, PlaybackSettings) PlaybackUtilities.Play(MidiFile, IOutputDevice, PlaybackSettings) ChordsSplitterUtilities.SplitChordsByStep(MidiFile, ITimeSpan, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsByPartsNumber(MidiFile, Int32, TimeSpanType, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsByGrid(MidiFile, IGrid, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, ChordDetectionSettings) NotesSplitterUtilities.SplitNotesByStep(MidiFile, ITimeSpan, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesByPartsNumber(MidiFile, Int32, TimeSpanType, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesByGrid(MidiFile, IGrid, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, NoteDetectionSettings) Merger.MergeObjects(MidiFile, ObjectType, ObjectsMergingSettings, ObjectDetectionSettings) NotesMergerUtilities.MergeNotes(MidiFile, NotesMergingSettings) QuantizerUtilities.QuantizeObjects(MidiFile, ObjectType, IGrid, QuantizingSettings, ObjectDetectionSettings) QuantizerUtilities.QuantizeObjects(MidiFile, Quantizer, ObjectType, IGrid, QuantizingSettings, ObjectDetectionSettings) ChordsQuantizerUtilities.QuantizeChords(MidiFile, IGrid, ChordsQuantizingSettings) NotesQuantizerUtilities.QuantizeNotes(MidiFile, IGrid, NotesQuantizingSettings) TimedEventsQuantizerUtilities.QuantizeTimedEvents(MidiFile, IGrid, TimedEventsQuantizingSettings) ChordsRandomizerUtilities.RandomizeChords(MidiFile, IBounds, ChordsRandomizingSettings) NotesRandomizerUtilities.RandomizeNotes(MidiFile, IBounds, NotesRandomizingSettings) TimedEventsRandomizerUtilities.RandomizeTimedEvents(MidiFile, IBounds, TimedEventsRandomizingSettings) RepeaterUtilities.Repeat(MidiFile, Int32, RepeatingSettings) Resizer.Resize(MidiFile, ITimeSpan) Resizer.Resize(MidiFile, Double) Splitter.CutPart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) Splitter.SkipPart(MidiFile, ITimeSpan, SliceMidiFileSettings) Splitter.SplitByChannel(MidiFile, SplitFileByChannelSettings) Splitter.SplitByChunks(MidiFile, SplitFileByChunksSettings) Splitter.SplitByGrid(MidiFile, IGrid, SliceMidiFileSettings) Splitter.SplitByNotes(MidiFile, SplitFileByNotesSettings) Splitter.SplitByObjects(MidiFile, ObjectType, SplitByObjectsSettings, ObjectDetectionSettings) Splitter.SplitObjectsAtDistance(MidiFile, ObjectType, ITimeSpan, LengthedObjectTarget, ObjectDetectionSettings) Splitter.SplitObjectsAtDistance(MidiFile, ObjectType, Double, TimeSpanType, LengthedObjectTarget, ObjectDetectionSettings) Splitter.SplitObjectsByGrid(MidiFile, ObjectType, IGrid, ObjectDetectionSettings) Splitter.SplitObjectsByPartsNumber(MidiFile, ObjectType, Int32, TimeSpanType, ObjectDetectionSettings) Splitter.SplitObjectsByStep(MidiFile, ObjectType, ITimeSpan, ObjectDetectionSettings) Splitter.TakePart(MidiFile, ITimeSpan, SliceMidiFileSettings) Splitter.TakePart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) See Also ReadingSettings WritingSettings MidiChunk MidiEvent Melanchall.DryWetMidi.Interaction"
  },
  "api/Melanchall.DryWetMidi.Core.MidiFileEqualityCheckSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFileEqualityCheckSettings.html",
    "title": "Class MidiFileEqualityCheckSettings | DryWetMIDI",
    "keywords": "Class MidiFileEqualityCheckSettings Holds settings according to which MidiFile objects should be compared for equality. Inheritance Object MidiFileEqualityCheckSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiFileEqualityCheckSettings Properties ChunkEqualityCheckSettings Gets or sets settings according to which MidiChunk objects should be compared for equality. Declaration public MidiChunkEqualityCheckSettings ChunkEqualityCheckSettings { get; set; } Property Value Type Description MidiChunkEqualityCheckSettings CompareOriginalFormat Gets or sets a value indicating whether OriginalFormat values should be compared or not. Declaration public bool CompareOriginalFormat { get; set; } Property Value Type Description Boolean Remarks In MidiFile objects created by reading MIDI data from file or stream OriginalFormat is always set if format was valid. But if format was invalid or MidiFile is created from scratch using constrictor, the property will throw exception so you may want to exclude this property from comparison process."
  },
  "api/Melanchall.DryWetMidi.Core.MidiFileFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFileFormat.html",
    "title": "Enum MidiFileFormat | DryWetMIDI",
    "keywords": "Enum MidiFileFormat Format of a Standard MIDI file which specifies overall structure of the file. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiFileFormat : ushort Fields Name Description MultiSequence The file contains one or more sequentially independent single-track patterns. MultiTrack The file contains one or more simultaneous tracks (or MIDI outputs) of a sequence. SingleTrack The file contains a single multi-channel track."
  },
  "api/Melanchall.DryWetMidi.Core.MidiFileUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiFileUtilities.html",
    "title": "Class MidiFileUtilities | DryWetMIDI",
    "keywords": "Class MidiFileUtilities Provides useful methods to manipulate an instance of the MidiFile . Inheritance Object MidiFileUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiFileUtilities Methods GetChannels(MidiFile) Gets all channel numbers presented in the specified MidiFile . Declaration public static IEnumerable<FourBitNumber> GetChannels(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null ."
  },
  "api/Melanchall.DryWetMidi.Core.MidiReader.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiReader.html",
    "title": "Class MidiReader | DryWetMIDI",
    "keywords": "Class MidiReader Reader of the MIDI data types. Inheritance Object MidiReader Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiReader : IDisposable Constructors MidiReader(Stream, ReaderSettings) Initializes a new instance of the MidiReader with the specified stream. Declaration public MidiReader(Stream stream, ReaderSettings settings) Parameters Type Name Description Stream stream Stream to read MIDI file from. ReaderSettings settings Settings according to which MIDI data should be read. Exceptions Type Condition ArgumentNullException One of the following errors occured: stream is null . settings is null . InvalidOperationException Buffer of settings is null in case of BufferingPolicy set to UseCustomBuffer . Properties EndReached Gets a value indicating whether end of the underlying stream is reached. Declaration public bool EndReached { get; } Property Value Type Description Boolean Exceptions Type Condition IOException An I/O error occurred on the underlying stream. ObjectDisposedException Property was called after the reader was disposed. Length Gets length of the underlying stream. Declaration public long Length { get; } Property Value Type Description Int64 Position Gets or sets the position within the underlying stream. Declaration public long Position { get; set; } Property Value Type Description Int64 Exceptions Type Condition IOException An I/O error occurred on the underlying stream. ObjectDisposedException Property was called after the reader was disposed. Methods Dispose() Releases all resources used by the current instance of the MidiReader class. Declaration public void Dispose() Read3ByteDword() Reads a DWORD value (32-bit unsigned integer) presented by 3 bytes from the underlying stream and advances the current position by three bytes. Declaration public uint Read3ByteDword() Returns Type Description UInt32 A 32-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a 3-byte DWORD. ReadByte() Reads a byte from the underlying stream and advances the current position by one byte. Declaration public byte ReadByte() Returns Type Description Byte The next byte read from the underlying stream. Exceptions Type Condition EndOfStreamException The end of the underlying stream is reached. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadBytes(Int32) Reads the specified number of bytes from the underlying stream into a byte array and advances the current position by that number of bytes. Declaration public byte[] ReadBytes(int count) Parameters Type Name Description Int32 count The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur. Returns Type Description Byte [] A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached. Exceptions Type Condition ArgumentOutOfRangeException count is negative. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadDword() Reads a DWORD value (32-bit unsigned integer) from the underlying stream and advances the current position by four bytes. Declaration public uint ReadDword() Returns Type Description UInt32 A 32-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a DWORD. ReadInt16() Reads an INT16 value (16-bit signed integer) from the underlying stream and advances the current position by two bytes. Declaration public short ReadInt16() Returns Type Description Int16 A 16-bit signed integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a INT16. ReadSByte() Reads a signed byte from the underlying stream and advances the current position by one byte. Declaration public sbyte ReadSByte() Returns Type Description SByte A signed byte read from the underlying stream. Exceptions Type Condition EndOfStreamException The end of the underlying stream is reached. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadString(Int32) Reads the specified number of characters from the underlying stream, returns the data as string, and advances the current position by that number of characters. Declaration public string ReadString(int count) Parameters Type Name Description Int32 count The length of string to read. Returns Type Description String The string being read. Exceptions Type Condition ArgumentOutOfRangeException count is negative. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadVlqLongNumber() Reads a 64-bit signed integer presented in compressed format called variable-length quantity (VLQ) to the underlying stream. Declaration public long ReadVlqLongNumber() Returns Type Description Int64 A 64-bit signed integer read from the underlying stream. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition NotEnoughBytesException Not enough bytes in the stream to read a variable-length quantity number. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadVlqNumber() Reads a 32-bit signed integer presented in compressed format called variable-length quantity (VLQ) to the underlying stream. Declaration public int ReadVlqNumber() Returns Type Description Int32 A 32-bit signed integer read from the underlying stream. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition NotEnoughBytesException Not enough bytes in the stream to read a variable-length quantity number. ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. ReadWord() Reads a WORD value (16-bit unsigned integer) from the underlying stream and advances the current position by two bytes. Declaration public ushort ReadWord() Returns Type Description UInt16 A 16-bit unsigned integer read from the underlying stream. Exceptions Type Condition ObjectDisposedException Method was called after the reader was disposed. IOException An I/O error occurred on the underlying stream. NotEnoughBytesException Not enough bytes in the stream to read a WORD. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeComponent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeComponent.html",
    "title": "Enum MidiTimeCodeComponent | DryWetMIDI",
    "keywords": "Enum MidiTimeCodeComponent MIDI time code component. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiTimeCodeComponent : byte Fields Name Description FramesLsb LSB of frames number. FramesMsb MSB of frames number. HoursLsb LSB of hours number. HoursMsbAndTimeCodeType MSB of hours number and time code type. MinutesLsb LSB of minutes number. MinutesMsb MSB of minutes number. SecondsLsb LSB of seconds number. SecondsMsb MSB of seconds number."
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeEvent.html",
    "title": "Class MidiTimeCodeEvent | DryWetMIDI",
    "keywords": "Class MidiTimeCodeEvent Represents MIDI Time Code (MIDI Quarter Frame) event. Inheritance Object MidiEvent SystemCommonEvent MidiTimeCodeEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeCodeEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI quarter frame message is timing information in the hours:minutes:seconds:frames format (similar to SMPTE) that is used to synchronize MIDI devices. Constructors MidiTimeCodeEvent() Initializes a new instance of the MidiTimeCodeEvent . Declaration public MidiTimeCodeEvent() MidiTimeCodeEvent(MidiTimeCodeComponent, FourBitNumber) Initializes a new instance of the MidiTimeCodeEvent with the specified time code component and its value. Declaration public MidiTimeCodeEvent(MidiTimeCodeComponent component, FourBitNumber componentValue) Parameters Type Name Description MidiTimeCodeComponent component MIDI time code component. FourBitNumber componentValue Value of component . Exceptions Type Condition InvalidEnumArgumentException component specified an invalid value. Properties Component Gets or sets the MIDI time code component presented by the current MidiTimeCodeEvent . Declaration public MidiTimeCodeComponent Component { get; set; } Property Value Type Description MidiTimeCodeComponent ComponentValue Gets or sets value of the MIDI time code component presented by the current MidiTimeCodeEvent . Declaration public FourBitNumber ComponentValue { get; set; } Property Value Type Description FourBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTimeCodeType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTimeCodeType.html",
    "title": "Enum MidiTimeCodeType | DryWetMIDI",
    "keywords": "Enum MidiTimeCodeType MIDI time code type (frames per second). Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiTimeCodeType : byte Fields Name Description Thirty 30 frames per second. ThirtyDrop 29.97 frames per second (also called \"30 drop\"). TwentyFive 25 frames per second. TwentyFour 24 frames per second."
  },
  "api/Melanchall.DryWetMidi.Core.MidiToken.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiToken.html",
    "title": "Class MidiToken | DryWetMIDI",
    "keywords": "Class MidiToken Inheritance Object MidiToken BytesPacketToken ChunkHeaderToken FileHeaderToken MidiEventToken Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiToken Constructors MidiToken(MidiTokenType) Declaration protected MidiToken(MidiTokenType tokenType) Parameters Type Name Description MidiTokenType tokenType Properties TokenType Declaration public MidiTokenType TokenType { get; } Property Value Type Description MidiTokenType"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTokensReader.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTokensReader.html",
    "title": "Class MidiTokensReader | DryWetMIDI",
    "keywords": "Class MidiTokensReader Inheritance Object MidiTokensReader Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTokensReader : IDisposable Methods Dispose() Declaration public void Dispose() ReadToken() Declaration public MidiToken ReadToken() Returns Type Description MidiToken Implements System.IDisposable Extension Methods MidiTokensReaderUtilities.EnumerateTokens(MidiTokensReader) MidiTokensReaderUtilities.EnumerateEvents(MidiTokensReader)"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTokensReaderUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTokensReaderUtilities.html",
    "title": "Class MidiTokensReaderUtilities | DryWetMIDI",
    "keywords": "Class MidiTokensReaderUtilities Inheritance Object MidiTokensReaderUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiTokensReaderUtilities Methods EnumerateEvents(MidiTokensReader) Declaration public static IEnumerable<MidiEvent> EnumerateEvents(this MidiTokensReader reader) Parameters Type Name Description MidiTokensReader reader Returns Type Description IEnumerable < MidiEvent > EnumerateTokens(MidiTokensReader) Declaration public static IEnumerable<MidiToken> EnumerateTokens(this MidiTokensReader reader) Parameters Type Name Description MidiTokensReader reader Returns Type Description IEnumerable < MidiToken >"
  },
  "api/Melanchall.DryWetMidi.Core.MidiTokenType.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiTokenType.html",
    "title": "Enum MidiTokenType | DryWetMIDI",
    "keywords": "Enum MidiTokenType Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiTokenType Fields Name Description BytesPacket ChunkHeader HeaderChunkData MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Core.MidiWriter.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MidiWriter.html",
    "title": "Class MidiWriter | DryWetMIDI",
    "keywords": "Class MidiWriter Writer of the MIDI data types. Inheritance Object MidiWriter Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiWriter : IDisposable Constructors MidiWriter(Stream, WriterSettings) Initializes a new instance of the MidiWriter with the specified stream. Declaration public MidiWriter(Stream stream, WriterSettings settings) Parameters Type Name Description Stream stream Stream to write MIDI file to. WriterSettings settings Settings according to which MIDI data should be written. Exceptions Type Condition ArgumentNullException One of the following errors occured: stream is null . settings is null . ArgumentException stream does not support writing, or is already closed. Methods Dispose() Releases all resources used by the current instance of the MidiWriter class. Declaration public void Dispose() Write3ByteDword(UInt32) Writes a DWORD value (32-bit unsigned integer) to the underlying stream as three bytes and advances the current position by three bytes. Declaration public void Write3ByteDword(uint value) Parameters Type Name Description UInt32 value DWORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteByte(Byte) Writes an unsigned byte to the underlying stream and advances the stream position by one byte. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The unsigned byte to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteBytes(Byte[]) Writes a byte array to the underlying stream. Declaration public void WriteBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes A byte array containing the data to write. Exceptions Type Condition ArgumentNullException bytes is null . ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteDword(UInt32) Writes a DWORD value (32-bit unsigned integer) to the underlying stream and advances the current position by four bytes. Declaration public void WriteDword(uint value) Parameters Type Name Description UInt32 value DWORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteInt16(Int16) Writes a INT16 value (16-bit signed integer) to the underlying stream and advances the current position by two bytes. Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value INT16 value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteSByte(SByte) Writes a signed byte to the underlying stream and advances the stream position by one byte. Declaration public void WriteSByte(sbyte value) Parameters Type Name Description SByte value The signed byte to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteString(String) Writes a string to the underlying stream as set of ASCII bytes. Declaration public void WriteString(string value) Parameters Type Name Description String value The string to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteVlqNumber(Int32) Writes a 32-bit signed integer to the underlying stream in compressed format called variable-length quantity (VLQ). Declaration public void WriteVlqNumber(int value) Parameters Type Name Description Int32 value The value to write. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteVlqNumber(Int64) Writes a 64-bit signed integer to the underlying stream in compressed format called variable-length quantity (VLQ). Declaration public void WriteVlqNumber(long value) Parameters Type Name Description Int64 value The value to write. Remarks Numbers in VLQ format are represented 7 bits per byte, most significant bits first. All bytes except the last have bit 7 set, and the last byte has bit 7 clear. If the number is between 0 and 127, it is thus represented exactly as one byte. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. WriteWord(UInt16) Writes a WORD value (16-bit unsigned integer) to the underlying stream and advances the current position by two bytes. Declaration public void WriteWord(ushort value) Parameters Type Name Description UInt16 value WORD value to write. Exceptions Type Condition ObjectDisposedException Method was called after the writer was disposed. IOException An I/O error occurred on the underlying stream. Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackEventException.html",
    "title": "Class MissedEndOfTrackEventException | DryWetMIDI",
    "keywords": "Class MissedEndOfTrackEventException The exception that is thrown when a MIDI file chunk doesn't end with an End of Track event. Inheritance Object Exception MidiException MissedEndOfTrackEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class MissedEndOfTrackEventException : MidiException, ISerializable Remarks Note that this exception will be thrown only if MissedEndOfTrackPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.MissedEndOfTrackPolicy.html",
    "title": "Enum MissedEndOfTrackPolicy | DryWetMIDI",
    "keywords": "Enum MissedEndOfTrackPolicy Specifies how reading engine should react on missed End Of Track event. The default is Ignore . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum MissedEndOfTrackPolicy : byte Remarks Although the End Of Track event is not optional and therefore missing of it should be treated as error, you can try to read a track chunk relying on the chunk's size only. Fields Name Description Abort Abort reading and throw an MissedEndOfTrackEventException . Ignore Ignore missing of the End Of Track event and try to read a track chunk relying on the chunk's size."
  },
  "api/Melanchall.DryWetMidi.Core.NoHeaderChunkException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoHeaderChunkException.html",
    "title": "Class NoHeaderChunkException | DryWetMIDI",
    "keywords": "Class NoHeaderChunkException The exception that is thrown when a MIDI file doesn't contain a header chunk. Inheritance Object Exception MidiException NoHeaderChunkException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class NoHeaderChunkException : MidiException, ISerializable Remarks Note that this exception will be thrown only if NoHeaderChunkPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoHeaderChunkPolicy.html",
    "title": "Enum NoHeaderChunkPolicy | DryWetMIDI",
    "keywords": "Enum NoHeaderChunkPolicy Specifies how reading engine should react on missing of the header chunk in the MIDI file. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoHeaderChunkPolicy Fields Name Description Abort Abort reading and throw an NoHeaderChunkException . Ignore Ignore missing of the header chunk. You'll be able specify time division manually after reading via TimeDivision property."
  },
  "api/Melanchall.DryWetMidi.Core.NormalSysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NormalSysExEvent.html",
    "title": "Class NormalSysExEvent | DryWetMIDI",
    "keywords": "Class NormalSysExEvent Represents a normal system exclusive event. Inheritance Object MidiEvent SysExEvent NormalSysExEvent Inherited Members SysExEvent.EndOfEventByte SysExEvent.Completed SysExEvent.Data MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NormalSysExEvent : SysExEvent Remarks A MIDI event that carries the MIDI system exclusive message, also known as a \"MIDI sysex message\", carries information that is specific to the manufacturer of the MIDI device receiving the message. The action that this message prompts for can be anything. Note that although the terminal 0xF7 is redundant (strictly speaking, due to the use of a length parameter) it must be included. System exclisive events can be split into multiple packets. In this case the first packet uses the 0xF0 status (such event will be read as NormalSysExEvent ), whereas the second and subsequent packets use the 0xF7 status (suzh events will be read as EscapeSysExEvent ). This use of the 0xF7 status is referred to as a continuation event. Constructors NormalSysExEvent() Initializes a new instance of the NormalSysExEvent . Declaration public NormalSysExEvent() NormalSysExEvent(Byte[]) Initializes a new instance of the NormalSysExEvent with the specified data. Declaration public NormalSysExEvent(byte[] data) Parameters Type Name Description Byte [] data Data of the sysex event. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.NoteAftertouchEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteAftertouchEvent.html",
    "title": "Class NoteAftertouchEvent | DryWetMIDI",
    "keywords": "Class NoteAftertouchEvent Represents a Polyphonic Key Pressure (Aftertouch) message. Inheritance Object MidiEvent ChannelEvent NoteAftertouchEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteAftertouchEvent : ChannelEvent Remarks This message is most often sent by pressing down on the key after it \"bottoms out\". Constructors NoteAftertouchEvent() Initializes a new instance of the NoteAftertouchEvent . Declaration public NoteAftertouchEvent() NoteAftertouchEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteAftertouchEvent with the specified note number and aftertouch (pressure) value. Declaration public NoteAftertouchEvent(SevenBitNumber noteNumber, SevenBitNumber aftertouchValue) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber aftertouchValue Aftertouch (pressure) value. Properties AftertouchValue Gets or sets aftertouch (pressure) value. Declaration public SevenBitNumber AftertouchValue { get; set; } Property Value Type Description SevenBitNumber NoteNumber Gets or sets note number. Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.NoteEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteEvent.html",
    "title": "Class NoteEvent | DryWetMIDI",
    "keywords": "Class NoteEvent Base class that represents a Note On or a Note Off message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOffEvent NoteOnEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class NoteEvent : ChannelEvent Constructors NoteEvent(MidiEventType) Initializes a new instance of the NoteEvent . Declaration protected NoteEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType NoteEvent(MidiEventType, SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteEvent with the specified note number and velocity. Declaration protected NoteEvent(MidiEventType eventType, SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description MidiEventType eventType The type of event. SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Exceptions Type Condition InvalidEnumArgumentException eventType specified an invalid value. Properties NoteNumber Gets or sets note number. Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Velocity Gets or sets velocity. Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32)"
  },
  "api/Melanchall.DryWetMidi.Core.NoteEventUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteEventUtilities.html",
    "title": "Class NoteEventUtilities | DryWetMIDI",
    "keywords": "Class NoteEventUtilities Set of extension methods for NoteOnEvent and NoteOffEvent events. Inheritance Object NoteEventUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class NoteEventUtilities Methods GetNoteName(NoteEvent) Gets name of the note presented by the specified NoteEvent . Declaration public static NoteName GetNoteName(this NoteEvent noteEvent) Parameters Type Name Description NoteEvent noteEvent Note event to get note name of. Returns Type Description NoteName Note name of the noteEvent . Exceptions Type Condition ArgumentNullException noteEvent is null . GetNoteOctave(NoteEvent) Gets octave of the note presented by the specified NoteOnEvent . Declaration public static int GetNoteOctave(this NoteEvent noteEvent) Parameters Type Name Description NoteEvent noteEvent Note event to get note octave of. Returns Type Description Int32 Note octave of the noteEvent . Remarks Octave number will be returned in scientific pitch notation which means that 4 will be returned for 60 note number. Exceptions Type Condition ArgumentNullException noteEvent is null . IsNoteOnCorrespondToNoteOff(NoteOnEvent, NoteOffEvent) Checks if the specified NoteOnEvent corresponds to the specified NoteOffEvent . Declaration public static bool IsNoteOnCorrespondToNoteOff(NoteOnEvent noteOnEvent, NoteOffEvent noteOffEvent) Parameters Type Name Description NoteOnEvent noteOnEvent NoteOnEvent to check NoteOffEvent for. NoteOffEvent noteOffEvent NoteOffEvent to check NoteOnEvent for. Returns Type Description Boolean true if noteOnEvent corresponds to noteOffEvent . Remarks Note On event corresponds to Note Off one if it has the same note's number and channel, i.e. those events make up a note. Exceptions Type Condition ArgumentNullException One of the following errors occured: noteOnEvent is null . noteOffEvent is null . SetNoteNumber(NoteEvent, NoteName, Int32) Sets the note number of the NoteEvent with the specified note name and octave. Declaration public static void SetNoteNumber(this NoteEvent noteEvent, NoteName noteName, int octave) Parameters Type Name Description NoteEvent noteEvent Note event to set the note number of. NoteName noteName Name of the note. Int32 octave Number of the octave. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to get the number of the middle C. Exceptions Type Condition ArgumentNullException noteEvent is null . InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave."
  },
  "api/Melanchall.DryWetMidi.Core.NotEnoughBytesException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NotEnoughBytesException.html",
    "title": "Class NotEnoughBytesException | DryWetMIDI",
    "keywords": "Class NotEnoughBytesException The exception that is thrown when a MIDI file doesn't contain enough bytes to read a value. Inheritance Object Exception MidiException NotEnoughBytesException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class NotEnoughBytesException : MidiException, ISerializable Remarks Note that this exception will be thrown only if NotEnoughBytesPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties ActualCount Gets the actual count of bytes available in the reader's underlying stream. Declaration public long ActualCount { get; } Property Value Type Description Int64 ExpectedCount Gets the expected count of bytes. Declaration public long ExpectedCount { get; } Property Value Type Description Int64 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NotEnoughBytesPolicy.html",
    "title": "Enum NotEnoughBytesPolicy | DryWetMIDI",
    "keywords": "Enum NotEnoughBytesPolicy Specifies how reading engine should react on lack of bytes in the underlying stream that are needed to read MIDI data (for example, DWORD requires 4 bytes available). The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum NotEnoughBytesPolicy Fields Name Description Abort Abort reading and throw an NotEnoughBytesException . Ignore Ignore lack of bytes in the reader's underlying stream and just finish reading."
  },
  "api/Melanchall.DryWetMidi.Core.NoteOffEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteOffEvent.html",
    "title": "Class NoteOffEvent | DryWetMIDI",
    "keywords": "Class NoteOffEvent Represents a Note Off message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOffEvent Inherited Members NoteEvent.NoteNumber NoteEvent.Velocity ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteOffEvent : NoteEvent Remarks This message is sent when a note is released (ended). Constructors NoteOffEvent() Initializes a new instance of the NoteOffEvent . Declaration public NoteOffEvent() NoteOffEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteOffEvent with the specified note number and velocity. Declaration public NoteOffEvent(SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32)"
  },
  "api/Melanchall.DryWetMidi.Core.NoteOnEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.NoteOnEvent.html",
    "title": "Class NoteOnEvent | DryWetMIDI",
    "keywords": "Class NoteOnEvent Represents a Note On message. Inheritance Object MidiEvent ChannelEvent NoteEvent NoteOnEvent Inherited Members NoteEvent.NoteNumber NoteEvent.Velocity ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteOnEvent : NoteEvent Remarks This message is sent when a note is depressed (start). Constructors NoteOnEvent() Initializes a new instance of the NoteOnEvent . Declaration public NoteOnEvent() NoteOnEvent(SevenBitNumber, SevenBitNumber) Initializes a new instance of the NoteOnEvent with the specified note number and velocity. Declaration public NoteOnEvent(SevenBitNumber noteNumber, SevenBitNumber velocity) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods NoteEventUtilities.GetNoteName(NoteEvent) NoteEventUtilities.GetNoteOctave(NoteEvent) NoteEventUtilities.SetNoteNumber(NoteEvent, NoteName, Int32)"
  },
  "api/Melanchall.DryWetMidi.Core.PitchBendEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.PitchBendEvent.html",
    "title": "Class PitchBendEvent | DryWetMIDI",
    "keywords": "Class PitchBendEvent Represents a Pitch Bend Change message. Inheritance Object MidiEvent ChannelEvent PitchBendEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PitchBendEvent : ChannelEvent Remarks This message is sent to indicate a change in the pitch bender (wheel or lever, typically). The pitch bender is measured by a fourteen bit value. Center (no pitch change) is 0x2000. Constructors PitchBendEvent() Initializes a new instance of the PitchBendEvent . Declaration public PitchBendEvent() PitchBendEvent(UInt16) Initializes a new instance of the PitchBendEvent with the specified pitch value. Declaration public PitchBendEvent(ushort pitchValue) Parameters Type Name Description UInt16 pitchValue Pitch value. Exceptions Type Condition ArgumentOutOfRangeException pitchValue is out of [ MinPitchValue ; MaxPitchValue ] range. Fields MaxPitchValue Represents the largest possible pitch value. Declaration public const ushort MaxPitchValue = 16383 Field Value Type Description UInt16 MinPitchValue Represents the smallest possible pitch value. Declaration public const ushort MinPitchValue = 0 Field Value Type Description UInt16 Properties PitchValue Gets or sets pitch value. Declaration public ushort PitchValue { get; set; } Property Value Type Description UInt16 Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinPitchValue ; MaxPitchValue ] range. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.PortPrefixEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.PortPrefixEvent.html",
    "title": "Class PortPrefixEvent | DryWetMIDI",
    "keywords": "Class PortPrefixEvent Represents a MIDI Port meta event. Inheritance Object MidiEvent MetaEvent PortPrefixEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PortPrefixEvent : MetaEvent Remarks This optional event specifies the MIDI output port on which data within a track chunk will be transmitted. Constructors PortPrefixEvent() Initializes a new instance of the PortPrefixEvent . Declaration public PortPrefixEvent() PortPrefixEvent(Byte) Initializes a new instance of the PortPrefixEvent with the specified port. Declaration public PortPrefixEvent(byte port) Parameters Type Name Description Byte port MIDI port. Properties Port Gets or sets MIDI port. Declaration public byte Port { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.ProgramChangeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ProgramChangeEvent.html",
    "title": "Class ProgramChangeEvent | DryWetMIDI",
    "keywords": "Class ProgramChangeEvent Represents a Program Change message. Inheritance Object MidiEvent ChannelEvent ProgramChangeEvent Inherited Members ChannelEvent.Channel ChannelEvent.ReadDataByte(MidiReader, ReadingSettings) MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ProgramChangeEvent : ChannelEvent Remarks This message sent when the patch number changes. Constructors ProgramChangeEvent() Initializes a new instance of the ProgramChangeEvent . Declaration public ProgramChangeEvent() ProgramChangeEvent(SevenBitNumber) Initializes a new instance of the ProgramChangeEvent with the specified program number. Declaration public ProgramChangeEvent(SevenBitNumber programNumber) Parameters Type Name Description SevenBitNumber programNumber Program number. Properties ProgramNumber Gets or sets program (patch) number. Declaration public SevenBitNumber ProgramNumber { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ProgramNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ProgramNameEvent.html",
    "title": "Class ProgramNameEvent | DryWetMIDI",
    "keywords": "Class ProgramNameEvent Represents a Program Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent ProgramNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ProgramNameEvent : BaseTextEvent Remarks This optional event is used to embed the patch/program name that is called up by the immediately subsequent Bank Select and Program Change messages. It serves to aid the end user in making an intelligent program choice when using different hardware. Constructors ProgramNameEvent() Initializes a new instance of the ProgramNameEvent . Declaration public ProgramNameEvent() ProgramNameEvent(String) Initializes a new instance of the ProgramNameEvent with the specified program name. Declaration public ProgramNameEvent(string programName) Parameters Type Name Description String programName Name of the program. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.ReaderSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ReaderSettings.html",
    "title": "Class ReaderSettings | DryWetMIDI",
    "keywords": "Class ReaderSettings Settings according to which MidiReader should read MIDI data. Inheritance Object ReaderSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ReaderSettings Properties Buffer Gets or sets the buffer that will be used by MidiReader in case of UseCustomBuffer policy used for BufferingPolicy . Declaration public byte[] Buffer { get; set; } Property Value Type Description Byte [] BufferingPolicy Gets or sets a rule according to which MIDI data should be buffered before reading. The default is UseFixedSizeBuffer . Declaration public BufferingPolicy BufferingPolicy { get; set; } Property Value Type Description BufferingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. BufferSize Gets or sets the size of a buffer that will be used by MidiReader in case of UseFixedSizeBuffer policy used for BufferingPolicy . Declaration public int BufferSize { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException value is zero or negative. BytesPacketMaxLength Declaration public int BytesPacketMaxLength { get; set; } Property Value Type Description Int32 NonSeekableStreamBufferSize Gets or sets internal buffer for reading MIDI data from non-seekable stream. Declaration public int NonSeekableStreamBufferSize { get; set; } Property Value Type Description Int32 Remarks During reading MIDI data there are cases when reader should move current stream's position back. If stream doesn't support seeking, it will fail. So for non-seekable stream reading engine should maintain buffer of last N bytes to have ability to jump back. That N value is controlled by this property. Exceptions Type Condition ArgumentOutOfRangeException Value is zero or negative. NonSeekableStreamIncrementalBytesReadingStep Gets or sets size of chunk for incremental reading of MIDI data from non-seekable stream. Declaration public int NonSeekableStreamIncrementalBytesReadingStep { get; set; } Property Value Type Description Int32 Remarks This property works in conjunction with NonSeekableStreamIncrementalBytesReadingThreshold . Exceptions Type Condition ArgumentOutOfRangeException Value is zero or negative. NonSeekableStreamIncrementalBytesReadingThreshold Gets or sets minimum count of bytes to read them from non-seekable stream incrementally instead of reading them all at once. Declaration public int NonSeekableStreamIncrementalBytesReadingThreshold { get; set; } Property Value Type Description Int32 Remarks If count of bytes to read is greater than or equal to the value of this property, reading engine will read data by chunks of N bytes where N is a value of NonSeekableStreamIncrementalBytesReadingStep property. This property applies for non-seekable streams only. Since there is no way to determine available count of bytes within such streams, incremental reading can prevent OutOfMemoryException . Exceptions Type Condition ArgumentOutOfRangeException Value is zero or negative."
  },
  "api/Melanchall.DryWetMidi.Core.ReadingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ReadingSettings.html",
    "title": "Class ReadingSettings | DryWetMIDI",
    "keywords": "Class ReadingSettings Settings according to which MIDI data should be read. Inheritance Object ReadingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public class ReadingSettings Properties CustomChunkTypes Gets or sets collection of custom chunks types. Declaration public ChunkTypesCollection CustomChunkTypes { get; set; } Property Value Type Description ChunkTypesCollection Remarks Types within this collection must be derived from the MidiChunk class and have parameterless constructor. No exception will be thrown if some types don't meet these requirements. CustomMetaEventTypes Gets or sets collection of custom meta events types. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection Remarks Types within this collection must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown if some types don't meet these requirements. DecodeTextCallback Gets or sets a callback used to decode a string from the specified bytes during reading a text-based meta event's text. The default is null . Declaration public DecodeTextCallback DecodeTextCallback { get; set; } Property Value Type Description DecodeTextCallback Remarks If callback is not set, TextEncoding will be used. EndOfTrackStoringPolicy Gets or sets reaction of the reading engine on End Of Track event encountered. The default is Omit . Declaration public EndOfTrackStoringPolicy EndOfTrackStoringPolicy { get; set; } Property Value Type Description EndOfTrackStoringPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ExtraTrackChunkPolicy Gets or sets reaction of the reading engine on new track chunk if already read track chunks count is greater or equals the one declared in the file's header chunk. The default is Read . Declaration public ExtraTrackChunkPolicy ExtraTrackChunkPolicy { get; set; } Property Value Type Description ExtraTrackChunkPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidChannelEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a channel event's parameter value. The default is Abort . Declaration public InvalidChannelEventParameterValuePolicy InvalidChannelEventParameterValuePolicy { get; set; } Property Value Type Description InvalidChannelEventParameterValuePolicy Remarks Valid values are 0-127 so, for example, 128 is the invalid one and will be processed according with this policy. If Abort is used, an instance of the InvalidChannelEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidChunkSizePolicy Gets or sets reaction of the reading engine on difference between actual chunk's size and the one declared in its header. The default is Abort . Declaration public InvalidChunkSizePolicy InvalidChunkSizePolicy { get; set; } Property Value Type Description InvalidChunkSizePolicy Remarks If Abort is used, an instance of the InvalidChunkSizeException will be thrown if actual chunk's size differs from the one declared in chunk's header. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidMetaEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a meta event's parameter value. The default is Abort . Declaration public InvalidMetaEventParameterValuePolicy InvalidMetaEventParameterValuePolicy { get; set; } Property Value Type Description InvalidMetaEventParameterValuePolicy Remarks For example, 255 is the invalid value for the Scale and will be processed according with this policy. If Abort is used, an instance of the InvalidMetaEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. InvalidSystemCommonEventParameterValuePolicy Gets or sets reaction of the reading engine on invalid value of a system common event's parameter value. The default is Abort . Declaration public InvalidSystemCommonEventParameterValuePolicy InvalidSystemCommonEventParameterValuePolicy { get; set; } Property Value Type Description InvalidSystemCommonEventParameterValuePolicy Remarks For example, 255 is the invalid value for the Number and will be processed according with this policy. If Abort is used, an instance of the InvalidSystemCommonEventParameterValueException will be thrown if event's parameter value just read is invalid. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. MissedEndOfTrackPolicy Gets or sets reaction of the reading engine on missed End Of Track event. The default is Ignore . Declaration public MissedEndOfTrackPolicy MissedEndOfTrackPolicy { get; set; } Property Value Type Description MissedEndOfTrackPolicy Remarks If Abort is used, an instance of the MissedEndOfTrackEventException will be thrown if track chunk doesn't end with End Of Track event. Although this event is not optional and therefore missing of it must be treated as error, you can try to read a track chunk relying only on the chunk's size declared in its header. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoHeaderChunkPolicy Gets or sets reaction of the reading engine on missing of the header chunk in the MIDI file. The default is Abort . Declaration public NoHeaderChunkPolicy NoHeaderChunkPolicy { get; set; } Property Value Type Description NoHeaderChunkPolicy Remarks If Abort is used, an instance of the NoHeaderChunkException will be thrown if the MIDI file doesn't contain the header chunk. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NotEnoughBytesPolicy Gets or sets reaction of the reading engine on lack of bytes in the underlying stream that are needed to read MIDI data (for example, DWORD requires 4 bytes available). The default is Abort . Declaration public NotEnoughBytesPolicy NotEnoughBytesPolicy { get; set; } Property Value Type Description NotEnoughBytesPolicy Remarks If Abort is used, an instance of the NotEnoughBytesException will be thrown if the reader's underlying stream doesn't have enough bytes to read MIDI data. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ReaderSettings Gets or sets settings according to which MidiReader should read MIDI data. Declaration public ReaderSettings ReaderSettings { get; set; } Property Value Type Description ReaderSettings Remarks These settings specify reading binary data without knowledge about MIDI data structures. SilentNoteOnPolicy Gets or sets reaction of the reading engine on Note On events with velocity of zero. The default is NoteOff . Declaration public SilentNoteOnPolicy SilentNoteOnPolicy { get; set; } Property Value Type Description SilentNoteOnPolicy Remarks Although it is recommended to treat silent Note On event as Note Off you can turn this behavior off to get original event stored in a MIDI file. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TextEncoding Gets or sets an Encoding that will be used to read the text of a text-based meta events. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding Remarks Value of this property will be used only if DecodeTextCallback is not set. UnexpectedTrackChunksCountPolicy Gets or sets reaction of the reading engine on unexpected track chunks count. The default is Ignore . Declaration public UnexpectedTrackChunksCountPolicy UnexpectedTrackChunksCountPolicy { get; set; } Property Value Type Description UnexpectedTrackChunksCountPolicy Remarks This policy will be taken into account if actual track chunks count is less or greater than tracks number specified in the file's header chunk. If Abort is used, an instance of the UnexpectedTrackChunksCountException will be thrown if track chunks count is unexpected. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. UnknownChannelEventCallback Gets or sets a callback used to read unknown channel event if UnknownChannelEventPolicy set to UseCallback . Declaration public UnknownChannelEventCallback UnknownChannelEventCallback { get; set; } Property Value Type Description UnknownChannelEventCallback UnknownChannelEventPolicy Gets or sets reaction of the reading engine on unknown channel event. The default is Abort . Declaration public UnknownChannelEventPolicy UnknownChannelEventPolicy { get; set; } Property Value Type Description UnknownChannelEventPolicy Remarks If Abort is used, an instance of the UnknownChannelEventException will be thrown if channel event has unknown status byte. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. UnknownChunkIdPolicy Gets or sets reaction of the reading engine on chunk with unknown ID. The default is ReadAsUnknownChunk . Declaration public UnknownChunkIdPolicy UnknownChunkIdPolicy { get; set; } Property Value Type Description UnknownChunkIdPolicy Remarks If Abort is used, an instance of the UnknownChunkException will be thrown if a chunk to be read has unknown ID. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. UnknownFileFormatPolicy Gets or sets reaction of the reading engine on unknown file format stored in a header chunk. The default is Ignore . Declaration public UnknownFileFormatPolicy UnknownFileFormatPolicy { get; set; } Property Value Type Description UnknownFileFormatPolicy Remarks If Abort is used, an instance of the UnknownFileFormatException will be thrown if file format stored in a header chunk doesn't belong to values defined by the MidiFileFormat enumeration. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ZeroLengthDataPolicy Gets or sets reaction of the reading engine on zero-length objects such as strings or arrays. The default is ReadAsEmptyObject . Declaration public ZeroLengthDataPolicy ZeroLengthDataPolicy { get; set; } Property Value Type Description ZeroLengthDataPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Core.ResetEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ResetEvent.html",
    "title": "Class ResetEvent | DryWetMIDI",
    "keywords": "Class ResetEvent Represents Reset event. Inheritance Object MidiEvent SystemRealTimeEvent ResetEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ResetEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI reset message tells a MIDI device to reset itself. Constructors ResetEvent() Initializes a new instance of the ResetEvent . Declaration public ResetEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SequenceNumberEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequenceNumberEvent.html",
    "title": "Class SequenceNumberEvent | DryWetMIDI",
    "keywords": "Class SequenceNumberEvent Represents a Sequence Number meta event. Inheritance Object MidiEvent MetaEvent SequenceNumberEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequenceNumberEvent : MetaEvent Remarks The MIDI sequence number meta message defines the number of a sequence in type 0 and 1 MIDI files, or the pattern number in type 2 MIDI files. Constructors SequenceNumberEvent() Initializes a new instance of the SequenceNumberEvent . Declaration public SequenceNumberEvent() SequenceNumberEvent(UInt16) Initializes a new instance of the SequenceNumberEvent with the specified number of a sequence. Declaration public SequenceNumberEvent(ushort number) Parameters Type Name Description UInt16 number The number of a sequence. Properties Number Gets or sets the number of a sequence. Declaration public ushort Number { get; set; } Property Value Type Description UInt16 Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SequencerSpecificEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequencerSpecificEvent.html",
    "title": "Class SequencerSpecificEvent | DryWetMIDI",
    "keywords": "Class SequencerSpecificEvent Represents a Sequencer Specific meta event. Inheritance Object MidiEvent MetaEvent SequencerSpecificEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequencerSpecificEvent : MetaEvent Remarks The MIDI sequencer specific meta message carries information that is specific to a MIDI sequencer produced by a certain MIDI manufacturer. Constructors SequencerSpecificEvent() Initializes a new instance of the SequencerSpecificEvent . Declaration public SequencerSpecificEvent() SequencerSpecificEvent(Byte[]) Initializes a new instance of the SequencerSpecificEvent with the specified data. Declaration public SequencerSpecificEvent(byte[] data) Parameters Type Name Description Byte [] data Sequencer specific data. Properties Data Gets or sets sequencer specific data. Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Sequencer specific event cannot be read since the size is negative number. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SequenceTrackNameEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SequenceTrackNameEvent.html",
    "title": "Class SequenceTrackNameEvent | DryWetMIDI",
    "keywords": "Class SequenceTrackNameEvent Represents a Sequence/Track Name meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent SequenceTrackNameEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SequenceTrackNameEvent : BaseTextEvent Remarks The MIDI track name meta message defines either the name of a MIDI sequence (when in MIDI type 0 or MIDI type 2 files, or when in the first track of a MIDI type 1 file), or the name of a MIDI track (when in other tracks of a MIDI type 1 file). Constructors SequenceTrackNameEvent() Initializes a new instance of the SequenceTrackNameEvent . Declaration public SequenceTrackNameEvent() SequenceTrackNameEvent(String) Initializes a new instance of the SequenceTrackNameEvent with the specified sequence or track name. Declaration public SequenceTrackNameEvent(string name) Parameters Type Name Description String name Name of a sequence or track. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SetTempoEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SetTempoEvent.html",
    "title": "Class SetTempoEvent | DryWetMIDI",
    "keywords": "Class SetTempoEvent Represents a Set Tempo meta event. Inheritance Object MidiEvent MetaEvent SetTempoEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SetTempoEvent : MetaEvent Remarks The MIDI set tempo meta message sets the tempo of a MIDI sequence in terms of microseconds per quarter note. Constructors SetTempoEvent() Initializes a new instance of the SetTempoEvent . Declaration public SetTempoEvent() SetTempoEvent(Int64) Initializes a new instance of the SetTempoEvent with the specified number of microseconds per quarter note. Declaration public SetTempoEvent(long microsecondsPerQuarterNote) Parameters Type Name Description Int64 microsecondsPerQuarterNote Number of microseconds per quarter note. Exceptions Type Condition ArgumentOutOfRangeException microsecondsPerQuarterNote is out of [ MinMicrosecondsPerQuarterNote ; MaxMicrosecondsPerQuarterNote ] range. Fields DefaultMicrosecondsPerQuarterNote Default tempo. Declaration public const long DefaultMicrosecondsPerQuarterNote = 500000L Field Value Type Description Int64 MaxMicrosecondsPerQuarterNote Represents the largest possible microseconds-per-quarter-note value. Declaration public const long MaxMicrosecondsPerQuarterNote = 16777215L Field Value Type Description Int64 MinMicrosecondsPerQuarterNote Represents the smallest possible microseconds-per-quarter-note value. Declaration public const long MinMicrosecondsPerQuarterNote = 1L Field Value Type Description Int64 Properties MicrosecondsPerQuarterNote Gets or sets number of microseconds per quarter note. Declaration public long MicrosecondsPerQuarterNote { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinMicrosecondsPerQuarterNote ; MaxMicrosecondsPerQuarterNote ] range. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SilentNoteOnPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SilentNoteOnPolicy.html",
    "title": "Enum SilentNoteOnPolicy | DryWetMIDI",
    "keywords": "Enum SilentNoteOnPolicy Specifies how reading engine should react on Note On events with velocity of zero. The default is NoteOff . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum SilentNoteOnPolicy : byte Fields Name Description NoteOff Read an event as NoteOffEvent . NoteOn Read an event as NoteOnEvent ."
  },
  "api/Melanchall.DryWetMidi.Core.SmfConstants.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmfConstants.html",
    "title": "Class SmfConstants | DryWetMIDI",
    "keywords": "Class SmfConstants Constants related to Standard MIDI Files. Inheritance Object SmfConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class SmfConstants Properties DefaultTextEncoding Gets the default Encoding used by Standard MIDI File to encode/decode text data. Declaration public static Encoding DefaultTextEncoding { get; } Property Value Type Description Encoding"
  },
  "api/Melanchall.DryWetMidi.Core.SmpteOffsetEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmpteOffsetEvent.html",
    "title": "Class SmpteOffsetEvent | DryWetMIDI",
    "keywords": "Class SmpteOffsetEvent Represents a SMPTE Offset meta event. Inheritance Object MidiEvent MetaEvent SmpteOffsetEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SmpteOffsetEvent : MetaEvent Remarks The MIDI SMPTE offset meta message specifies an offset for the starting point of a MIDI track from the start of a sequence in terms of SMPTE time (hours:minutes:seconds:frames:subframes). Constructors SmpteOffsetEvent() Initializes a new instance of the SmpteOffsetEvent . Declaration public SmpteOffsetEvent() SmpteOffsetEvent(SmpteFormat, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the SmpteOffsetEvent with the specified SMPE format, hours, minutes, seconds, number of frames and sub-frames. Declaration public SmpteOffsetEvent(SmpteFormat format, byte hours, byte minutes, byte seconds, byte frames, byte subFrames) Parameters Type Name Description SmpteFormat format SMPTE format. Byte hours Number of hours. Byte minutes Number of minutes. Byte seconds Number of seconds. Byte frames Number of frames. Byte subFrames Number of sub-frames. Exceptions Type Condition InvalidEnumArgumentException format specified an invalid value. ArgumentOutOfRangeException One of the following errors occured: hours is out of valid range. minutes is out of valid range. seconds is out of valid range. frames is out of valid range. subFrames is out of valid range. Properties Format Gets or sets SMPTE format. Declaration public SmpteFormat Format { get; set; } Property Value Type Description SmpteFormat Frames Gets or sets number of frames. Declaration public byte Frames { get; set; } Property Value Type Description Byte Remarks Maximum valid value for the Frames depends on the frame rate specified by the Format : 23 for TwentyFour , 24 for TwentyFive , 28 for ThirtyDrop and 29 for Thirty . Exceptions Type Condition ArgumentOutOfRangeException Frames number is out of valid range. Hours Gets or sets number of hours. Declaration public byte Hours { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Hours number is out of valid range (0-23). Minutes Gets or sets number of minutes. Declaration public byte Minutes { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Minutes number is out of valid range (0-59). Seconds Gets or sets number of seconds. Declaration public byte Seconds { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Seconds number is out of valid range (0-59). SubFrames Gets or sets number of sub-frames. Declaration public byte SubFrames { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Sub-frames number is out of valid range (0-99). Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.SmpteTimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SmpteTimeDivision.html",
    "title": "Class SmpteTimeDivision | DryWetMIDI",
    "keywords": "Class SmpteTimeDivision Time division that represents subdivisions of a second, in a way consistent with SMPTE and MIDI time code. Inheritance Object TimeDivision SmpteTimeDivision Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SmpteTimeDivision : TimeDivision Constructors SmpteTimeDivision(SmpteFormat, Byte) Initializes a new instance of the SmpteTimeDivision with the specified format (frame rate) and resoltion. Declaration public SmpteTimeDivision(SmpteFormat format, byte resolution) Parameters Type Name Description SmpteFormat format SMPTE format representing the number of frames per second. Byte resolution Resoltuion within a frame. Exceptions Type Condition InvalidEnumArgumentException format specified an invalid value. Properties Format Gets SMPTE format (frame rate). Declaration public SmpteFormat Format { get; } Property Value Type Description SmpteFormat Resolution Gets resoltion within a frame. Declaration public byte Resolution { get; } Property Value Type Description Byte Methods Clone() Clones time division by creating a copy of it. Declaration public override TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division. Overrides TimeDivision.Clone() Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(SmpteTimeDivision, SmpteTimeDivision) Determines if two SmpteTimeDivision objects are equal. Declaration public static bool operator ==(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2) Parameters Type Name Description SmpteTimeDivision timeDivision1 The first SmpteTimeDivision to compare. SmpteTimeDivision timeDivision2 The second SmpteTimeDivision to compare. Returns Type Description Boolean true if the time divisions are equal, false otherwise. Inequality(SmpteTimeDivision, SmpteTimeDivision) Determines if two SmpteTimeDivision objects are not equal. Declaration public static bool operator !=(SmpteTimeDivision timeDivision1, SmpteTimeDivision timeDivision2) Parameters Type Name Description SmpteTimeDivision timeDivision1 The first SmpteTimeDivision to compare. SmpteTimeDivision timeDivision2 The second SmpteTimeDivision to compare. Returns Type Description Boolean false if the time divisions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Core.SongPositionPointerEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SongPositionPointerEvent.html",
    "title": "Class SongPositionPointerEvent | DryWetMIDI",
    "keywords": "Class SongPositionPointerEvent Represents Song Position Pointer event. Inheritance Object MidiEvent SystemCommonEvent SongPositionPointerEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SongPositionPointerEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI song position pointer message tells a MIDI device to cue to a point in the MIDI sequence to be ready to play. Constructors SongPositionPointerEvent() Initializes a new instance of the SongPositionPointerEvent . Declaration public SongPositionPointerEvent() SongPositionPointerEvent(UInt16) Initializes a new instance of the SongPositionPointerEvent with the specified MSB and LSB parts of the pointer value. Declaration public SongPositionPointerEvent(ushort pointerValue) Parameters Type Name Description UInt16 pointerValue The value of a song position pointer. Properties PointerValue Gets the song position pointer value. Declaration public ushort PointerValue { get; set; } Property Value Type Description UInt16 Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SongSelectEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SongSelectEvent.html",
    "title": "Class SongSelectEvent | DryWetMIDI",
    "keywords": "Class SongSelectEvent Represents Song Select event. Inheritance Object MidiEvent SystemCommonEvent SongSelectEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SongSelectEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI song request message (also known as a \"song select message\") tells a MIDI device to select a sequence for playback. Constructors SongSelectEvent() Initializes a new instance of the SongSelectEvent . Declaration public SongSelectEvent() SongSelectEvent(SevenBitNumber) Initializes a new instance of the SongSelectEvent with the specified song number. Declaration public SongSelectEvent(SevenBitNumber number) Parameters Type Name Description SevenBitNumber number Number of the song to be chosen. Properties Number Gets or sets number of the song to be chosen. Declaration public SevenBitNumber Number { get; set; } Property Value Type Description SevenBitNumber Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.StartEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.StartEvent.html",
    "title": "Class StartEvent | DryWetMIDI",
    "keywords": "Class StartEvent Represents Start event. Inheritance Object MidiEvent SystemRealTimeEvent StartEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class StartEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI start message tells a MIDI slave device to start playback. Constructors StartEvent() Initializes a new instance of the StartEvent . Declaration public StartEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.StopEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.StopEvent.html",
    "title": "Class StopEvent | DryWetMIDI",
    "keywords": "Class StopEvent Represents Stop event. Inheritance Object MidiEvent SystemRealTimeEvent StopEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class StopEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI stop message tells a MIDI slave device to stop playback. Constructors StopEvent() Initializes a new instance of the StopEvent . Declaration public StopEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.SysExEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SysExEvent.html",
    "title": "Class SysExEvent | DryWetMIDI",
    "keywords": "Class SysExEvent Represents a MIDI file system exclusive event. Inheritance Object MidiEvent SysExEvent EscapeSysExEvent NormalSysExEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SysExEvent : MidiEvent Remarks System exclusive events are used to specify a MIDI system exclusive message, either as one unit or in packets, or as an \"escape\" to specify any arbitrary bytes to be transmitted. Constructors SysExEvent(MidiEventType) Initializes a new instance of the SysExEvent with the specified event type. Declaration protected SysExEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event. Fields EndOfEventByte The value indicating the end of a system exclusive event. Declaration public const byte EndOfEventByte = 247 Field Value Type Description Byte Properties Completed Gets a value indicating whether this sytem exclusive event is completed or not. Declaration public bool Completed { get; } Property Value Type Description Boolean Data Gets or sets the event's data. Declaration public byte[] Data { get; set; } Property Value Type Description Byte []"
  },
  "api/Melanchall.DryWetMidi.Core.SystemCommonEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SystemCommonEvent.html",
    "title": "Class SystemCommonEvent | DryWetMIDI",
    "keywords": "Class SystemCommonEvent Represents a system common event. Inheritance Object MidiEvent SystemCommonEvent MidiTimeCodeEvent SongPositionPointerEvent SongSelectEvent TuneRequestEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SystemCommonEvent : MidiEvent Remarks MIDI system common messages are those MIDI messages that prompt all devices on the MIDI system to respond (are not specific to a MIDI channel), but do not require an immediate response from the receiving MIDI devices. Constructors SystemCommonEvent(MidiEventType) Initializes a new instance of the SystemCommonEvent with the specified event type. Declaration protected SystemCommonEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event."
  },
  "api/Melanchall.DryWetMidi.Core.SystemRealTimeEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.SystemRealTimeEvent.html",
    "title": "Class SystemRealTimeEvent | DryWetMIDI",
    "keywords": "Class SystemRealTimeEvent Represents a system real-time event. Inheritance Object MidiEvent SystemRealTimeEvent ActiveSensingEvent ContinueEvent ResetEvent StartEvent StopEvent TimingClockEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.CloneEvent() MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class SystemRealTimeEvent : MidiEvent Remarks MIDI system realtime messages are messages that are not specific to a MIDI channel but prompt all devices on the MIDI system to respond and to do so in real time. Constructors SystemRealTimeEvent(MidiEventType) Initializes a new instance of the SystemRealTimeEvent with the specified event type. Declaration protected SystemRealTimeEvent(MidiEventType eventType) Parameters Type Name Description MidiEventType eventType The type of event."
  },
  "api/Melanchall.DryWetMidi.Core.TextEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TextEvent.html",
    "title": "Class TextEvent | DryWetMIDI",
    "keywords": "Class TextEvent Represents a Text meta event. Inheritance Object MidiEvent MetaEvent BaseTextEvent TextEvent Inherited Members BaseTextEvent.Text BaseTextEvent.ReadContent(MidiReader, ReadingSettings, Int32) BaseTextEvent.WriteContent(MidiWriter, WritingSettings) BaseTextEvent.GetContentSize(WritingSettings) MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TextEvent : BaseTextEvent Remarks The MIDI text meta message defines some text to be carried within a MIDI file. Constructors TextEvent() Initializes a new instance of the TextEvent . Declaration public TextEvent() TextEvent(String) Initializes a new instance of the TextEvent with the specified text. Declaration public TextEvent(string text) Parameters Type Name Description String text Text of the message. Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TicksPerQuarterNoteTimeDivision.html",
    "title": "Class TicksPerQuarterNoteTimeDivision | DryWetMIDI",
    "keywords": "Class TicksPerQuarterNoteTimeDivision Time division that represents number of delta-time \"ticks\" which make up a quarter-note. Inheritance Object TimeDivision TicksPerQuarterNoteTimeDivision Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TicksPerQuarterNoteTimeDivision : TimeDivision Constructors TicksPerQuarterNoteTimeDivision() Initializes a new instance of the TicksPerQuarterNoteTimeDivision . Declaration public TicksPerQuarterNoteTimeDivision() TicksPerQuarterNoteTimeDivision(Int16) Initializes a new instance of the TicksPerQuarterNoteTimeDivision with the specified ticks number per a quarter-note. Declaration public TicksPerQuarterNoteTimeDivision(short ticksPerQuarterNote) Parameters Type Name Description Int16 ticksPerQuarterNote Number of ticks which make up a quarter-note. Exceptions Type Condition ArgumentOutOfRangeException ticksPerQuarterNote is negative. Fields DefaultTicksPerQuarterNote Default number of ticks which make up a quarter-note. Declaration public const short DefaultTicksPerQuarterNote = 96 Field Value Type Description Int16 Properties TicksPerQuarterNote Gets or sets number of ticks which make up a quarter-note. Declaration public short TicksPerQuarterNote { get; } Property Value Type Description Int16 Methods Clone() Clones time division by creating a copy of it. Declaration public override TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division. Overrides TimeDivision.Clone() Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(TicksPerQuarterNoteTimeDivision, TicksPerQuarterNoteTimeDivision) Determines if two TicksPerQuarterNoteTimeDivision objects are equal. Declaration public static bool operator ==(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2) Parameters Type Name Description TicksPerQuarterNoteTimeDivision timeDivision1 The first TicksPerQuarterNoteTimeDivision to compare. TicksPerQuarterNoteTimeDivision timeDivision2 The second TicksPerQuarterNoteTimeDivision to compare. Returns Type Description Boolean true if the time divisions are equal, false otherwise. Inequality(TicksPerQuarterNoteTimeDivision, TicksPerQuarterNoteTimeDivision) Determines if two TicksPerQuarterNoteTimeDivision objects are not equal. Declaration public static bool operator !=(TicksPerQuarterNoteTimeDivision timeDivision1, TicksPerQuarterNoteTimeDivision timeDivision2) Parameters Type Name Description TicksPerQuarterNoteTimeDivision timeDivision1 The first TicksPerQuarterNoteTimeDivision to compare. TicksPerQuarterNoteTimeDivision timeDivision2 The second TicksPerQuarterNoteTimeDivision to compare. Returns Type Description Boolean false if the time divisions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.Core.TimeDivision.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimeDivision.html",
    "title": "Class TimeDivision | DryWetMIDI",
    "keywords": "Class TimeDivision MIDI file time division. Inheritance Object TimeDivision SmpteTimeDivision TicksPerQuarterNoteTimeDivision Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class TimeDivision Remarks Time division specifies the meaning of the delta-times of events. There are two types of the time division: ticks per quarter note and SMPTE. Time division of the first type has bit 15 set to 0. In this case bits 14 thru 0 represent the number of ticks which make up a quarter-note. Division of the second type has bit 15 set to 1. In this case bits 14 thru 8 contain one of the four values: -24, -25, -29, or -30, corresponding to the four standard SMPTE and MIDI Time Code formats (-29 corresponds to 30 drop frame), and represents the number of frames per second. Bits 7 thru 0 (which represent a byte stored positive) is the resolution within a frame: typical values may be 4 (MIDI Time Code resolution), 8, 10, 80 (bit resolution), or 100. Methods Clone() Clones time division by creating a copy of it. Declaration public abstract TimeDivision Clone() Returns Type Description TimeDivision Copy of the time division."
  },
  "api/Melanchall.DryWetMidi.Core.TimeSignatureEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimeSignatureEvent.html",
    "title": "Class TimeSignatureEvent | DryWetMIDI",
    "keywords": "Class TimeSignatureEvent Represents a Time Signature meta event. Inheritance Object MidiEvent MetaEvent TimeSignatureEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSignatureEvent : MetaEvent Remarks The MIDI time signature meta message defines the musical time signature of a MIDI sequence. Constructors TimeSignatureEvent() Initializes a new instance of the TimeSignatureEvent . Declaration public TimeSignatureEvent() TimeSignatureEvent(Byte, Byte) Initializes a new instance of the TimeSignatureEvent with the specified numerator and denominator. Declaration public TimeSignatureEvent(byte numerator, byte denominator) Parameters Type Name Description Byte numerator Numerator of the time signature. Byte denominator Denominator of the time signature. Exceptions Type Condition ArgumentOutOfRangeException denominator is zero or is not a power of two. TimeSignatureEvent(Byte, Byte, Byte, Byte) Initializes a new instance of the TimeSignatureEvent with the specified numerator, denominator, number of MIDI clocks per metronome click and number of 32nd notes per beat. Declaration public TimeSignatureEvent(byte numerator, byte denominator, byte clocksPerClick, byte thirtySecondNotesPerBeat) Parameters Type Name Description Byte numerator Numerator of the time signature. Byte denominator Denominator of the time signature. Byte clocksPerClick Number of MIDI clocks per metronome click. Byte thirtySecondNotesPerBeat Number of 32nd notes per beat. Exceptions Type Condition ArgumentOutOfRangeException denominator is zero or is not a power of two. Fields DefaultClocksPerClick Default number of MIDI clock ticks per metronome click. Declaration public const byte DefaultClocksPerClick = 24 Field Value Type Description Byte DefaultDenominator Denominator of the default time signature. Declaration public const byte DefaultDenominator = 4 Field Value Type Description Byte DefaultNumerator Numerator of the default time signature. Declaration public const byte DefaultNumerator = 4 Field Value Type Description Byte DefaultThirtySecondNotesPerBeat Default number of 32nd notes per beat. Declaration public const byte DefaultThirtySecondNotesPerBeat = 8 Field Value Type Description Byte Properties ClocksPerClick Gets or sets number of MIDI clock ticks per metronome click. Declaration public byte ClocksPerClick { get; set; } Property Value Type Description Byte Denominator Gets or sets denominator of the time signature. Declaration public byte Denominator { get; set; } Property Value Type Description Byte Exceptions Type Condition ArgumentOutOfRangeException Denominator is zero or is not a power of two. Numerator Gets or sets numerator of the time signature. Declaration public byte Numerator { get; set; } Property Value Type Description Byte ThirtySecondNotesPerBeat Gets or sets number of 32nd notes per beat. Declaration public byte ThirtySecondNotesPerBeat { get; set; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.TimingClockEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TimingClockEvent.html",
    "title": "Class TimingClockEvent | DryWetMIDI",
    "keywords": "Class TimingClockEvent Represents Timing Clock event. Inheritance Object MidiEvent SystemRealTimeEvent TimingClockEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimingClockEvent : SystemRealTimeEvent Remarks A MIDI event that carries the MIDI clock message keeps a slave MIDI device synchronized with a master MIDI device. The MIDI clock message is a timing message that the master device sends at regular intervals to tell the slave device where it is in terms of time. Constructors TimingClockEvent() Initializes a new instance of the TimingClockEvent . Declaration public TimingClockEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.TooManyTrackChunksException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TooManyTrackChunksException.html",
    "title": "Class TooManyTrackChunksException | DryWetMIDI",
    "keywords": "Class TooManyTrackChunksException The exception that is thrown while writing a MIDI file when the Chunks contains more than MaxValue track chunks which is the maximum allowed count for chunks of this type. Inheritance Object Exception MidiException TooManyTrackChunksException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class TooManyTrackChunksException : MidiException, ISerializable Properties TrackChunksCount Gets the actual track chunks count. Declaration public int TrackChunksCount { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.TrackChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TrackChunk.html",
    "title": "Class TrackChunk | DryWetMIDI",
    "keywords": "Class TrackChunk Represents a track chunk of a standard MIDI file. Inheritance Object MidiChunk TrackChunk Inherited Members MidiChunk.IdLength MidiChunk.ChunkId MidiChunk.GetStandardChunkIds() MidiChunk.Equals(MidiChunk, MidiChunk) MidiChunk.Equals(MidiChunk, MidiChunk, String) MidiChunk.Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings) MidiChunk.Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TrackChunk : MidiChunk Remarks See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Constructors TrackChunk() Initializes a new instance of the TrackChunk . Declaration public TrackChunk() TrackChunk(MidiEvent[]) Initializes a new instance of the TrackChunk with the specified events. Declaration public TrackChunk(params MidiEvent[] events) Parameters Type Name Description MidiEvent [] events Events to add to the track chunk. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null . ArgumentException events contain an instance of EndOfTrackEvent ; or events contain null . TrackChunk(IEnumerable<MidiEvent>) Initializes a new instance of the TrackChunk with the specified events. Declaration public TrackChunk(IEnumerable<MidiEvent> events) Parameters Type Name Description IEnumerable < MidiEvent > events Events to add to the track chunk. Remarks Note that End Of Track events cannot be added into the collection since it may cause inconsistence in a track chunk structure. End Of Track event will be written to the track chunk automatically on Write(String, Boolean, MidiFileFormat, WritingSettings) . Exceptions Type Condition ArgumentNullException events is null . Fields Id ID of the track chunk. This field is constsnt. Declaration public const string Id = \"MTrk\" Field Value Type Description String Properties Events Gets the collection of events contained in the track chunk. Declaration public EventsCollection Events { get; } Property Value Type Description EventsCollection Methods Clone() Clones chunk by creating a copy of it. Declaration public override MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. Overrides MidiChunk.Clone() GetContentSize(WritingSettings) Gets size of TrackChunk 's content as number of bytes required to write it according to specified WritingSettings . Declaration protected override uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write TrackChunk 's content. Overrides MidiChunk.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a TrackChunk . Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. Overrides MidiChunk.ReadContent(MidiReader, ReadingSettings, UInt32) Remarks Content of a TrackChunk is collection of MIDI events. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream. UnexpectedRunningStatusException Unexpected running status is encountered. UnknownChannelEventException Reader has encountered an unknown channel event. NotEnoughBytesException Not enough bytes to read an event. InvalidChannelEventParameterValueException Value of a channel event's parameter just read is invalid. MissedEndOfTrackEventException Track chunk doesn't end with End Of Track event. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a TrackChunk . Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written. Overrides MidiChunk.WriteContent(MidiWriter, WritingSettings) Remarks Content of a TrackChunk is collection of MIDI events. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream. Extension Methods TrackChunkUtilities.Explode(TrackChunk) TrackChunkUtilities.GetChannels(TrackChunk) ChordsManagingUtilities.ManageChords(TrackChunk, ChordDetectionSettings, TimedObjectsComparer) ChordsManagingUtilities.GetChords(TrackChunk, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(TrackChunk, Action<Chord>, ChordDetectionSettings) ChordsManagingUtilities.ProcessChords(TrackChunk, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(TrackChunk, ChordDetectionSettings) ChordsManagingUtilities.RemoveChords(TrackChunk, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities.GetObjects(TrackChunk, ObjectType, ObjectDetectionSettings) NotesManagingUtilities.ManageNotes(TrackChunk, NoteDetectionSettings, TimedObjectsComparer) NotesManagingUtilities.GetNotes(TrackChunk, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(TrackChunk, Action<Note>, NoteDetectionSettings) NotesManagingUtilities.ProcessNotes(TrackChunk, Action<Note>, Predicate<Note>, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(TrackChunk, NoteDetectionSettings) NotesManagingUtilities.RemoveNotes(TrackChunk, Predicate<Note>, NoteDetectionSettings) TimedEventsManagingUtilities.ManageTimedEvents(TrackChunk, TimedEventDetectionSettings, TimedObjectsComparer) TimedEventsManagingUtilities.GetTimedEvents(TrackChunk, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(TrackChunk, Action<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.ProcessTimedEvents(TrackChunk, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) TimedEventsManagingUtilities.RemoveTimedEvents(TrackChunk) TimedEventsManagingUtilities.RemoveTimedEvents(TrackChunk, Predicate<TimedEvent>, TimedEventDetectionSettings) TimedObjectUtilities.AddObjects(TrackChunk, IEnumerable<ITimedObject>) MidiFileUtilities.GetDuration<TTimeSpan>(TrackChunk, TempoMap) MidiFileUtilities.GetDuration(TrackChunk, TimeSpanType, TempoMap) TrackChunkUtilities.ShiftEvents(TrackChunk, ITimeSpan, TempoMap) PlaybackUtilities.GetPlayback(TrackChunk, TempoMap, IOutputDevice, PlaybackSettings) PlaybackUtilities.GetPlayback(TrackChunk, TempoMap, PlaybackSettings) PlaybackUtilities.Play(TrackChunk, TempoMap, IOutputDevice, PlaybackSettings) ChordsSplitterUtilities.SplitChordsByStep(TrackChunk, ITimeSpan, TempoMap, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsByGrid(TrackChunk, IGrid, TempoMap, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, ChordDetectionSettings) ChordsSplitterUtilities.SplitChordsAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ChordDetectionSettings) NotesSplitterUtilities.SplitNotesByStep(TrackChunk, ITimeSpan, TempoMap, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesByGrid(TrackChunk, IGrid, TempoMap, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, NoteDetectionSettings) NotesSplitterUtilities.SplitNotesAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, NoteDetectionSettings) Merger.MergeObjects(TrackChunk, ObjectType, TempoMap, ObjectsMergingSettings, ObjectDetectionSettings) NotesMergerUtilities.MergeNotes(TrackChunk, TempoMap, NotesMergingSettings) QuantizerUtilities.QuantizeObjects(TrackChunk, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) QuantizerUtilities.QuantizeObjects(TrackChunk, Quantizer, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) ChordsQuantizerUtilities.QuantizeChords(TrackChunk, IGrid, TempoMap, ChordsQuantizingSettings) NotesQuantizerUtilities.QuantizeNotes(TrackChunk, IGrid, TempoMap, NotesQuantizingSettings) TimedEventsQuantizerUtilities.QuantizeTimedEvents(TrackChunk, IGrid, TempoMap, TimedEventsQuantizingSettings) ChordsRandomizerUtilities.RandomizeChords(TrackChunk, IBounds, TempoMap, ChordsRandomizingSettings) NotesRandomizerUtilities.RandomizeNotes(TrackChunk, IBounds, TempoMap, NotesRandomizingSettings) TimedEventsRandomizerUtilities.RandomizeTimedEvents(TrackChunk, IBounds, TempoMap, TimedEventsRandomizingSettings) RepeaterUtilities.Repeat(TrackChunk, Int32, TempoMap, RepeatingSettings) Resizer.Resize(TrackChunk, ITimeSpan, TempoMap) Resizer.Resize(TrackChunk, Double) Splitter.SplitObjectsAtDistance(TrackChunk, ObjectType, ITimeSpan, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splitter.SplitObjectsAtDistance(TrackChunk, ObjectType, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splitter.SplitObjectsByGrid(TrackChunk, ObjectType, IGrid, TempoMap, ObjectDetectionSettings) Splitter.SplitObjectsByPartsNumber(TrackChunk, ObjectType, Int32, TimeSpanType, TempoMap, ObjectDetectionSettings) Splitter.SplitObjectsByStep(TrackChunk, ObjectType, ITimeSpan, TempoMap, ObjectDetectionSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.TrackChunkUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TrackChunkUtilities.html",
    "title": "Class TrackChunkUtilities | DryWetMIDI",
    "keywords": "Class TrackChunkUtilities Provides extension methods for TrackChunk . Inheritance Object TrackChunkUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public static class TrackChunkUtilities Methods Explode(TrackChunk) Splits a track chunk into multiple ones that correspond to MultiTrack . Declaration public static IEnumerable<TrackChunk> Explode(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk Track chunk to split into multiple ones. Returns Type Description IEnumerable < TrackChunk > Multiple track chunks that represent trackChunk . Remarks Note that events will be cloned so events in the result track chunks will not be equal by reference to events in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null . GetChannels(TrackChunk) Gets all channel numbers presented in the specified TrackChunk . Declaration public static IEnumerable<FourBitNumber> GetChannels(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null . GetChannels(IEnumerable<TrackChunk>) Gets all channel numbers presented in the specified collection of TrackChunk . Declaration public static IEnumerable<FourBitNumber> GetChannels(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to get channels of. Returns Type Description IEnumerable < FourBitNumber > Collection of channel numbers presented in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null . GetTrackChunks(MidiFile) Gets all track chunks of a MIDI file. Declaration public static IEnumerable<TrackChunk> GetTrackChunks(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MIDI file to get track chunks of. Returns Type Description IEnumerable < TrackChunk > Collection of track chunks contained in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null . Merge(IEnumerable<TrackChunk>) Merges multiple track chunks into one that corresponds to SingleTrack . Declaration public static TrackChunk Merge(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to merge into one. Returns Type Description TrackChunk Track chunk that containes all events from the trackChunks . Remarks Note that events will be cloned so events in the result track chunk will not be equal by reference to events in the trackChunks . Exceptions Type Condition ArgumentNullException trackChunks is null ."
  },
  "api/Melanchall.DryWetMidi.Core.TuneRequestEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.TuneRequestEvent.html",
    "title": "Class TuneRequestEvent | DryWetMIDI",
    "keywords": "Class TuneRequestEvent Represents Tune Request event. Inheritance Object MidiEvent SystemCommonEvent TuneRequestEvent Inherited Members MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TuneRequestEvent : SystemCommonEvent Remarks A MIDI event that carries the MIDI tune request message tells a MIDI device to tune itself. Constructors TuneRequestEvent() Initializes a new instance of the TuneRequestEvent . Declaration public TuneRequestEvent() Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString()"
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedRunningStatusException.html",
    "title": "Class UnexpectedRunningStatusException | DryWetMIDI",
    "keywords": "Class UnexpectedRunningStatusException The exception that is thrown when the reading engine encountered unexpected running status. Inheritance Object Exception MidiException UnexpectedRunningStatusException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnexpectedRunningStatusException : MidiException, ISerializable Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountException.html",
    "title": "Class UnexpectedTrackChunksCountException | DryWetMIDI",
    "keywords": "Class UnexpectedTrackChunksCountException The exception that is thrown when count of track chunks in a MIDI file differs from the one declared in the header chunk of this file. Inheritance Object Exception MidiException UnexpectedTrackChunksCountException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnexpectedTrackChunksCountException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnexpectedTrackChunksCountPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties ActualCount Gets the actual count of track chunks read from a MIDI file. Declaration public int ActualCount { get; } Property Value Type Description Int32 ExpectedCount Gets the expected count of track chunks read from the header chunk. Declaration public int ExpectedCount { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnexpectedTrackChunksCountPolicy.html",
    "title": "Enum UnexpectedTrackChunksCountPolicy | DryWetMIDI",
    "keywords": "Enum UnexpectedTrackChunksCountPolicy Specifies how reading engine should react on unexpected track chunks count. The default is Ignore . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnexpectedTrackChunksCountPolicy Fields Name Description Abort Abort reading and throw an UnexpectedTrackChunksCountException . Ignore Ignore unexpected track chunks count."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventAction.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventAction.html",
    "title": "Class UnknownChannelEventAction | DryWetMIDI",
    "keywords": "Class UnknownChannelEventAction An action that should be done in case of unknown channel event. Inheritance Object UnknownChannelEventAction Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnknownChannelEventAction Fields Abort Abort reading of MIDI data and throw UnknownChannelEventException . Declaration public static readonly UnknownChannelEventAction Abort Field Value Type Description UnknownChannelEventAction Properties DataBytesToSkipCount Gets count of data bytes to skip be reading engine. Data bytes are event bytes without status byte. Declaration public int DataBytesToSkipCount { get; } Property Value Type Description Int32 Instruction Gets instruction for reading engine to react on unknown channel event. Declaration public UnknownChannelEventInstruction Instruction { get; } Property Value Type Description UnknownChannelEventInstruction Methods SkipData(Int32) Creates an instance of the UnknownChannelEventAction to skip data bytes of unknown channel event. Declaration public static UnknownChannelEventAction SkipData(int dataBytesToSkipCount) Parameters Type Name Description Int32 dataBytesToSkipCount Count of data bytes to skip be reading engine. Data bytes are event bytes without status byte. Returns Type Description UnknownChannelEventAction an instance of the UnknownChannelEventAction to skip data bytes of unknown channel event. Exceptions Type Condition ArgumentOutOfRangeException dataBytesToSkipCount is negative."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventCallback.html",
    "title": "Delegate UnknownChannelEventCallback | DryWetMIDI",
    "keywords": "Delegate UnknownChannelEventCallback Callback used to read unknown channel event if UnknownChannelEventPolicy set to UseCallback . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public delegate UnknownChannelEventAction UnknownChannelEventCallback(FourBitNumber statusByte, FourBitNumber channel); Parameters Type Name Description FourBitNumber statusByte Status byte of channel event. FourBitNumber channel Channel of event. Returns Type Description UnknownChannelEventAction An instance of the UnknownChannelEventAction representing an action to perform."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventException.html",
    "title": "Class UnknownChannelEventException | DryWetMIDI",
    "keywords": "Class UnknownChannelEventException The exception that is thrown when the reading engine encountered unknown channel event. Inheritance Object Exception MidiException UnknownChannelEventException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownChannelEventException : MidiException, ISerializable Properties Channel Gets the channel of an unknown channel event. Declaration public FourBitNumber Channel { get; } Property Value Type Description FourBitNumber StatusByte Gets the status byte of an unknown channel event. Declaration public FourBitNumber StatusByte { get; } Property Value Type Description FourBitNumber Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventInstruction.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventInstruction.html",
    "title": "Enum UnknownChannelEventInstruction | DryWetMIDI",
    "keywords": "Enum UnknownChannelEventInstruction Instruction for reading engine which tells how unknown channel event should be handled. Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownChannelEventInstruction Fields Name Description Abort Abort reading and throw UnknownChannelEventException . SkipData Skip data bytes."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChannelEventPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChannelEventPolicy.html",
    "title": "Enum UnknownChannelEventPolicy | DryWetMIDI",
    "keywords": "Enum UnknownChannelEventPolicy Specifies how reading engine should react on unknown channel event. The default is Abort . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownChannelEventPolicy Fields Name Description Abort Abort reading and throw an UnknownChannelEventException . SkipStatusByte Skip only invalid status byte and start next MIDI event reading. SkipStatusByteAndOneDataByte Skip invalid status byte and one data byte, and start next MIDI event reading. SkipStatusByteAndTwoDataBytes Skip invalid status byte and two data bytes, and start next MIDI event reading. UseCallback Use callback to manually decide how reading engine should handle invalid unknown channel event."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunk.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunk.html",
    "title": "Class UnknownChunk | DryWetMIDI",
    "keywords": "Class UnknownChunk Represents an unknown chunk. Inheritance Object MidiChunk UnknownChunk Inherited Members MidiChunk.IdLength MidiChunk.ChunkId MidiChunk.GetStandardChunkIds() MidiChunk.Equals(MidiChunk, MidiChunk) MidiChunk.Equals(MidiChunk, MidiChunk, String) MidiChunk.Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings) MidiChunk.Equals(MidiChunk, MidiChunk, MidiChunkEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnknownChunk : MidiChunk Remarks Structure of MIDI file chunks allows custom chunks be implemented and written to a MIDI file. Chunks DryWetMIDI doesn't know about will be read as an instances of the UnknownChunk . See https://www.midi.org/specifications/file-format-specifications/standard-midi-files for detailed MIDI file specification. Properties Data Gets data contained in the current UnknownChunk . Declaration public byte[] Data { get; } Property Value Type Description Byte [] Methods Clone() Clones chunk by creating a copy of it. Declaration public override MidiChunk Clone() Returns Type Description MidiChunk Copy of the chunk. Overrides MidiChunk.Clone() GetContentSize(WritingSettings) Gets size of UnknownChunk 's content as number of bytes required to write it according to the specified WritingSettings . Declaration protected override uint GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the chunk's content will be written. Returns Type Description UInt32 Number of bytes required to write UnknownChunk 's content. Overrides MidiChunk.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, UInt32) Reads content of a UnknownChunk . Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) Parameters Type Name Description MidiReader reader Reader to read the chunk's content with. ReadingSettings settings Settings according to which the chunk's content must be read. UInt32 size Expected size of the content taken from the chunk's header. Overrides MidiChunk.ReadContent(MidiReader, ReadingSettings, UInt32) Remarks Content of an UnknownChunk is array of bytes. Exceptions Type Condition ObjectDisposedException Method was called after the reader's underlying stream was disposed. IOException An I/O error occurred on the reader's underlying stream. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a UnknownChunk . Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the chunk's content with. WritingSettings settings Settings according to which the chunk's content must be written. Overrides MidiChunk.WriteContent(MidiWriter, WritingSettings) Remarks Content of an UnknownChunk is array of bytes. Exceptions Type Condition ObjectDisposedException Method was called after the writer's underlying stream was disposed. IOException An I/O error occurred on the writer's underlying stream."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunkException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunkException.html",
    "title": "Class UnknownChunkException | DryWetMIDI",
    "keywords": "Class UnknownChunkException The exception that is thrown when the reading engine encountered a chunk with unknown ID. Inheritance Object Exception MidiException UnknownChunkException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownChunkException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnknownChunkIdPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties ChunkId Gets the ID of an unknown chunk. Declaration public string ChunkId { get; } Property Value Type Description String Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownChunkIdPolicy.html",
    "title": "Enum UnknownChunkIdPolicy | DryWetMIDI",
    "keywords": "Enum UnknownChunkIdPolicy Specifies how reading engine should react on chunk with unknown ID. The default is ReadAsUnknownChunk . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownChunkIdPolicy : byte Fields Name Description Abort Abort reading and throw an UnknownChunkException . ReadAsUnknownChunk Read the chunk as UnknownChunk . Skip Skip this chunk and go to the next one."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownFileFormatException.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownFileFormatException.html",
    "title": "Class UnknownFileFormatException | DryWetMIDI",
    "keywords": "Class UnknownFileFormatException The exception that is thrown when a MIDI file format is unknown. Inheritance Object Exception MidiException UnknownFileFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class UnknownFileFormatException : MidiException, ISerializable Remarks Note that this exception will be thrown only if UnknownFileFormatPolicy is set to Abort for the ReadingSettings used for reading a MIDI file. Properties FileFormat Gets the number that represents format of a MIDI file. Declaration public ushort FileFormat { get; } Property Value Type Description UInt16 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownFileFormatPolicy.html",
    "title": "Enum UnknownFileFormatPolicy | DryWetMIDI",
    "keywords": "Enum UnknownFileFormatPolicy Specifies how reading engine should react on file format which doesn't belong to the MidiFileFormat . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum UnknownFileFormatPolicy Fields Name Description Abort Abort reading and throw an UnknownFileFormatException . Ignore Ignore unknown file format and try to read chunks."
  },
  "api/Melanchall.DryWetMidi.Core.UnknownMetaEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Core.UnknownMetaEvent.html",
    "title": "Class UnknownMetaEvent | DryWetMIDI",
    "keywords": "Class UnknownMetaEvent Represents an unknown meta event. Inheritance Object MidiEvent MetaEvent UnknownMetaEvent Inherited Members MetaEvent.GetStandardMetaEventStatusBytes() MidiEvent.UnknownContentSize MidiEvent.EventType MidiEvent.DeltaTime MidiEvent.Clone() MidiEvent.Equals(MidiEvent, MidiEvent) MidiEvent.Equals(MidiEvent, MidiEvent, String) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings) MidiEvent.Equals(MidiEvent, MidiEvent, MidiEventEqualityCheckSettings, String) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class UnknownMetaEvent : MetaEvent Remarks Structure of meta eventa allows custom ones be implemented and stored within a MIDI file. Any meta event DryWetMIDI doesn't know about will be read as an instance of the UnknownMetaEvent . Properties Data Gets the content of the meta event as array of bytes. Declaration public byte[] Data { get; } Property Value Type Description Byte [] StatusByte Gets the status byte of the meta event. Declaration public byte StatusByte { get; } Property Value Type Description Byte Methods CloneEvent() Clones event by creating a copy of it. Declaration protected override MidiEvent CloneEvent() Returns Type Description MidiEvent Copy of the event. Overrides MidiEvent.CloneEvent() GetContentSize(WritingSettings) Gets the size of the content of a MIDI meta event. Declaration protected override int GetContentSize(WritingSettings settings) Parameters Type Name Description WritingSettings settings Settings according to which the event's content must be written. Returns Type Description Int32 Size of the event's content. Overrides MetaEvent.GetContentSize(WritingSettings) ReadContent(MidiReader, ReadingSettings, Int32) Reads content of a MIDI meta event. Declaration protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) Parameters Type Name Description MidiReader reader Reader to read the content with. ReadingSettings settings Settings according to which the event's content must be read. Int32 size Size of the event's content. Overrides MetaEvent.ReadContent(MidiReader, ReadingSettings, Int32) Exceptions Type Condition ArgumentOutOfRangeException Unknown meta event cannot be read since the size is negative number. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() WriteContent(MidiWriter, WritingSettings) Writes content of a MIDI meta event. Declaration protected override void WriteContent(MidiWriter writer, WritingSettings settings) Parameters Type Name Description MidiWriter writer Writer to write the content with. WritingSettings settings Settings according to which the event's content must be written. Overrides MetaEvent.WriteContent(MidiWriter, WritingSettings)"
  },
  "api/Melanchall.DryWetMidi.Core.WriterSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.WriterSettings.html",
    "title": "Class WriterSettings | DryWetMIDI",
    "keywords": "Class WriterSettings Settings according to which MidiWriter should write MIDI data. Inheritance Object WriterSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class WriterSettings Properties BufferSize Gets or sets the size of a buffer that will be used by MidiWriter in case of UseBuffering set to true . Declaration public int BufferSize { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException value is zero or negative. UseBuffering Gets or sets a value indicating whether MidiWriter should use buffer to write MIDI data or not. The default value is true . Declaration public bool UseBuffering { get; set; } Property Value Type Description Boolean"
  },
  "api/Melanchall.DryWetMidi.Core.WritingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Core.WritingSettings.html",
    "title": "Class WritingSettings | DryWetMIDI",
    "keywords": "Class WritingSettings Settings according to which MIDI data should be written. Inheritance Object WritingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public class WritingSettings Properties CustomMetaEventTypes Gets or sets collection of custom meta events types. Declaration public EventTypesCollection CustomMetaEventTypes { get; set; } Property Value Type Description EventTypesCollection Remarks Types within this collection must be derived from the MetaEvent class and have parameterless constructor. No exception will be thrown while writing a MIDI file if some types don't meet these requirements. DeleteDefaultKeySignature Gets or sets a value indicating whether Key Signature events with default data should be deleted if there are no non-default ones before them, or not. The default value is false . Declaration public bool DeleteDefaultKeySignature { get; set; } Property Value Type Description Boolean DeleteDefaultSetTempo Gets or sets a value indicating whether Set Tempo events with default data should be deleted if there are no non-default ones before them, or not. The default value is false . Declaration public bool DeleteDefaultSetTempo { get; set; } Property Value Type Description Boolean DeleteDefaultTimeSignature Gets or sets a value indicating whether Time Signature events with default data should be deleted if there are no non-default ones before them, or not. The default value is false . Declaration public bool DeleteDefaultTimeSignature { get; set; } Property Value Type Description Boolean DeleteUnknownChunks Gets or sets a value indicating whether chunks of UnknownChunk type should be deleted or not. The default value is false . Declaration public bool DeleteUnknownChunks { get; set; } Property Value Type Description Boolean DeleteUnknownMetaEvents Gets or sets a value indicating whether events of UnknownMetaEvent type should be deleted or not. The default value is false . Declaration public bool DeleteUnknownMetaEvents { get; set; } Property Value Type Description Boolean NoteOffAsSilentNoteOn Gets or sets a value indicating whether Note Off events should be written as Note On ones with velocity of zero, or not. In conjunction with UseRunningStatus set to true can give some compression of MIDI data. The default value is false . Declaration public bool NoteOffAsSilentNoteOn { get; set; } Property Value Type Description Boolean TextEncoding Gets or sets an Encoding that will be used to write the text of a text-based meta event. The default is ASCII . Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding UseRunningStatus Gets or sets a value indicating whether 'running status' (to turn off writing of the status bytes of consecutive events of the same type) should be used or not. The default value is false . Declaration public bool UseRunningStatus { get; set; } Property Value Type Description Boolean WriteHeaderChunk Gets or sets a value indicating whether header chunk should be written to a MIDI file or not. The default value is true . Declaration public bool WriteHeaderChunk { get; set; } Property Value Type Description Boolean Remarks Note that missed header chunk violates SMF specification and thus applications may not read such files. WriterSettings Gets or sets settings according to which MidiWriter should write MIDI data. Declaration public WriterSettings WriterSettings { get; set; } Property Value Type Description WriterSettings Remarks These settings specify reading binary data without knowledge about MIDI data structures."
  },
  "api/Melanchall.DryWetMidi.Core.ZeroLengthDataPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Core.ZeroLengthDataPolicy.html",
    "title": "Enum ZeroLengthDataPolicy | DryWetMIDI",
    "keywords": "Enum ZeroLengthDataPolicy Specifies how reading engine should read zero-length objects such as strings or arrays. The default is ReadAsEmptyObject . Namespace : Melanchall.DryWetMidi.Core Assembly : Melanchall.DryWetMidi.dll Syntax public enum ZeroLengthDataPolicy Fields Name Description ReadAsEmptyObject Read as an object with length of zero. ReadAsNull Read as null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.ArbitraryGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ArbitraryGrid.html",
    "title": "Class ArbitraryGrid | DryWetMIDI",
    "keywords": "Class ArbitraryGrid Grid where points in time are distributed arbitrarily according to provided collection of times. Inheritance Object ArbitraryGrid Implements IGrid Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ArbitraryGrid : IGrid Constructors ArbitraryGrid(ITimeSpan[]) Initializes a new instance of the ArbitraryGrid with the specified collection of times. Declaration public ArbitraryGrid(params ITimeSpan[] times) Parameters Type Name Description ITimeSpan [] times Grid's times. Exceptions Type Condition ArgumentNullException times is null . ArgumentException times contains null . ArbitraryGrid(IEnumerable<ITimeSpan>) Initializes a new instance of the ArbitraryGrid with the specified collection of times. Declaration public ArbitraryGrid(IEnumerable<ITimeSpan> times) Parameters Type Name Description IEnumerable < ITimeSpan > times Grid's times. Exceptions Type Condition ArgumentNullException times is null . ArgumentException times contains null . Properties Times Times of the current grid. Declaration public IEnumerable<ITimeSpan> Times { get; } Property Value Type Description IEnumerable < ITimeSpan > Methods GetTimes(TempoMap) Gets points in time of the current grid. Declaration public IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of points in time of the current grid. Exceptions Type Condition ArgumentNullException tempoMap is null . Implements IGrid"
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatFractionTimeSpan.html",
    "title": "Class BarBeatFractionTimeSpan | DryWetMIDI",
    "keywords": "Class BarBeatFractionTimeSpan Represents bar/beat time span which represents bars and fractional beats. More info in the Time and length: Representations: Bars, beats and fraction article. Inheritance Object BarBeatFractionTimeSpan Implements ITimeSpan IComparable IComparable < BarBeatFractionTimeSpan > IEquatable < BarBeatFractionTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BarBeatFractionTimeSpan : ITimeSpan, IComparable, IComparable<BarBeatFractionTimeSpan>, IEquatable<BarBeatFractionTimeSpan> Constructors BarBeatFractionTimeSpan() Initializes a new instance of the BarBeatFractionTimeSpan . Declaration public BarBeatFractionTimeSpan() BarBeatFractionTimeSpan(Int64) Initializes a new instance of the BarBeatFractionTimeSpan with the specified number of bars. Declaration public BarBeatFractionTimeSpan(long bars) Parameters Type Name Description Int64 bars The number of bars. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. BarBeatFractionTimeSpan(Int64, Double) Initializes a new instance of the BarBeatFractionTimeSpan with the specified number of bars and beats. Declaration public BarBeatFractionTimeSpan(long bars, double beats) Parameters Type Name Description Int64 bars The number of bars. Double beats The number of beats. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: bars is negative. beats is negative. Properties Bars Gets the bars component of the time represented by the current BarBeatFractionTimeSpan . Declaration public long Bars { get; } Property Value Type Description Int64 Beats Gets the beats component of the time represented by the current BarBeatFractionTimeSpan . Declaration public double Beats { get; } Property Value Type Description Double Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(BarBeatFractionTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(BarBeatFractionTimeSpan other) Parameters Type Name Description BarBeatFractionTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(BarBeatFractionTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BarBeatFractionTimeSpan other) Parameters Type Name Description BarBeatFractionTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a bar/beat time span to its BarBeatFractionTimeSpan equivalent. Declaration public static BarBeatFractionTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description BarBeatFractionTimeSpan A BarBeatFractionTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out BarBeatFractionTimeSpan) Converts the string representation of a bar/beat time span to its BarBeatFractionTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out BarBeatFractionTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. BarBeatFractionTimeSpan timeSpan When this method returns, contains the BarBeatFractionTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Addition(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Adds two specified BarBeatFractionTimeSpan instances. Declaration public static BarBeatFractionTimeSpan operator +(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to add. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to add. Returns Type Description BarBeatFractionTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Equality(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Determines if two BarBeatFractionTimeSpan objects are equal. Declaration public static bool operator ==(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is greater than another one. Declaration public static bool operator>(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . GreaterThanOrEqual(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Inequality(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Determines if two BarBeatFractionTimeSpan objects are not equal. Declaration public static bool operator !=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is less than another one. Declaration public static bool operator <(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . LessThanOrEqual(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Indicates whether a specified BarBeatFractionTimeSpan is less than or equal to another one. Declaration public static bool operator <=(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The first BarBeatFractionTimeSpan to compare. BarBeatFractionTimeSpan timeSpan2 The second BarBeatFractionTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Subtraction(BarBeatFractionTimeSpan, BarBeatFractionTimeSpan) Subtracts a specified BarBeatFractionTimeSpan from another one. Declaration public static BarBeatFractionTimeSpan operator -(BarBeatFractionTimeSpan timeSpan1, BarBeatFractionTimeSpan timeSpan2) Parameters Type Name Description BarBeatFractionTimeSpan timeSpan1 The minuend. BarBeatFractionTimeSpan timeSpan2 The subtrahend. Returns Type Description BarBeatFractionTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T> Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatTicksTimeSpan.html",
    "title": "Class BarBeatTicksTimeSpan | DryWetMIDI",
    "keywords": "Class BarBeatTicksTimeSpan Represents bar/beat time span which represents bars, beats and ticks. More info in the Time and length: Representations: Bars, beats and ticks article. Inheritance Object BarBeatTicksTimeSpan Implements ITimeSpan IComparable IComparable < BarBeatTicksTimeSpan > IEquatable < BarBeatTicksTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class BarBeatTicksTimeSpan : ITimeSpan, IComparable, IComparable<BarBeatTicksTimeSpan>, IEquatable<BarBeatTicksTimeSpan> Constructors BarBeatTicksTimeSpan() Initializes a new instance of the BarBeatTicksTimeSpan . Declaration public BarBeatTicksTimeSpan() BarBeatTicksTimeSpan(Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars. Declaration public BarBeatTicksTimeSpan(long bars) Parameters Type Name Description Int64 bars The number of bars. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. BarBeatTicksTimeSpan(Int64, Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars and beats. Declaration public BarBeatTicksTimeSpan(long bars, long beats) Parameters Type Name Description Int64 bars The number of bars. Int64 beats The number of beats. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: bars is negative. beats is negative. BarBeatTicksTimeSpan(Int64, Int64, Int64) Initializes a new instance of the BarBeatTicksTimeSpan with the specified number of bars, beats and ticks. Declaration public BarBeatTicksTimeSpan(long bars, long beats, long ticks) Parameters Type Name Description Int64 bars The number of bars. Int64 beats The number of beats. Int64 ticks The number of ticks. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: bars is negative. beats is negative. ticks is negative. Properties Bars Gets the bars component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Bars { get; } Property Value Type Description Int64 Beats Gets the beats component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Beats { get; } Property Value Type Description Int64 Ticks Gets the ticks component of the time represented by the current BarBeatTicksTimeSpan . Declaration public long Ticks { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(BarBeatTicksTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(BarBeatTicksTimeSpan other) Parameters Type Name Description BarBeatTicksTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(BarBeatTicksTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BarBeatTicksTimeSpan other) Parameters Type Name Description BarBeatTicksTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a bar/beat time span to its BarBeatTicksTimeSpan equivalent. Declaration public static BarBeatTicksTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description BarBeatTicksTimeSpan A BarBeatTicksTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out BarBeatTicksTimeSpan) Converts the string representation of a bar/beat time span to its BarBeatTicksTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out BarBeatTicksTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. BarBeatTicksTimeSpan timeSpan When this method returns, contains the BarBeatTicksTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Addition(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Adds two specified BarBeatTicksTimeSpan instances. Declaration public static BarBeatTicksTimeSpan operator +(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to add. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to add. Returns Type Description BarBeatTicksTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Equality(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Determines if two BarBeatTicksTimeSpan objects are equal. Declaration public static bool operator ==(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is greater than another one. Declaration public static bool operator>(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . GreaterThanOrEqual(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Inequality(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Determines if two BarBeatTicksTimeSpan objects are not equal. Declaration public static bool operator !=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is less than another one. Declaration public static bool operator <(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . LessThanOrEqual(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Indicates whether a specified BarBeatTicksTimeSpan is less than or equal to another one. Declaration public static bool operator <=(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The first BarBeatTicksTimeSpan to compare. BarBeatTicksTimeSpan timeSpan2 The second BarBeatTicksTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Subtraction(BarBeatTicksTimeSpan, BarBeatTicksTimeSpan) Subtracts a specified BarBeatTicksTimeSpan from another one. Declaration public static BarBeatTicksTimeSpan operator -(BarBeatTicksTimeSpan timeSpan1, BarBeatTicksTimeSpan timeSpan2) Parameters Type Name Description BarBeatTicksTimeSpan timeSpan1 The minuend. BarBeatTicksTimeSpan timeSpan2 The subtrahend. Returns Type Description BarBeatTicksTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T> Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.BarBeatUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.BarBeatUtilities.html",
    "title": "Class BarBeatUtilities | DryWetMIDI",
    "keywords": "Class BarBeatUtilities Utilities for working with bars and beats. Inheritance Object BarBeatUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class BarBeatUtilities Methods GetBarLength(Int64, TempoMap) Gets the length of a bar (in ticks) that is started at distance of the specified bars. Declaration public static int GetBarLength(long bars, TempoMap tempoMap) Parameters Type Name Description Int64 bars Distance in bars where the bar is started. TempoMap tempoMap Tempo map used for calculations. Returns Type Description Int32 Length of a bar in ticks. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. ArgumentNullException tempoMap is null . GetBeatLength(Int64, TempoMap) Gets the length of a beat (in ticks) of the bar that is started at distance of the specified bars. Declaration public static int GetBeatLength(long bars, TempoMap tempoMap) Parameters Type Name Description Int64 bars Distance in bars where the bar is started. TempoMap tempoMap Tempo map used for calculations. Returns Type Description Int32 Length of a beat in ticks. Exceptions Type Condition ArgumentOutOfRangeException bars is negative. ArgumentNullException tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.ChannelCoarseTuningParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChannelCoarseTuningParameter.html",
    "title": "Class ChannelCoarseTuningParameter | DryWetMIDI",
    "keywords": "Class ChannelCoarseTuningParameter Channel Coarse Tuning registered parameter. Inheritance Object Parameter RegisteredParameter ChannelCoarseTuningParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelCoarseTuningParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors ChannelCoarseTuningParameter() Initializes a new instance of the ChannelCoarseTuningParameter . Declaration public ChannelCoarseTuningParameter() ChannelCoarseTuningParameter(SByte) Initializes a new instance of the ChannelCoarseTuningParameter with the specified exact number of half-steps. Declaration public ChannelCoarseTuningParameter(sbyte halfSteps) Parameters Type Name Description SByte halfSteps The number of half-steps to tune by. Exceptions Type Condition ArgumentOutOfRangeException halfSteps is out of [ MinHalfSteps ; MaxHalfSteps ] range. ChannelCoarseTuningParameter(SByte, ParameterValueType) Initializes a new instance of the ChannelCoarseTuningParameter with the specified number of half-steps and type of this number. Declaration public ChannelCoarseTuningParameter(sbyte halfSteps, ParameterValueType valueType) Parameters Type Name Description SByte halfSteps Number of half-steps to tune by. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Exceptions Type Condition InvalidEnumArgumentException valueType specified an invalid value. ArgumentOutOfRangeException halfSteps is out of [ MinHalfSteps ; MaxHalfSteps ] range. Fields MaxHalfSteps Represents the largest possible number of half-steps to tune by. Declaration public const sbyte MaxHalfSteps = 63 Field Value Type Description SByte MinHalfSteps Represents the smallest possible number of half-steps to tune by. Declaration public const sbyte MinHalfSteps = -64 Field Value Type Description SByte Properties HalfSteps Gets or sets the number of half-steps to tune by. Declaration public sbyte HalfSteps { get; set; } Property Value Type Description SByte Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinHalfSteps ; MaxHalfSteps ] range. Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChannelFineTuningParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChannelFineTuningParameter.html",
    "title": "Class ChannelFineTuningParameter | DryWetMIDI",
    "keywords": "Class ChannelFineTuningParameter Channel Fine Tuning registered parameter. Inheritance Object Parameter RegisteredParameter ChannelFineTuningParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChannelFineTuningParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors ChannelFineTuningParameter() Initializes a new instance of the ChannelFineTuningParameter . Declaration public ChannelFineTuningParameter() ChannelFineTuningParameter(Single) Initializes a new instance of the ChannelFineTuningParameter with the specified exact number of cents. Declaration public ChannelFineTuningParameter(float cents) Parameters Type Name Description Single cents The number of cents to tune by. Exceptions Type Condition ArgumentOutOfRangeException cents is out of [ MinCents ; MaxCents ] range. ChannelFineTuningParameter(Single, ParameterValueType) Initializes a new instance of the ChannelFineTuningParameter with the specified number of cents and type of this number. Declaration public ChannelFineTuningParameter(float cents, ParameterValueType valueType) Parameters Type Name Description Single cents The number of cents to tune by. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Exceptions Type Condition InvalidEnumArgumentException valueType specified an invalid value. ArgumentOutOfRangeException cents is out of [ MinCents ; MaxCents ] range. Fields MaxCents Represents the largest possible number of cents to tune by. Declaration public const float MaxCents = 100F Field Value Type Description Single MinCents Represents the smallest possible number of cents to tune by. Declaration public const float MinCents = -100F Field Value Type Description Single Properties Cents Gets or sets the number of cents to tune by. Declaration public float Cents { get; set; } Property Value Type Description Single Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinCents ; MaxCents ] range. Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.Chord.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Chord.html",
    "title": "Class Chord | DryWetMIDI",
    "keywords": "Class Chord Represents a musical chord. Inheritance Object Chord Implements ILengthedObject ITimedObject IMusicalObject INotifyTimeChanged INotifyLengthChanged Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public class Chord : ILengthedObject, ITimedObject, IMusicalObject, INotifyTimeChanged, INotifyLengthChanged Constructors Chord() Initializes a new instance of the Chord . Declaration public Chord() Chord(Note[]) Initializes a new instance of the Chord with the specified collection of notes. Declaration public Chord(params Note[] notes) Parameters Type Name Description Note [] notes Notes to combine into a chord. Exceptions Type Condition ArgumentNullException notes is null . Chord(IEnumerable<Note>) Initializes a new instance of the Chord with the specified collection of notes. Declaration public Chord(IEnumerable<Note> notes) Parameters Type Name Description IEnumerable < Note > notes Notes to combine into a chord. Exceptions Type Condition ArgumentNullException notes is null . Chord(IEnumerable<Note>, Int64) Initializes a new instance of the Chord with the specified collection of notes and chord time. Declaration public Chord(IEnumerable<Note> notes, long time) Parameters Type Name Description IEnumerable < Note > notes Notes to combine into a chord. Int64 time Time of the chord which is time of the earliest note of the notes . Exceptions Type Condition ArgumentNullException notes is null . ArgumentOutOfRangeException time is negative. Properties Channel Gets or sets channel to play the chord on. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Exceptions Type Condition InvalidOperationException One of the following errors occured: Unable to get channel since a chord doesn't contain notes. Unable to get channel since chord's notes have different Velocity . EndTime Gets the end time of an object. Declaration public long EndTime { get; } Property Value Type Description Int64 Length Gets or sets the length of the chord in units defined by the time division of a MIDI file. Declaration public long Length { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. Notes Gets a TimedObjectsCollection<TObject> that contains notes of this chord. Declaration public TimedObjectsCollection<Note> Notes { get; } Property Value Type Description TimedObjectsCollection < Note > OffVelocity Gets or sets velocity of the underlying NoteOffEvent events of a chord's notes. Declaration public SevenBitNumber OffVelocity { get; set; } Property Value Type Description SevenBitNumber Exceptions Type Condition InvalidOperationException One of the following errors occured: Unable to get off velocity since a chord doesn't contain notes. Unable to get off velocity since chord's notes have different OffVelocity . Time Gets or sets absolute time of the chord in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. Velocity Gets or sets velocity of the underlying NoteOnEvent events of a chord's notes. Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Exceptions Type Condition InvalidOperationException One of the following errors occured: Unable to get velocity since a chord doesn't contain notes. Unable to get velocity since chord's notes have different Velocity . Methods Clone() Clones object by creating a copy of it. Declaration public virtual ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Split(Int64) Splits the current object by the specified time. Declaration public SplitLengthedObject Split(long time) Parameters Type Name Description Int64 time Time to split the object at. Returns Type Description SplitLengthedObject An object containing left and right parts of the split object. Both parts have the same type as the original object. Remarks If time is less than or equal to time of the object, the left part will be null . If time is greater than or equal to end time of the object, the right part will be null . Let's see a simple example. Suppose we have an object with time of 10 and length of 50 . The table below shows what left and right parts will be in case of different values of time : Time to split at Left part Right part 5 null Copy of the object 10 null Copy of the object 30 Copy of the object with time of 10 and length of 20 Copy of the object with time of 30 and length of 30 60 Copy of the object null 70 Copy of the object null To learn about other ways to split an object please read Objects splitting article. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events LengthChanged Occurs when the length of an object has been changed. Declaration public event EventHandler<LengthChangedEventArgs> LengthChanged Event Type Type Description EventHandler < LengthChangedEventArgs > NotesCollectionChanged Occurs when notes collection changes. Declaration public event TimedObjectsCollectionChangedEventHandler<Note> NotesCollectionChanged Event Type Type Description TimedObjectsCollectionChangedEventHandler < Note > TimeChanged Occurs when the time of an object has been changed. Declaration public event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs > Implements ILengthedObject ITimedObject IMusicalObject INotifyTimeChanged INotifyLengthChanged Extension Methods ChordsManagingUtilities.SetTimeAndLength(Chord, ITimeSpan, ITimeSpan, TempoMap) ChordsManagingUtilities.GetMusicTheoryChord(Chord) LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.SetLength<TObject>(TObject, ITimeSpan, TempoMap) ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordData.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordData.html",
    "title": "Class ChordData | DryWetMIDI",
    "keywords": "Class ChordData Holds the data for a Chord construction. Inheritance Object ChordData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordData Properties Notes Gets notes collection to build a chord. Declaration public ICollection<Note> Notes { get; } Property Value Type Description ICollection < Note > See Also ChordDetectionSettings ChordsManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordDetectionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordDetectionSettings.html",
    "title": "Class ChordDetectionSettings | DryWetMIDI",
    "keywords": "Class ChordDetectionSettings Settings which define how chords should be detected and built. More info in the Getting objects: GetChords: Settings article. Inheritance Object ChordDetectionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordDetectionSettings Properties ChordSearchContext Gets or sets a value defining a context to search chords within. The default value is SingleEventsCollection . More info in the Getting objects: GetChords: Settings: ChordSearchContext article. Declaration public ChordSearchContext ChordSearchContext { get; set; } Property Value Type Description ChordSearchContext Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Constructor Gets or sets custom construction method for Chord . If null , default method will be used (via one of the Chord 's constructors). Declaration public Func<ChordData, Chord> Constructor { get; set; } Property Value Type Description Func < ChordData , Chord > NoteDetectionSettings Gets or sets settings according to which notes should be detected and built. Chords will be built on top of those notes. More info in the Getting objects: GetChords: Settings: NoteDetectionSettings article. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings NotesMinCount Gets or sets a minimum count of notes a chord can contain. So if count of simultaneously sounding notes is less than this value, they won't make up a chord. The default value is 1 . More info in the Getting objects: GetChords: Settings: NotesMinCount article. Declaration public int NotesMinCount { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException value is zero or negative. NotesTolerance Gets or sets maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be included in a chord. The default value is 0 . More info in the Getting objects: GetChords: Settings: NotesTolerance article. Declaration public long NotesTolerance { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. See Also ChordsManagingUtilities GetObjectsUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordSearchContext.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordSearchContext.html",
    "title": "Enum ChordSearchContext | DryWetMIDI",
    "keywords": "Enum ChordSearchContext Defines a context to search chords within. More info in the Getting objects: GetChords: Settings: ChordSearchContext article. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum ChordSearchContext Fields Name Description AllEventsCollections A chord can be detected within all events collection ( EventsCollection or TrackChunk ) of the source ( MidiFile for example). It means MIDI events that make up a chord can be present in different events collections. SingleEventsCollection A chord should be detected only within single events collection ( EventsCollection or TrackChunk ). It means all MIDI events that make up a chord should be present in one events collection. See Also ChordDetectionSettings ChordsManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsManager.html",
    "title": "Class ChordsManager | DryWetMIDI",
    "keywords": "Class ChordsManager Provides a way to manage chords of a MIDI file. Inheritance Object TimedObjectsManager < Chord > ChordsManager Implements IDisposable Inherited Members TimedObjectsManager<Chord>.Objects TimedObjectsManager<Chord>.SaveChanges() TimedObjectsManager<Chord>.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS11: Use TimedObjectsManager class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs11.\")] public sealed class ChordsManager : TimedObjectsManager<Chord>, IDisposable Constructors ChordsManager(EventsCollection, ChordDetectionSettings, Comparison<MidiEvent>) Initializes a new instance of the ChordsManager with the specified events collection, notes tolerance and comparison delegate for events that have same time. Declaration public ChordsManager(EventsCollection eventsCollection, ChordDetectionSettings chordDetectionSettings = null, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds chord events to manage. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Exceptions Type Condition ArgumentNullException eventsCollection is null . Properties Chords Gets the TimedObjectsCollection<TObject> with all chords managed by the current ChordsManager . Declaration public TimedObjectsCollection<Chord> Chords { get; } Property Value Type Description TimedObjectsCollection < Chord > Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ChordsManagingUtilities.html",
    "title": "Class ChordsManagingUtilities | DryWetMIDI",
    "keywords": "Class ChordsManagingUtilities Extension methods for chords managing. Inheritance Object ChordsManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordsManagingUtilities Methods GetChords(EventsCollection, ChordDetectionSettings) Gets chords contained in the specified EventsCollection . More info in the Getting objects: GetChords article. Declaration public static ICollection<Chord> GetChords(this EventsCollection eventsCollection, ChordDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description ICollection < Chord > Collection of chords contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null . See Also ProcessChords(EventsCollection, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ProcessChords(EventsCollection, Action<Chord>, ChordDetectionSettings) RemoveChords(EventsCollection, ChordDetectionSettings) RemoveChords(EventsCollection, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities GetChords(MidiFile, ChordDetectionSettings) Gets chords contained in the specified MidiFile . More info in the Getting objects: GetChords article. Declaration public static ICollection<Chord> GetChords(this MidiFile file, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for chords. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description ICollection < Chord > Collection of chords contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null . See Also ProcessChords(MidiFile, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ProcessChords(MidiFile, Action<Chord>, ChordDetectionSettings) RemoveChords(MidiFile, ChordDetectionSettings) RemoveChords(MidiFile, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities GetChords(TrackChunk, ChordDetectionSettings) Gets chords contained in the specified TrackChunk . More info in the Getting objects: GetChords article. Declaration public static ICollection<Chord> GetChords(this TrackChunk trackChunk, ChordDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description ICollection < Chord > Collection of chords contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null . See Also ProcessChords(TrackChunk, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ProcessChords(TrackChunk, Action<Chord>, ChordDetectionSettings) RemoveChords(TrackChunk, ChordDetectionSettings) RemoveChords(TrackChunk, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities GetChords(IEnumerable<MidiEvent>, ChordDetectionSettings) Gets chords contained in the specified collection of MidiEvent . More info in the Getting objects: GetChords article. Declaration public static ICollection<Chord> GetChords(this IEnumerable<MidiEvent> midiEvents, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < MidiEvent > midiEvents Collection of MidiFile to search for chords. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description ICollection < Chord > Collection of chords contained in midiEvents ordered by time. Exceptions Type Condition ArgumentNullException midiEvents is null . GetChords(IEnumerable<TrackChunk>, ChordDetectionSettings) Gets chords contained in the specified collection of TrackChunk . More info in the Getting objects: GetChords article. Declaration public static ICollection<Chord> GetChords(this IEnumerable<TrackChunk> trackChunks, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for chords. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description ICollection < Chord > Collection of chords contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null . See Also ProcessChords(IEnumerable<TrackChunk>, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) ProcessChords(IEnumerable<TrackChunk>, Action<Chord>, ChordDetectionSettings) RemoveChords(IEnumerable<TrackChunk>, ChordDetectionSettings) RemoveChords(IEnumerable<TrackChunk>, Predicate<Chord>, ChordDetectionSettings) GetObjectsUtilities GetChords(IEnumerable<Note>, ChordDetectionSettings) Creates chords from notes. Declaration public static IEnumerable<Chord> GetChords(this IEnumerable<Note> notes, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Notes to create chords from. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description IEnumerable < Chord > Collection of chords made up from notes . Exceptions Type Condition ArgumentNullException notes is null . GetMusicTheoryChord(Chord) Returns Chord containing notes of the specified Chord . Declaration public static Chord GetMusicTheoryChord(this Chord chord) Parameters Type Name Description Chord chord Chord to get music theory chord from. Returns Type Description Chord Chord containing notes of the chord . Exceptions Type Condition ArgumentNullException chord is null . ManageChords(EventsCollection, ChordDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the specified events collection. More info in the Objects managers article. Declaration public static TimedObjectsManager<Chord> ManageChords(this EventsCollection eventsCollection, ChordDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds chords to manage. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the eventsCollection via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < Chord > An instance of the TimedObjectsManager<TObject> that can be used to manage chords represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null . ManageChords(TrackChunk, ChordDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the events collection of the specified track chunk. More info in the Objects managers article. Declaration public static TimedObjectsManager<Chord> ManageChords(this TrackChunk trackChunk, ChordDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds chords to manage. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the trackChunk via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < Chord > An instance of the TimedObjectsManager<TObject> that can be used to manage chords represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null . ProcessChords(EventsCollection, Action<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the EventsCollection . Declaration public static int ProcessChords(this EventsCollection eventsCollection, Action<Chord> action, ChordDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the eventsCollection . ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . ProcessChords(EventsCollection, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the EventsCollection . Declaration public static int ProcessChords(this EventsCollection eventsCollection, Action<Chord> action, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the eventsCollection . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . match is null . ProcessChords(MidiFile, Action<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the MidiFile . Declaration public static int ProcessChords(this MidiFile file, Action<Chord> action, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the file . ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . ProcessChords(MidiFile, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the MidiFile . Declaration public static int ProcessChords(this MidiFile file, Action<Chord> action, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the file . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . match is null . ProcessChords(TrackChunk, Action<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the TrackChunk . Declaration public static int ProcessChords(this TrackChunk trackChunk, Action<Chord> action, ChordDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunk . ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . ProcessChords(TrackChunk, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the TrackChunk . Declaration public static int ProcessChords(this TrackChunk trackChunk, Action<Chord> action, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunk . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . match is null . ProcessChords(IEnumerable<TrackChunk>, Action<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the collection of TrackChunk . Declaration public static int ProcessChords(this IEnumerable<TrackChunk> trackChunks, Action<Chord> action, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunks . ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . ProcessChords(IEnumerable<TrackChunk>, Action<Chord>, Predicate<Chord>, ChordDetectionSettings) Performs the specified action on each Chord contained in the collection of TrackChunk . Declaration public static int ProcessChords(this IEnumerable<TrackChunk> trackChunks, Action<Chord> action, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to process. Action < Chord > action The action to perform on each Chord contained in the trackChunks . Predicate < Chord > match The predicate that defines the conditions of the Chord to process. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of processed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . match is null . RemoveChords(EventsCollection, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this EventsCollection eventsCollection, ChordDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException eventsCollection is null . RemoveChords(EventsCollection, Predicate<Chord>, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this EventsCollection eventsCollection, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . match is null . RemoveChords(MidiFile, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this MidiFile file, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for chords to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException file is null . RemoveChords(MidiFile, Predicate<Chord>, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this MidiFile file, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . match is null . RemoveChords(TrackChunk, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this TrackChunk trackChunk, ChordDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException trackChunk is null . RemoveChords(TrackChunk, Predicate<Chord>, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this TrackChunk trackChunk, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . match is null . RemoveChords(IEnumerable<TrackChunk>, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this IEnumerable<TrackChunk> trackChunks, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException trackChunks is null . RemoveChords(IEnumerable<TrackChunk>, Predicate<Chord>, ChordDetectionSettings) Removes all the Chord that match the conditions defined by the specified predicate. Declaration public static int RemoveChords(this IEnumerable<TrackChunk> trackChunks, Predicate<Chord> match, ChordDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for chords to remove. Predicate < Chord > match The predicate that defines the conditions of the Chord to remove. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Returns Type Description Int32 Count of removed chords. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . match is null . SetTimeAndLength(Chord, ITimeSpan, ITimeSpan, TempoMap) Sets time and length of the specified chord. Declaration [Obsolete(\"OBS15: Use SetTime/SetLength methods from TimedObjectUtilities/LengthedObjectUtilities. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs15.\")] public static Chord SetTimeAndLength(this Chord chord, ITimeSpan time, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description Chord chord Chord to set time and length to. ITimeSpan time Time to set to chord . ITimeSpan length Length to set to chord . TempoMap tempoMap Tempo map that will be used for time and length conversion. Returns Type Description Chord An input chord with new time and length. Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . time is null . length is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.GetObjectsUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.GetObjectsUtilities.html",
    "title": "Class GetObjectsUtilities | DryWetMIDI",
    "keywords": "Class GetObjectsUtilities Provides utilities to extract objects of different types at once. More info in the Getting objects: GetObjects article. Inheritance Object GetObjectsUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class GetObjectsUtilities Methods GetObjects(EventsCollection, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a EventsCollection . Declaration public static ICollection<ITimedObject> GetObjects(this EventsCollection eventsCollection, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from eventsCollection . Objects are ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null . GetObjects(MidiFile, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a MidiFile . Declaration public static ICollection<ITimedObject> GetObjects(this MidiFile midiFile, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from midiFile . Objects are ordered by time. Exceptions Type Condition ArgumentNullException midiFile is null . GetObjects(TrackChunk, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a TrackChunk . Declaration public static ICollection<ITimedObject> GetObjects(this TrackChunk trackChunk, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from trackChunk . Objects are ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null . GetObjects(IEnumerable<MidiEvent>, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a collection of MidiEvent . Declaration public static ICollection<ITimedObject> GetObjects(this IEnumerable<MidiEvent> midiEvents, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description IEnumerable < MidiEvent > midiEvents Collection of MidiEvent to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from midiEvents . Objects are ordered by time. Exceptions Type Condition ArgumentNullException midiEvents is null . GetObjects(IEnumerable<TrackChunk>, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a collection of TrackChunk . Declaration public static ICollection<ITimedObject> GetObjects(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from trackChunks . Objects are ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null . GetObjects(IEnumerable<ITimedObject>, ObjectType, ObjectDetectionSettings) Extracts objects of the specified types from a collection of ITimedObject . Declaration public static ICollection<ITimedObject> GetObjects(this IEnumerable<ITimedObject> timedObjects, ObjectType objectType, ObjectDetectionSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of ITimedObject to extract objects from. ObjectType objectType Combination of desired objects types. ObjectDetectionSettings settings Settings according to which objects should be detected and built. Returns Type Description ICollection < ITimedObject > Collection of objects of the specified types extracted from timedObjects . Objects are ordered by time. Exceptions Type Condition ArgumentNullException timedObjects is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.html",
    "title": "Namespace Melanchall.DryWetMidi.Interaction | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Interaction Classes ArbitraryGrid Grid where points in time are distributed arbitrarily according to provided collection of times. BarBeatFractionTimeSpan Represents bar/beat time span which represents bars and fractional beats. More info in the Time and length: Representations: Bars, beats and fraction article. BarBeatTicksTimeSpan Represents bar/beat time span which represents bars, beats and ticks. More info in the Time and length: Representations: Bars, beats and ticks article. BarBeatUtilities Utilities for working with bars and beats. ChannelCoarseTuningParameter Channel Coarse Tuning registered parameter. ChannelFineTuningParameter Channel Fine Tuning registered parameter. Chord Represents a musical chord. ChordData Holds the data for a Chord construction. ChordDetectionSettings Settings which define how chords should be detected and built. More info in the Getting objects: GetChords: Settings article. ChordsManager Provides a way to manage chords of a MIDI file. ChordsManagingUtilities Extension methods for chords managing. GetObjectsUtilities Provides utilities to extract objects of different types at once. More info in the Getting objects: GetObjects article. LengthChangedEventArgs Contains arguments for the LengthChanged event. LengthConverter Provides a way to convert the length of an object from one representation to another. More info in the Time and length article. LengthedObjectUtilities Extension methods for objects that implement the ILengthedObject interface. MathTimeSpan Represents a result of summation or subtraction of two ITimeSpan . MetricTimeSpan Represents metric time span which represents hours, minutes and seconds. More info in the Time and length: Representations: Metric article. MidiFileUtilities Utility methods for MidiFile . MidiTimeSpan Represents a time span as an amount of time measured in units of the time division of a MIDI file. More info in the Time and length: Representations: MIDI article. ModulationDepthRangeParameter Modulation Depth Range (Vibrato Depth Range) registered parameter. MusicalTimeSpan Represents a time span as a fraction of the whole note's length. More info in the Time and length: Representations: Musical article. Note Represents a musical note. NoteData Holds the data for a Note construction. NoteDetectionSettings Settings which define how notes should be detected and built. More info in the Getting objects: GetNotes: Settings article. NotesManager Provides a way to manage notes of a MIDI file. NotesManagingUtilities Extension methods for notes managing. ObjectDetectionSettings Settings which define how objects should be detected and built. ObjectIdUtilities Provides methods to get the ID (key) of an object. Parameter Represents parameter (RPN or NRPN) encoded as series of Control Change events. PitchBendSensitivityParameter Pitch Bend Sensitivity registered parameter. RegisteredParameter Represents MIDI registered parameter (RPN). ResizeNotesUtilities Provides ways to resize collection of notes. Rest Represents a musical rest. More info in the Getting objects: GetObjects: Rests article. RestDetectionSettings Settings which define how rests should be detected and built. SplitLengthedObject Container for left and right parts of split lengthed object. SteppedGrid Grid where points in time are distributed with the specified step or collection of steps. Tempo Represents tempo expressed in microseconds per quarter note or beats per minute. TempoMap Represents a tempo map of a MIDI file. More info in the Tempo map article. TempoMapManager Provides a way to manage tempo map of a MIDI file. More info in the Tempo map article. TempoMapManagingUtilities Extension methods for managing tempo map. More info in the Tempo map article. TimeChangedEventArgs Contains arguments for the TimeChanged event. TimeConverter Provides a way to convert the time of an object from one representation to another. More info in the Time and length article. TimedEvent Represents wrapper for the MidiEvent that provides absolute time of an event. TimedEventData Holds the data for a TimedEvent construction. TimedEventDetectionSettings Settings which define how timed events should be detected and built. TimedEventsManager Provides a way to manage events of a MIDI file by their absolute time. TimedEventsManagingUtilities Extension methods for managing MIDI events by their absolute time. TimedObjectsCollection<TObject> Represents a basic collection of the ITimedObject . TimedObjectsCollectionChangedEventArgs<TObject> Provides data for the CollectionChanged event. TimedObjectsComparer Defines a method that a type implements to compare two objects. TimedObjectsManager Provides a way to manage timed objects of different types within an EventsCollection (which can be obtained via Events for example). More info in the Objects managers article. TimedObjectsManager<TObject> Provides a way to manage timed objects of the specified type within an EventsCollection (which can be obtained via Events for example). More info in the Objects managers article. TimedObjectUtilities Extension methods for objects that implement the ITimedObject interface. TimeSignature Represents time signature which is number of beats of specified length. TimeSpanComparer Compares two time spans determining relation between them. TimeSpanUtilities Provides useful utilities for working with ITimeSpan . TrackChunkUtilities Utility methods for TrackChunk . TuningBankSelectParameter Tuning Bank Select registered parameter. TuningProgramChangeParameter Tuning Program Change registered parameter. ValueChange<TValue> Represents a change of a parameter's value at some time. Interfaces IGrid Represents a time grid which is the set of points in time. ILengthedObject Represents an object that has length. IMusicalObject Musical objects that can be played. INotifyLengthChanged Provides the event which fired when the length of an object has been changed. INotifyTimeChanged Provides the event which fired when the time of an object has been changed. IObjectId Represents the ID (key) of an object. ITimedObject Represents an object that has time. ITimeSpan Time span that represents time or length. Enums ChordSearchContext Defines a context to search chords within. More info in the Getting objects: GetChords: Settings: ChordSearchContext article. LengthedObjectPart Part of an ILengthedObject . MathOperation Represents a simple math operation used by the MathTimeSpan . The default is Add . NoteSearchContext Defines a context to search notes within. The default value is SingleEventsCollection . More info in the Getting objects: GetNotes: Settings: NoteSearchContext article. NoteStartDetectionPolicy Defines how start event of a note should be found in case of overlapping notes with the same note number and channel. The default value is FirstNoteOn . More info in the Getting objects: GetNotes: Settings: NoteStartDetectionPolicy article. ObjectType The type of objects to get with methods of GetObjectsUtilities . ParameterValueType The type of a parameter's value. RegisteredParameterType the type of a registered parameter. RestSeparationPolicy Determines a rule for creating rests. The default value is NoSeparation . More info in the Getting objects: GetObjects: Rests article. TimeSpanMode Mode of the arithmetic operation between two ITimeSpan . TimeSpanRoundingPolicy Specifies how a time span should be rounded. TimeSpanType The type of a time span. Delegates TimedObjectsCollectionChangedEventHandler<TObject> Represents the method that will handle the CollectionChanged event."
  },
  "api/Melanchall.DryWetMidi.Interaction.IGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.IGrid.html",
    "title": "Interface IGrid | DryWetMIDI",
    "keywords": "Interface IGrid Represents a time grid which is the set of points in time. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface IGrid Methods GetTimes(TempoMap) Gets times produced by the current grid. Declaration IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of times (in MIDI ticks) of the current grid."
  },
  "api/Melanchall.DryWetMidi.Interaction.ILengthedObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ILengthedObject.html",
    "title": "Interface ILengthedObject | DryWetMIDI",
    "keywords": "Interface ILengthedObject Represents an object that has length. Inherited Members ITimedObject.Time ITimedObject.Clone() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ILengthedObject : ITimedObject Properties EndTime Gets the end time of an object. Declaration long EndTime { get; } Property Value Type Description Int64 Length Gets or sets the length of an object. Declaration long Length { get; set; } Property Value Type Description Int64 Methods Split(Int64) Splits the current object by the specified time. Declaration SplitLengthedObject Split(long time) Parameters Type Name Description Int64 time Time to split the object at. Returns Type Description SplitLengthedObject An object containing left and right parts of the split object. Both parts have the same type as the original object. Remarks If time is less than or equal to time of the object, the left part will be null . If time is greater than or equal to end time of the object, the right part will be null . Let's see a simple example. Suppose we have an object with time of 10 and length of 50 . The table below shows what left and right parts will be in case of different values of time : Time to split at Left part Right part 5 null Copy of the object 10 null Copy of the object 30 Copy of the object with time of 10 and length of 20 Copy of the object with time of 30 and length of 30 60 Copy of the object null 70 Copy of the object null To learn about other ways to split an object please read Objects splitting article. Exceptions Type Condition ArgumentOutOfRangeException time is negative. Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.SetLength<TObject>(TObject, ITimeSpan, TempoMap) ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.IMusicalObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.IMusicalObject.html",
    "title": "Interface IMusicalObject | DryWetMIDI",
    "keywords": "Interface IMusicalObject Musical objects that can be played. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface IMusicalObject Properties Channel Gets the channel which should be used to play an object. Declaration FourBitNumber Channel { get; } Property Value Type Description FourBitNumber"
  },
  "api/Melanchall.DryWetMidi.Interaction.INotifyLengthChanged.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.INotifyLengthChanged.html",
    "title": "Interface INotifyLengthChanged | DryWetMIDI",
    "keywords": "Interface INotifyLengthChanged Provides the event which fired when the length of an object has been changed. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface INotifyLengthChanged Events LengthChanged Occurs when the length of an object has been changed. Declaration event EventHandler<LengthChangedEventArgs> LengthChanged Event Type Type Description EventHandler < LengthChangedEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Interaction.INotifyTimeChanged.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.INotifyTimeChanged.html",
    "title": "Interface INotifyTimeChanged | DryWetMIDI",
    "keywords": "Interface INotifyTimeChanged Provides the event which fired when the time of an object has been changed. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface INotifyTimeChanged Events TimeChanged Occurs when the time of an object has been changed. Declaration event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Interaction.IObjectId.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.IObjectId.html",
    "title": "Interface IObjectId | DryWetMIDI",
    "keywords": "Interface IObjectId Represents the ID (key) of an object. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface IObjectId"
  },
  "api/Melanchall.DryWetMidi.Interaction.ITimedObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ITimedObject.html",
    "title": "Interface ITimedObject | DryWetMIDI",
    "keywords": "Interface ITimedObject Represents an object that has time. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ITimedObject Properties Time Gets or sets the time of an object. Declaration long Time { get; set; } Property Value Type Description Int64 Methods Clone() Clones object by creating a copy of it. Declaration ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ITimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ITimeSpan.html",
    "title": "Interface ITimeSpan | DryWetMIDI",
    "keywords": "Interface ITimeSpan Time span that represents time or length. Inherited Members IComparable.CompareTo(Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public interface ITimeSpan : IComparable Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthChangedEventArgs.html",
    "title": "Class LengthChangedEventArgs | DryWetMIDI",
    "keywords": "Class LengthChangedEventArgs Contains arguments for the LengthChanged event. Inheritance Object EventArgs LengthChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class LengthChangedEventArgs : EventArgs Properties NewLength Gets the new length of an object. Declaration public long NewLength { get; } Property Value Type Description Int64 OldLength Gets the old length of an object. Declaration public long OldLength { get; } Property Value Type Description Int64"
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthConverter.html",
    "title": "Class LengthConverter | DryWetMIDI",
    "keywords": "Class LengthConverter Provides a way to convert the length of an object from one representation to another. More info in the Time and length article. Inheritance Object LengthConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class LengthConverter Methods ConvertFrom(ITimeSpan, ITimeSpan, TempoMap) Converts length from the specified length type to Int64 . Declaration public static long ConvertFrom(ITimeSpan length, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description Int64 Length as Int64 . Exceptions Type Condition ArgumentNullException One of the following errors occured: length is null . time is null . tempoMap is null . ConvertFrom(ITimeSpan, Int64, TempoMap) Converts length from the specified length type to Int64 . Declaration public static long ConvertFrom(ITimeSpan length, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description Int64 Length as Int64 . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException One of the following errors occured: length is null . tempoMap is null . ConvertTo(ITimeSpan, TimeSpanType, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentNullException One of the following errors occured: length is null . time is null . tempoMap is null . InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(ITimeSpan, TimeSpanType, Int64, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, TimeSpanType lengthType, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException One of the following errors occured: length is null . tempoMap is null . InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(ITimeSpan, Type, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Type lengthType Type to convert length to. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of lengthType . Exceptions Type Condition ArgumentNullException One of the following errors occured: length is null . lengthType is null . time is null . tempoMap is null . NotSupportedException lengthType is not supported. ConvertTo(ITimeSpan, Type, Int64, TempoMap) Converts length from one length type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan length, Type lengthType, long time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan length Length to convert. Type lengthType Type to convert length to. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of lengthType . Exceptions Type Condition ArgumentNullException One of the following errors occured: length is null . lengthType is null . tempoMap is null . ArgumentOutOfRangeException time is negative. NotSupportedException lengthType is not supported. ConvertTo(Int64, TimeSpanType, ITimeSpan, TempoMap) Converts length from Int64 to the specified length type. Declaration public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description Int64 length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException length is negative. ArgumentNullException One of the following errors occured: time is null . tempoMap is null . InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo(Int64, TimeSpanType, Int64, TempoMap) Converts length from Int64 to the specified length type. Declaration public static ITimeSpan ConvertTo(long length, TimeSpanType lengthType, long time, TempoMap tempoMap) Parameters Type Name Description Int64 length Length to convert. TimeSpanType lengthType Type that will represent the length of an object. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description ITimeSpan Length as an instance of time span defined by lengthType . Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: length is negative. time is negative. ArgumentNullException tempoMap is null . InvalidEnumArgumentException lengthType specified an invalid value. ConvertTo<TTimeSpan>(ITimeSpan, ITimeSpan, TempoMap) Converts length from one length type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan length, ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentNullException One of the following errors occured: length is null . time is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(ITimeSpan, Int64, TempoMap) Converts length from one length type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan length, long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException One of the following errors occured: length is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, ITimeSpan, TempoMap) Converts length from Int64 to the specified length type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long length, ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 length Length to convert. ITimeSpan time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException length is negative. ArgumentNullException One of the following errors occured: time is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, Int64, TempoMap) Converts length from Int64 to the specified length type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long length, long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 length Length to convert. Int64 time Start time of an object to convert length of. TempoMap tempoMap Tempo map used to convert length . Returns Type Description TTimeSpan Length as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the length of an object. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: length is negative. time is negative. ArgumentNullException tempoMap is null . NotSupportedException TTimeSpan is not supported."
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthedObjectPart.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthedObjectPart.html",
    "title": "Enum LengthedObjectPart | DryWetMIDI",
    "keywords": "Enum LengthedObjectPart Part of an ILengthedObject . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum LengthedObjectPart Fields Name Description End End of an object. Entire Entire object from its start to its end. Start Start of an object."
  },
  "api/Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.LengthedObjectUtilities.html",
    "title": "Class LengthedObjectUtilities | DryWetMIDI",
    "keywords": "Class LengthedObjectUtilities Extension methods for objects that implement the ILengthedObject interface. Inheritance Object LengthedObjectUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class LengthedObjectUtilities Methods AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap, LengthedObjectPart) Filters collection of ILengthedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap, LengthedObjectPart matchBy) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . LengthedObjectPart matchBy Part of an object which have to be at time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . time is null . tempoMap is null . One of the objects is null . InvalidEnumArgumentException matchBy specified an invalid value. AtTime<TObject>(IEnumerable<TObject>, Int64, LengthedObjectPart) Filters collection of ILengthedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, long time, LengthedObjectPart matchBy) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Time to filter objects by. LengthedObjectPart matchBy Part of an object which have to be at time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . One of the objects is null . ArgumentOutOfRangeException time is negative. InvalidEnumArgumentException matchBy specified an invalid value. EndAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ILengthedObject to return objects that end at the specified time. Declaration public static IEnumerable<TObject> EndAtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time End time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that end at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . time is null . tempoMap is null . One of the objects is null . EndAtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ILengthedObject to return objects that end at the specified time. Declaration public static IEnumerable<TObject> EndAtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time End time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that end at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . One of the objects is null . ArgumentOutOfRangeException time is negative. EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) Gets end time of an ITimedObject as an instance of time span defined by the specified time span type. Declaration public static ITimeSpan EndTimeAs(this ILengthedObject obj, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ILengthedObject obj Object to get end time of. TimeSpanType timeType The type of time span to convert the end time of obj to. TempoMap tempoMap Tempo map to calculate end time of the obj . Returns Type Description ITimeSpan End time of the specified object as an instance of time span defined by the timeType . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . InvalidEnumArgumentException timeType specified an invalid value. EndTimeAs<TTime>(ILengthedObject, TempoMap) Gets end time of an ITimedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TTime EndTimeAs<TTime>(this ILengthedObject obj, TempoMap tempoMap) where TTime : ITimeSpan Parameters Type Name Description ILengthedObject obj Object to get end time of. TempoMap tempoMap Tempo map to calculate end time of the obj . Returns Type Description TTime End time of the specified object as an instance of TTime . Type Parameters Name Description TTime Type that will represent the end time of the obj . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . NotSupportedException TTime is not supported. LengthAs(ILengthedObject, TimeSpanType, TempoMap) Gets length of an ILengthedObject as an instance of type defined by the specified time span type. Declaration public static ITimeSpan LengthAs(this ILengthedObject obj, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description ILengthedObject obj Object to get length of. TimeSpanType lengthType The type of time span to convert the length of obj to. TempoMap tempoMap Tempo map to calculate length of the obj . Returns Type Description ITimeSpan Time of the specified object as an instance of time span defined by the lengthType . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . InvalidEnumArgumentException lengthType specified an invalid value. LengthAs<TLength>(ILengthedObject, TempoMap) Gets length of an ILengthedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TLength LengthAs<TLength>(this ILengthedObject obj, TempoMap tempoMap) where TLength : ITimeSpan Parameters Type Name Description ILengthedObject obj Object to get length of. TempoMap tempoMap Tempo map to calculate length of the obj . Returns Type Description TLength Length of the specified object as an instance of TLength . Type Parameters Name Description TLength Type that will represent the length of the obj . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . NotSupportedException TLength is not supported. SetLength<TObject>(TObject, ITimeSpan, TempoMap) Sets length of the specified object in terms of ITimeSpan . Declaration public static TObject SetLength<TObject>(this TObject obj, ITimeSpan length, TempoMap tempoMap) where TObject : ILengthedObject Parameters Type Name Description TObject obj Object to set length of. ITimeSpan length New length of the obj . TempoMap tempoMap TempoMap used to calculate new length in ticks. Returns Type Description TObject The same object the method was called on. Type Parameters Name Description TObject The type of the obj . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . length is null . tempoMap is null . One of the objects is null . StartAtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ILengthedObject to return objects that start at the specified time. Declaration public static IEnumerable<TObject> StartAtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Start time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that start at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . time is null . tempoMap is null . One of the objects is null . StartAtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ILengthedObject to return objects that start at the specified time. Declaration public static IEnumerable<TObject> StartAtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ILengthedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Start time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that start at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of lengthed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . One of the objects is null . ArgumentOutOfRangeException time is negative."
  },
  "api/Melanchall.DryWetMidi.Interaction.MathOperation.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MathOperation.html",
    "title": "Enum MathOperation | DryWetMIDI",
    "keywords": "Enum MathOperation Represents a simple math operation used by the MathTimeSpan . The default is Add . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum MathOperation Fields Name Description Add Addition. Subtract Subtraction."
  },
  "api/Melanchall.DryWetMidi.Interaction.MathTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MathTimeSpan.html",
    "title": "Class MathTimeSpan | DryWetMIDI",
    "keywords": "Class MathTimeSpan Represents a result of summation or subtraction of two ITimeSpan . Inheritance Object MathTimeSpan Implements ITimeSpan IComparable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MathTimeSpan : ITimeSpan, IComparable Properties Mode Get the mode of the mathematical operation represented by the current MathTimeSpan . Declaration public TimeSpanMode Mode { get; } Property Value Type Description TimeSpanMode Operation Gets the mathematical operation between TimeSpan1 and TimeSpan2 . Declaration public MathOperation Operation { get; } Property Value Type Description MathOperation TimeSpan1 Gets the first ITimeSpan . Declaration public ITimeSpan TimeSpan1 { get; } Property Value Type Description ITimeSpan TimeSpan2 Gets the second ITimeSpan . Declaration public ITimeSpan TimeSpan2 { get; } Property Value Type Description ITimeSpan Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(MathTimeSpan, MathTimeSpan) Determines if two MathTimeSpan objects are equal. Declaration public static bool operator ==(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2) Parameters Type Name Description MathTimeSpan timeSpan1 The first MathTimeSpan to compare. MathTimeSpan timeSpan2 The second MathTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. Inequality(MathTimeSpan, MathTimeSpan) Determines if two MathTimeSpan objects are not equal. Declaration public static bool operator !=(MathTimeSpan timeSpan1, MathTimeSpan timeSpan2) Parameters Type Name Description MathTimeSpan timeSpan1 The first MathTimeSpan to compare. MathTimeSpan timeSpan2 The second MathTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. Implements ITimeSpan System.IComparable Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.MetricTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MetricTimeSpan.html",
    "title": "Class MetricTimeSpan | DryWetMIDI",
    "keywords": "Class MetricTimeSpan Represents metric time span which represents hours, minutes and seconds. More info in the Time and length: Representations: Metric article. Inheritance Object MetricTimeSpan Implements ITimeSpan IComparable IComparable < MetricTimeSpan > IEquatable < MetricTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MetricTimeSpan : ITimeSpan, IComparable, IComparable<MetricTimeSpan>, IEquatable<MetricTimeSpan> Constructors MetricTimeSpan() Initializes a new instance of the MetricTimeSpan . Declaration public MetricTimeSpan() MetricTimeSpan(Int32, Int32, Int32) Initializes a new instance of the MetricTimeSpan with the specified numbers of hours, minutes and seconds. Declaration public MetricTimeSpan(int hours, int minutes, int seconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: hours is negative. minutes is negative. seconds is negative. MetricTimeSpan(Int32, Int32, Int32, Int32) Initializes a new instance of the MetricTimeSpan with the specified numbers of hours, minutes, seconds and milliseconds. Declaration public MetricTimeSpan(int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Int32 milliseconds Number of milliseconds. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: hours is negative. minutes is negative. seconds is negative. milliseconds is negative. MetricTimeSpan(Int64) Initializes a new instance of the MetricTimeSpan with the specified number of microseconds. Declaration public MetricTimeSpan(long totalMicroseconds) Parameters Type Name Description Int64 totalMicroseconds Number of microseconds which represents metric time span. Exceptions Type Condition ArgumentOutOfRangeException totalMicroseconds is negative. MetricTimeSpan(TimeSpan) Initializes a new instance of the MetricTimeSpan with the specified TimeSpan object. Declaration public MetricTimeSpan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan Time interval to initialize the MetricTimeSpan . Properties Hours Gets the hours component of the time represented by the current MetricTimeSpan . Declaration public int Hours { get; } Property Value Type Description Int32 Milliseconds Gets the milliseconds component of the time represented by the current MetricTimeSpan . Declaration public int Milliseconds { get; } Property Value Type Description Int32 Minutes Gets the minutes component of the time represented by the current MetricTimeSpan . Declaration public int Minutes { get; } Property Value Type Description Int32 Seconds Gets the seconds component of the time represented by the current MetricTimeSpan . Declaration public int Seconds { get; } Property Value Type Description Int32 TotalDays Gets the value of the current MetricTimeSpan expressed in whole and fractional days. Declaration public double TotalDays { get; } Property Value Type Description Double TotalHours Gets the value of the current MetricTimeSpan expressed in whole and fractional hours. Declaration public double TotalHours { get; } Property Value Type Description Double TotalMicroseconds Gets the value of the current MetricTimeSpan expressed in microseconds. Declaration public long TotalMicroseconds { get; } Property Value Type Description Int64 TotalMilliseconds Gets the value of the current MetricTimeSpan expressed in whole and fractional milliseconds. Declaration public double TotalMilliseconds { get; } Property Value Type Description Double TotalMinutes Gets the value of the current MetricTimeSpan expressed in whole and fractional minutes. Declaration public double TotalMinutes { get; } Property Value Type Description Double TotalSeconds Gets the value of the current MetricTimeSpan expressed in whole and fractional seconds. Declaration public double TotalSeconds { get; } Property Value Type Description Double Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MetricTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MetricTimeSpan other) Parameters Type Name Description MetricTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(MetricTimeSpan) Divides the current time span by the specified MetricTimeSpan returning ration between them. Declaration public double Divide(MetricTimeSpan timeSpan) Parameters Type Name Description MetricTimeSpan timeSpan MetricTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MetricTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null . DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(MetricTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MetricTimeSpan other) Parameters Type Name Description MetricTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a metric time span to its MetricTimeSpan equivalent. Declaration public static MetricTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MetricTimeSpan A MetricTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out MetricTimeSpan) Converts the string representation of a metric time span to its MetricTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MetricTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MetricTimeSpan timeSpan When this method returns, contains the MetricTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Addition(MetricTimeSpan, MetricTimeSpan) Adds two specified MetricTimeSpan instances. Declaration public static MetricTimeSpan operator +(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to add. MetricTimeSpan timeSpan2 The second MetricTimeSpan to add. Returns Type Description MetricTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Equality(MetricTimeSpan, MetricTimeSpan) Determines if two MetricTimeSpan objects are equal. Declaration public static bool operator ==(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is greater than another one. Declaration public static bool operator>(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . GreaterThanOrEqual(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Implicit(MetricTimeSpan to TimeSpan) Converts MetricTimeSpan to TimeSpan . Declaration public static implicit operator TimeSpan(MetricTimeSpan timeSpan) Parameters Type Name Description MetricTimeSpan timeSpan MetricTimeSpan to convert to TimeSpan . Returns Type Description TimeSpan timeSpan represented as TimeSpan . Implicit(TimeSpan to MetricTimeSpan) Converts TimeSpan to MetricTimeSpan . Declaration public static implicit operator MetricTimeSpan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan TimeSpan to convert to MetricTimeSpan . Returns Type Description MetricTimeSpan timeSpan represented as MetricTimeSpan . Inequality(MetricTimeSpan, MetricTimeSpan) Determines if two MetricTimeSpan objects are not equal. Declaration public static bool operator !=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is less than another one. Declaration public static bool operator <(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . LessThanOrEqual(MetricTimeSpan, MetricTimeSpan) Indicates whether a specified MetricTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The first MetricTimeSpan to compare. MetricTimeSpan timeSpan2 The second MetricTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Subtraction(MetricTimeSpan, MetricTimeSpan) Subtracts a specified MetricTimeSpan from another one. Declaration public static MetricTimeSpan operator -(MetricTimeSpan timeSpan1, MetricTimeSpan timeSpan2) Parameters Type Name Description MetricTimeSpan timeSpan1 The minuend. MetricTimeSpan timeSpan2 The subtrahend. Returns Type Description MetricTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T> Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.MidiFileUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MidiFileUtilities.html",
    "title": "Class MidiFileUtilities | DryWetMIDI",
    "keywords": "Class MidiFileUtilities Utility methods for MidiFile . Inheritance Object MidiFileUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class MidiFileUtilities Methods GetDuration(MidiFile, TimeSpanType) Gets the duration of the specified MidiFile . Duration is defined by the time of last MIDI event of the file. Declaration public static ITimeSpan GetDuration(this MidiFile midiFile, TimeSpanType durationType) Parameters Type Name Description MidiFile midiFile MidiFile to get duration of. TimeSpanType durationType The type of time span representing the duration of midiFile . Returns Type Description ITimeSpan An implementation of ITimeSpan representing duration of midiFile . Exceptions Type Condition ArgumentNullException midiFile is null . InvalidEnumArgumentException durationType specified an invalid value. GetDuration(TrackChunk, TimeSpanType, TempoMap) Gets the duration of the specified TrackChunk . Duration is defined by the time of last MIDI event of the track chunk. Declaration public static ITimeSpan GetDuration(this TrackChunk trackChunk, TimeSpanType durationType, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to get duration of. TimeSpanType durationType The type of time span representing the duration of trackChunk . TempoMap tempoMap Tempo map to calculate duration. Returns Type Description ITimeSpan An implementation of ITimeSpan representing duration of trackChunk . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . InvalidEnumArgumentException durationType specified an invalid value. GetDuration(IEnumerable<TrackChunk>, TimeSpanType, TempoMap) Gets the duration of the specified collection of TrackChunk . Duration is defined by the time of last MIDI event of the track chunks. Declaration public static ITimeSpan GetDuration(this IEnumerable<TrackChunk> trackChunks, TimeSpanType durationType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection TrackChunk to get duration of. TimeSpanType durationType The type of time span representing the duration of trackChunks . TempoMap tempoMap Tempo map to calculate duration. Returns Type Description ITimeSpan An implementation of ITimeSpan representing duration of trackChunks . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>(MidiFile) Gets the duration of the specified MidiFile . Duration is defined by the time of last MIDI event of the file. Declaration public static TTimeSpan GetDuration<TTimeSpan>(this MidiFile midiFile) where TTimeSpan : class, ITimeSpan Parameters Type Name Description MidiFile midiFile MidiFile to get duration of. Returns Type Description TTimeSpan An instance of TTimeSpan representing duration of midiFile . Type Parameters Name Description TTimeSpan The type of time span representing the duration of midiFile . Exceptions Type Condition ArgumentNullException midiFile is null . NotSupportedException TTimeSpan is not supported. GetDuration<TTimeSpan>(TrackChunk, TempoMap) Gets the duration of the specified TrackChunk . Duration is defined by the time of last MIDI event of the track chunk. Declaration public static TTimeSpan GetDuration<TTimeSpan>(this TrackChunk trackChunk, TempoMap tempoMap) where TTimeSpan : class, ITimeSpan Parameters Type Name Description TrackChunk trackChunk TrackChunk to get duration of. TempoMap tempoMap Tempo map to calculate duration. Returns Type Description TTimeSpan An instance of TTimeSpan representing duration of trackChunk . Type Parameters Name Description TTimeSpan The type of time span representing the duration of trackChunk . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. GetDuration<TTimeSpan>(IEnumerable<TrackChunk>, TempoMap) Gets the duration of the specified collection of TrackChunk . Duration is defined by the time of last MIDI event of the track chunks. Declaration public static TTimeSpan GetDuration<TTimeSpan>(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap) where TTimeSpan : class, ITimeSpan Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to get duration of. TempoMap tempoMap Tempo map to calculate duration. Returns Type Description TTimeSpan An instance of TTimeSpan representing duration of trackChunks . Type Parameters Name Description TTimeSpan The type of time span representing the duration of trackChunks . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. IsEmpty(MidiFile) Checks whether the specified MidiFile is empty or not. MidiFile is empty when it doesn't contain MIDI events. Declaration public static bool IsEmpty(this MidiFile midiFile) Parameters Type Name Description MidiFile midiFile MidiFile to check emptiness of. Returns Type Description Boolean A value indicating whether midiFile is empty or not. Exceptions Type Condition ArgumentNullException midiFile is null . ShiftEvents(MidiFile, ITimeSpan) Shifts events forward inside MidiFile by the specified distance. Declaration public static void ShiftEvents(this MidiFile midiFile, ITimeSpan distance) Parameters Type Name Description MidiFile midiFile MidiFile containing events to shift. ITimeSpan distance Distance to shift events by. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . distance is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.MidiTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MidiTimeSpan.html",
    "title": "Class MidiTimeSpan | DryWetMIDI",
    "keywords": "Class MidiTimeSpan Represents a time span as an amount of time measured in units of the time division of a MIDI file. More info in the Time and length: Representations: MIDI article. Inheritance Object MidiTimeSpan Implements ITimeSpan IComparable IComparable < MidiTimeSpan > IEquatable < MidiTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeSpan : ITimeSpan, IComparable, IComparable<MidiTimeSpan>, IEquatable<MidiTimeSpan> Constructors MidiTimeSpan() Initializes a new instance of the MidiTimeSpan . Declaration public MidiTimeSpan() MidiTimeSpan(Int64) Initializes a new instance of the MidiTimeSpan with the specified time span. Declaration public MidiTimeSpan(long timeSpan) Parameters Type Name Description Int64 timeSpan Exceptions Type Condition ArgumentOutOfRangeException timeSpan is negative. Properties TimeSpan Gets the time span of the current MidiTimeSpan . Declaration public long TimeSpan { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MidiTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MidiTimeSpan other) Parameters Type Name Description MidiTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(MidiTimeSpan) Divides the current time span by the specified MidiTimeSpan returning ration between them. Declaration public double Divide(MidiTimeSpan timeSpan) Parameters Type Name Description MidiTimeSpan timeSpan MidiTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MidiTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null . DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Equals(MidiTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MidiTimeSpan other) Parameters Type Name Description MidiTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a MIDI time span to its MidiTimeSpan equivalent. Declaration public static MidiTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MidiTimeSpan A MidiTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out MidiTimeSpan) Converts the string representation of a MIDI time span to its MidiTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MidiTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MidiTimeSpan timeSpan When this method returns, contains the MidiTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Addition(MidiTimeSpan, MidiTimeSpan) Adds two specified MidiTimeSpan instances. Declaration public static MidiTimeSpan operator +(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to add. MidiTimeSpan timeSpan2 The second MidiTimeSpan to add. Returns Type Description MidiTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Equality(MidiTimeSpan, MidiTimeSpan) Determines if two MidiTimeSpan objects are equal. Declaration public static bool operator ==(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. Explicit(Int64 to MidiTimeSpan) Converts Int64 to MidiTimeSpan . Declaration public static explicit operator MidiTimeSpan(long timeSpan) Parameters Type Name Description Int64 timeSpan Int64 to convert to MidiTimeSpan . Returns Type Description MidiTimeSpan timeSpan represented as MidiTimeSpan . Exceptions Type Condition ArgumentOutOfRangeException timeSpan is negative. GreaterThan(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is greater than another one. Declaration public static bool operator>(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . GreaterThanOrEqual(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Implicit(MidiTimeSpan to Int64) Converts MidiTimeSpan to Int64 . Declaration public static implicit operator long (MidiTimeSpan timeSpan) Parameters Type Name Description MidiTimeSpan timeSpan MidiTimeSpan to convert to Int64 . Returns Type Description Int64 timeSpan represented as Int64 . Inequality(MidiTimeSpan, MidiTimeSpan) Determines if two MidiTimeSpan objects are not equal. Declaration public static bool operator !=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is less than another one. Declaration public static bool operator <(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . LessThanOrEqual(MidiTimeSpan, MidiTimeSpan) Indicates whether a specified MidiTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The first MidiTimeSpan to compare. MidiTimeSpan timeSpan2 The second MidiTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Subtraction(MidiTimeSpan, MidiTimeSpan) Subtracts a specified MidiTimeSpan from another one. Declaration public static MidiTimeSpan operator -(MidiTimeSpan timeSpan1, MidiTimeSpan timeSpan2) Parameters Type Name Description MidiTimeSpan timeSpan1 The minuend. MidiTimeSpan timeSpan2 The subtrahend. Returns Type Description MidiTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T> Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ModulationDepthRangeParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ModulationDepthRangeParameter.html",
    "title": "Class ModulationDepthRangeParameter | DryWetMIDI",
    "keywords": "Class ModulationDepthRangeParameter Modulation Depth Range (Vibrato Depth Range) registered parameter. Inheritance Object Parameter RegisteredParameter ModulationDepthRangeParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ModulationDepthRangeParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors ModulationDepthRangeParameter() Initializes a new instance of the ModulationDepthRangeParameter . Declaration public ModulationDepthRangeParameter() ModulationDepthRangeParameter(SevenBitNumber, Single) Initializes a new instance of the ModulationDepthRangeParameter with the specified exact number of half-steps and cents. Declaration public ModulationDepthRangeParameter(SevenBitNumber halfSteps, float cents) Parameters Type Name Description SevenBitNumber halfSteps The number of half-steps to tune by. Single cents The number of cents to tune by. Exceptions Type Condition ArgumentOutOfRangeException cents is out of [ MinCents ; MaxCents ] range. ModulationDepthRangeParameter(SevenBitNumber, Single, ParameterValueType) Initializes a new instance of the ModulationDepthRangeParameter with the specified number of half-steps and cents and type of the data. Declaration public ModulationDepthRangeParameter(SevenBitNumber halfSteps, float cents, ParameterValueType valueType) Parameters Type Name Description SevenBitNumber halfSteps The number of half-steps to tune by. Single cents the number of cents to tune by. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Exceptions Type Condition InvalidEnumArgumentException valueType specified an invalid value. ArgumentOutOfRangeException cents is out of [ MinCents ; MaxCents ] range. Fields DefaultCents Represents the default number of cents to tune by. Declaration public static readonly float DefaultCents Field Value Type Description Single DefaultHalfSteps Represents the default number of half-steps to tune by. Declaration public static readonly SevenBitNumber DefaultHalfSteps Field Value Type Description SevenBitNumber MaxCents Represents the largest possible number of cents to tune by. Declaration public const float MaxCents = 100F Field Value Type Description Single MinCents Represents the smallest possible number of cents to tune by. Declaration public const float MinCents = 0F Field Value Type Description Single Properties Cents Gets or sets the number of cents to tune by. Declaration public float Cents { get; set; } Property Value Type Description Single Exceptions Type Condition ArgumentOutOfRangeException value is out of [ MinCents ; MaxCents ] range. HalfSteps Gets or sets the number of half-steps to tune by. Declaration public SevenBitNumber HalfSteps { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.MusicalTimeSpan.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.MusicalTimeSpan.html",
    "title": "Class MusicalTimeSpan | DryWetMIDI",
    "keywords": "Class MusicalTimeSpan Represents a time span as a fraction of the whole note's length. More info in the Time and length: Representations: Musical article. Inheritance Object MusicalTimeSpan Implements ITimeSpan IComparable IComparable < MusicalTimeSpan > IEquatable < MusicalTimeSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MusicalTimeSpan : ITimeSpan, IComparable, IComparable<MusicalTimeSpan>, IEquatable<MusicalTimeSpan> Constructors MusicalTimeSpan() Initializes a new instance of the MusicalTimeSpan . Declaration public MusicalTimeSpan() MusicalTimeSpan(Int64) Initializes a new instance of the MusicalTimeSpan with the specified fraction of the whole note's length. Declaration public MusicalTimeSpan(long fraction) Parameters Type Name Description Int64 fraction The fraction of the whole note's length. Exceptions Type Condition ArgumentOutOfRangeException fraction is zero or negative. MusicalTimeSpan(Int64, Int64, Boolean) Initializes a new instance of the MusicalTimeSpan with the specified numerator and denominator of the fraction of the whole note's length. Declaration public MusicalTimeSpan(long numerator, long denominator, bool simplify = true) Parameters Type Name Description Int64 numerator The numerator of fraction of the whole note's length. Int64 denominator The denominator of fraction of the whole note's length. Boolean simplify true if the time span should be simplified, false otherwise. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: numerator is negative. denominator is zero or negative. Fields Eighth MusicalTimeSpan that corresponds to the eighth length. Declaration public static readonly MusicalTimeSpan Eighth Field Value Type Description MusicalTimeSpan Half MusicalTimeSpan that corresponds to the half length. Declaration public static readonly MusicalTimeSpan Half Field Value Type Description MusicalTimeSpan Quarter MusicalTimeSpan that corresponds to the quarter length. Declaration public static readonly MusicalTimeSpan Quarter Field Value Type Description MusicalTimeSpan Sixteenth MusicalTimeSpan that corresponds to the sixteenth length. Declaration public static readonly MusicalTimeSpan Sixteenth Field Value Type Description MusicalTimeSpan SixtyFourth MusicalTimeSpan that corresponds to the sixty-fourth length. Declaration public static readonly MusicalTimeSpan SixtyFourth Field Value Type Description MusicalTimeSpan ThirtySecond MusicalTimeSpan that corresponds to the thirty-second length. Declaration public static readonly MusicalTimeSpan ThirtySecond Field Value Type Description MusicalTimeSpan Whole MusicalTimeSpan that corresponds to the whole length. Declaration public static readonly MusicalTimeSpan Whole Field Value Type Description MusicalTimeSpan Properties Denominator Gets the denominator of the current MusicalTimeSpan . Declaration public long Denominator { get; } Property Value Type Description Int64 Numerator Gets the numerator of the current MusicalTimeSpan . Declaration public long Numerator { get; } Property Value Type Description Int64 Methods Add(ITimeSpan, TimeSpanMode) Adds a time span to the current one. Declaration public ITimeSpan Add(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to add to the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a sum of the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ChangeDenominator(Int64) Changes denominator of the current MusicalTimeSpan . Declaration public MusicalTimeSpan ChangeDenominator(long denominator) Parameters Type Name Description Int64 denominator New denominator. Returns Type Description MusicalTimeSpan An instance of the MusicalTimeSpan which represents the same time span as the original one but with the specified denominator. Exceptions Type Condition ArgumentOutOfRangeException denominator is zero or negative. Clone() Clones the current time span. Declaration public ITimeSpan Clone() Returns Type Description ITimeSpan Copy of the current time span. CompareTo(MusicalTimeSpan) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(MusicalTimeSpan other) Parameters Type Name Description MusicalTimeSpan other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object other) Parameters Type Name Description Object other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Divide(MusicalTimeSpan) Divides the current time span by the specified MusicalTimeSpan returning ration between them. Declaration public double Divide(MusicalTimeSpan timeSpan) Parameters Type Name Description MusicalTimeSpan timeSpan MusicalTimeSpan to divide the current time span by. Returns Type Description Double Rayion between the current MusicalTimeSpan and timeSpan . Exceptions Type Condition ArgumentNullException timeSpan is null . DivideByZeroException timeSpan represents a time span of zero length. Divide(Double) Shrinks the current time span by dividing its length by the specified divisor. Declaration public ITimeSpan Divide(double divisor) Parameters Type Name Description Double divisor Divisor to shrink the time span by. Returns Type Description ITimeSpan Time span that is the current time span shrinked by the divisor . Exceptions Type Condition ArgumentOutOfRangeException divisor is zero or negative. Dotted(Int32) Returns the current MusicalTimeSpan modified by the specified number of dots. Declaration public MusicalTimeSpan Dotted(int dotsCount) Parameters Type Name Description Int32 dotsCount The number of dots to modify the current MusicalTimeSpan . Returns Type Description MusicalTimeSpan The dotted version of the current MusicalTimeSpan . Exceptions Type Condition ArgumentOutOfRangeException dotsCount is negative. DoubleDotted() Returns the current MusicalTimeSpan modified by two dots. Declaration public MusicalTimeSpan DoubleDotted() Returns Type Description MusicalTimeSpan The double dotted version of the current MusicalTimeSpan . Duplet() Returns a duplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Duplet() Returns Type Description MusicalTimeSpan A duplet based on the current MusicalTimeSpan . Equals(MusicalTimeSpan) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MusicalTimeSpan other) Parameters Type Name Description MusicalTimeSpan other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() Multiply(Double) Stretches the current time span by multiplying its length by the specified multiplier. Declaration public ITimeSpan Multiply(double multiplier) Parameters Type Name Description Double multiplier Multiplier to stretch the time span by. Returns Type Description ITimeSpan Time span that is the current time span stretched by the multiplier . Exceptions Type Condition ArgumentOutOfRangeException multiplier is negative. Parse(String) Converts the string representation of a whole note's fraction to its MusicalTimeSpan equivalent. Declaration public static MusicalTimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description MusicalTimeSpan A MusicalTimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. SingleDotted() Returns the current MusicalTimeSpan modified by one dot. Declaration public MusicalTimeSpan SingleDotted() Returns Type Description MusicalTimeSpan The single dotted version of the current MusicalTimeSpan . Subtract(ITimeSpan, TimeSpanMode) Subtracts a time span from the current one. Declaration public ITimeSpan Subtract(ITimeSpan timeSpan, TimeSpanMode mode) Parameters Type Name Description ITimeSpan timeSpan Time span to subtract from the current one. TimeSpanMode mode Mode of the operation that defines meaning of time spans the operation will be performed on. Returns Type Description ITimeSpan Time span that is a difference between the timeSpan and the current time span. Remarks If timeSpan and the current time span have the same type, the result time span will be of this type too; otherwise - of the MathTimeSpan . Exceptions Type Condition ArgumentNullException timeSpan is invalid. InvalidEnumArgumentException mode specified an invalid value. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Triplet() Returns a triplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Triplet() Returns Type Description MusicalTimeSpan A triplet based on the current MusicalTimeSpan . TryParse(String, out MusicalTimeSpan) Converts the string representation of a whole note's fraction to its MusicalTimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out MusicalTimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. MusicalTimeSpan timeSpan When this method returns, contains the MusicalTimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Tuplet(Int32, Int32) Returns a tuplet based on the current MusicalTimeSpan . Declaration public MusicalTimeSpan Tuplet(int tupletNotesCount, int tupletSpaceSize) Parameters Type Name Description Int32 tupletNotesCount Notes count of a tuplet to construct. Int32 tupletSpaceSize Space of a tuplet to construct. Returns Type Description MusicalTimeSpan A tuplet based on the current MusicalTimeSpan . Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: tupletNotesCount is zero or negative. tupletSpaceSize is zero or negative. Operators Addition(MusicalTimeSpan, MusicalTimeSpan) Adds two specified MusicalTimeSpan instances. Declaration public static MusicalTimeSpan operator +(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to add. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to add. Returns Type Description MusicalTimeSpan An object whose value is the sum of the values of timeSpan1 and timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Division(MusicalTimeSpan, Int64) Divides the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator /(MusicalTimeSpan timeSpan, long number) Parameters Type Name Description MusicalTimeSpan timeSpan The MusicalTimeSpan to divide by number . Int64 number The multiplier. Returns Type Description MusicalTimeSpan An object whose value is the result of division of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null . ArgumentOutOfRangeException number is negative. Equality(MusicalTimeSpan, MusicalTimeSpan) Determines if two MusicalTimeSpan objects are equal. Declaration public static bool operator ==(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if time spans are equal, false otherwise. GreaterThan(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is greater than another one. Declaration public static bool operator>(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . GreaterThanOrEqual(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is greater than or equal to another one. Declaration public static bool operator >=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is greater than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Inequality(MusicalTimeSpan, MusicalTimeSpan) Determines if two MusicalTimeSpan objects are not equal. Declaration public static bool operator !=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean false if time spans are equal, true otherwise. LessThan(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is less than another one. Declaration public static bool operator <(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . LessThanOrEqual(MusicalTimeSpan, MusicalTimeSpan) Indicates whether a specified MusicalTimeSpan is less than or equal to another one. Declaration public static bool operator <=(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The first MusicalTimeSpan to compare. MusicalTimeSpan timeSpan2 The second MusicalTimeSpan to compare. Returns Type Description Boolean true if the value of timeSpan1 is less than or equal to the value of timeSpan2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . Multiply(MusicalTimeSpan, Int64) Multiplies the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator *(MusicalTimeSpan timeSpan, long number) Parameters Type Name Description MusicalTimeSpan timeSpan The MusicalTimeSpan to multiply by number . Int64 number The multiplier. Returns Type Description MusicalTimeSpan An object whose value is the result of multiplication of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null . ArgumentOutOfRangeException number is negative. Multiply(Int64, MusicalTimeSpan) Multiplies the specified MusicalTimeSpan by a number. Declaration public static MusicalTimeSpan operator *(long number, MusicalTimeSpan timeSpan) Parameters Type Name Description Int64 number The multiplier. MusicalTimeSpan timeSpan The MusicalTimeSpan to multiply by number . Returns Type Description MusicalTimeSpan An object whose value is the result of multiplication of timeSpan by number . Exceptions Type Condition ArgumentNullException timeSpan is null . ArgumentOutOfRangeException number is negative. Subtraction(MusicalTimeSpan, MusicalTimeSpan) Subtracts a specified MusicalTimeSpan from another one. Declaration public static MusicalTimeSpan operator -(MusicalTimeSpan timeSpan1, MusicalTimeSpan timeSpan2) Parameters Type Name Description MusicalTimeSpan timeSpan1 The minuend. MusicalTimeSpan timeSpan2 The subtrahend. Returns Type Description MusicalTimeSpan An object whose value is the result of the value of timeSpan1 minus the value of timeSpan2 . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan1 is null . timeSpan2 is null . ArgumentException timeSpan1 is less than timeSpan2 . Implements ITimeSpan System.IComparable System.IComparable<T> System.IEquatable<T> Extension Methods TimeSpanUtilities.Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) TimeSpanUtilities.IsZeroTimeSpan(ITimeSpan)"
  },
  "api/Melanchall.DryWetMidi.Interaction.Note.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Note.html",
    "title": "Class Note | DryWetMIDI",
    "keywords": "Class Note Represents a musical note. Inheritance Object Note Implements ILengthedObject ITimedObject IMusicalObject INotifyTimeChanged INotifyLengthChanged Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public class Note : ILengthedObject, ITimedObject, IMusicalObject, INotifyTimeChanged, INotifyLengthChanged Constructors Note(SevenBitNumber) Initializes a new instance of the Note with the specified note number. Declaration public Note(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Note(SevenBitNumber, Int64) Initializes a new instance of the Note with the specified note number and length. Declaration public Note(SevenBitNumber noteNumber, long length) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Int64 length Length of the note in units defined by time division of a MIDI file. Note(SevenBitNumber, Int64, Int64) Initializes a new instance of the Note with the specified note number, length and absolute time. Declaration public Note(SevenBitNumber noteNumber, long length, long time) Parameters Type Name Description SevenBitNumber noteNumber Number of the note (60 is middle C). Int64 length Length of the note in units defined by time division of a MIDI file. Int64 time Absolute time of the note in units defined by the time division of a MIDI file. Note(TimedEvent, TimedEvent) Initializes a new instance of the Note with the specified pair of timed events holding corresponding NoteOnEvent and NoteOffEvent events. Declaration public Note(TimedEvent timedNoteOnEvent, TimedEvent timedNoteOffEvent) Parameters Type Name Description TimedEvent timedNoteOnEvent TimedEvent holding NoteOnEvent event of a note. TimedEvent timedNoteOffEvent TimedEvent holding NoteOffEvent event of a note. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: Underlying event of the timedNoteOnEvent is not NoteOnEvent . Underlying event of the timedNoteOffEvent is not NoteOffEvent . timedNoteOffEvent goes before timedNoteOnEvent . Note(NoteName, Int32) Initializes a new instance of the Note with the specified note name and octave. Declaration public Note(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Note(NoteName, Int32, Int64) Initializes a new instance of the Note with the specified note name, octave and length. Declaration public Note(NoteName noteName, int octave, long length) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Int64 length Length of the note in units defined by time division of a MIDI file. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Note(NoteName, Int32, Int64, Int64) Initializes a new instance of the Note with the specified note name, octave, length and absolute time. Declaration public Note(NoteName noteName, int octave, long length, long time) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Int64 length Length of the note in units defined by time division of a MIDI file. Int64 time Absolute time of the note in units defined by the time division of a MIDI file. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Fields DefaultOffVelocity Default off velocity (velocity of underlying NoteOffEvent event). Declaration public static readonly SevenBitNumber DefaultOffVelocity Field Value Type Description SevenBitNumber DefaultVelocity Default velocity (velocity of underlying NoteOnEvent event). Declaration public static readonly SevenBitNumber DefaultVelocity Field Value Type Description SevenBitNumber Properties Channel Gets or sets channel to play the note on. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber EndTime Gets the end time of an object. Declaration public long EndTime { get; } Property Value Type Description Int64 Length Gets or sets the length of the note in units defined by the time division of a MIDI file. Declaration public long Length { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. NoteName Gets name of the note. Declaration public NoteName NoteName { get; } Property Value Type Description NoteName NoteNumber Gets or sets number of the note (60 is middle C). Declaration public SevenBitNumber NoteNumber { get; set; } Property Value Type Description SevenBitNumber Octave Gets octave of the note. Declaration public int Octave { get; } Property Value Type Description Int32 OffVelocity Gets or sets velocity of the underlying NoteOffEvent . Declaration public SevenBitNumber OffVelocity { get; set; } Property Value Type Description SevenBitNumber Time Gets or sets absolute time of the note in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. Velocity Gets or sets velocity of the underlying NoteOnEvent . Declaration public SevenBitNumber Velocity { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones object by creating a copy of it. Declaration public virtual ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. GetTimedNoteOffEvent() Gets the 'Note Off' timed event of the current note. Declaration public TimedEvent GetTimedNoteOffEvent() Returns Type Description TimedEvent The 'Note Off' timed event of the current note. GetTimedNoteOnEvent() Gets the 'Note On' timed event of the current note. Declaration public TimedEvent GetTimedNoteOnEvent() Returns Type Description TimedEvent The 'Note On' timed event of the current note. SetNoteNameAndOctave(NoteName, Int32) Sets note name and octave for current Note . Declaration public void SetNoteNameAndOctave(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the number of the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. Split(Int64) Splits the current object by the specified time. Declaration public SplitLengthedObject Split(long time) Parameters Type Name Description Int64 time Time to split the object at. Returns Type Description SplitLengthedObject An object containing left and right parts of the split object. Both parts have the same type as the original object. Remarks If time is less than or equal to time of the object, the left part will be null . If time is greater than or equal to end time of the object, the right part will be null . Let's see a simple example. Suppose we have an object with time of 10 and length of 50 . The table below shows what left and right parts will be in case of different values of time : Time to split at Left part Right part 5 null Copy of the object 10 null Copy of the object 30 Copy of the object with time of 10 and length of 20 Copy of the object with time of 30 and length of 30 60 Copy of the object null 70 Copy of the object null To learn about other ways to split an object please read Objects splitting article. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events LengthChanged Occurs when the length of an object has been changed. Declaration public event EventHandler<LengthChangedEventArgs> LengthChanged Event Type Type Description EventHandler < LengthChangedEventArgs > TimeChanged Occurs when the time of an object has been changed. Declaration public event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs > Implements ILengthedObject ITimedObject IMusicalObject INotifyTimeChanged INotifyLengthChanged Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.SetLength<TObject>(TObject, ITimeSpan, TempoMap) NotesManagingUtilities.SetTimeAndLength(Note, ITimeSpan, ITimeSpan, TempoMap) NotesManagingUtilities.GetMusicTheoryNote(Note) ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteData.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteData.html",
    "title": "Class NoteData | DryWetMIDI",
    "keywords": "Class NoteData Holds the data for a Note construction. Inheritance Object NoteData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteData Properties TimedNoteOffEvent Gets TimedEvent holding NoteOffEvent of the note. Declaration public TimedEvent TimedNoteOffEvent { get; } Property Value Type Description TimedEvent TimedNoteOnEvent Gets TimedEvent holding NoteOnEvent of the note. Declaration public TimedEvent TimedNoteOnEvent { get; } Property Value Type Description TimedEvent See Also NoteDetectionSettings NotesManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteDetectionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteDetectionSettings.html",
    "title": "Class NoteDetectionSettings | DryWetMIDI",
    "keywords": "Class NoteDetectionSettings Settings which define how notes should be detected and built. More info in the Getting objects: GetNotes: Settings article. Inheritance Object NoteDetectionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteDetectionSettings Properties Constructor Gets or sets custom construction method for Note . If null , default method will be used (via one of the Note 's constructors). Declaration public Func<NoteData, Note> Constructor { get; set; } Property Value Type Description Func < NoteData , Note > NoteSearchContext Gets or sets a value defining a context to search notes within. The default value is SingleEventsCollection . More info in the Getting objects: GetNotes: Settings: NoteSearchContext article. Declaration public NoteSearchContext NoteSearchContext { get; set; } Property Value Type Description NoteSearchContext Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteStartDetectionPolicy Gets or sets how start event of a note should be found in case of overlapping notes with the same note number and channel. The default value is FirstNoteOn . More info in the Getting objects: GetNotes: Settings: NoteStartDetectionPolicy article. Declaration public NoteStartDetectionPolicy NoteStartDetectionPolicy { get; set; } Property Value Type Description NoteStartDetectionPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TimedEventDetectionSettings Gets or sets settings which define how timed events should be detected and built. Declaration public TimedEventDetectionSettings TimedEventDetectionSettings { get; set; } Property Value Type Description TimedEventDetectionSettings See Also NotesManagingUtilities GetObjectsUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteSearchContext.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteSearchContext.html",
    "title": "Enum NoteSearchContext | DryWetMIDI",
    "keywords": "Enum NoteSearchContext Defines a context to search notes within. The default value is SingleEventsCollection . More info in the Getting objects: GetNotes: Settings: NoteSearchContext article. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteSearchContext Fields Name Description AllEventsCollections A note can be detected within all events collection ( EventsCollection or TrackChunk ) of the source ( MidiFile for example). It means MIDI events that make up a note can be present in different events collections. SingleEventsCollection A note should be detected only within single events collection ( EventsCollection or TrackChunk ). It means MIDI events that make up a note should be present in one events collection. See Also NoteDetectionSettings NotesManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesManager.html",
    "title": "Class NotesManager | DryWetMIDI",
    "keywords": "Class NotesManager Provides a way to manage notes of a MIDI file. Inheritance Object TimedObjectsManager < Note > NotesManager Implements IDisposable Inherited Members TimedObjectsManager<Note>.Objects TimedObjectsManager<Note>.SaveChanges() TimedObjectsManager<Note>.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS11: Use TimedObjectsManager class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs11.\")] public sealed class NotesManager : TimedObjectsManager<Note>, IDisposable Constructors NotesManager(EventsCollection, NoteDetectionSettings, Comparison<MidiEvent>) Initializes a new instance of the NotesManager with the specified events collection and comparison delegate for events that have same time. Declaration public NotesManager(EventsCollection eventsCollection, NoteDetectionSettings noteDetectionSettings = null, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds note events to manage. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Remarks If the sameTimeEventsComparison is not specified events with the same time will be placed into the underlying events collection in order of adding them through the manager. If you want to specify custom order of such events you need to specify appropriate comparison delegate. Exceptions Type Condition ArgumentNullException eventsCollection is null . Properties Notes Gets the TimedObjectsCollection<TObject> with all notes managed by the current NotesManager . Declaration public TimedObjectsCollection<Note> Notes { get; } Property Value Type Description TimedObjectsCollection < Note > Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.NotesManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NotesManagingUtilities.html",
    "title": "Class NotesManagingUtilities | DryWetMIDI",
    "keywords": "Class NotesManagingUtilities Extension methods for notes managing. Inheritance Object NotesManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesManagingUtilities Methods GetMusicTheoryNote(Note) Returns Note corresponding to the specified Note . Declaration public static Note GetMusicTheoryNote(this Note note) Parameters Type Name Description Note note Note to get music theory note from. Returns Type Description Note Note corresponding to the note . Exceptions Type Condition ArgumentNullException note is null . GetNotes(EventsCollection, NoteDetectionSettings) Gets notes contained in the specified EventsCollection . More info in the Getting objects: GetNotes article. Declaration public static ICollection<Note> GetNotes(this EventsCollection eventsCollection, NoteDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description ICollection < Note > Collection of notes contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null . See Also ProcessNotes(EventsCollection, Action<Note>, Predicate<Note>, NoteDetectionSettings) ProcessNotes(EventsCollection, Action<Note>, NoteDetectionSettings) RemoveNotes(EventsCollection, NoteDetectionSettings) RemoveNotes(EventsCollection, Predicate<Note>, NoteDetectionSettings) GetObjectsUtilities GetNotes(MidiFile, NoteDetectionSettings) Gets notes contained in the specified MidiFile . More info in the Getting objects: GetNotes article. Declaration public static ICollection<Note> GetNotes(this MidiFile file, NoteDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for notes. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description ICollection < Note > Collection of notes contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null . See Also ProcessNotes(MidiFile, Action<Note>, Predicate<Note>, NoteDetectionSettings) ProcessNotes(MidiFile, Action<Note>, NoteDetectionSettings) RemoveNotes(MidiFile, NoteDetectionSettings) RemoveNotes(MidiFile, Predicate<Note>, NoteDetectionSettings) GetObjectsUtilities GetNotes(TrackChunk, NoteDetectionSettings) Gets notes contained in the specified TrackChunk . More info in the Getting objects: GetNotes article. Declaration public static ICollection<Note> GetNotes(this TrackChunk trackChunk, NoteDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description ICollection < Note > Collection of notes contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null . See Also ProcessNotes(TrackChunk, Action<Note>, Predicate<Note>, NoteDetectionSettings) ProcessNotes(TrackChunk, Action<Note>, NoteDetectionSettings) RemoveNotes(TrackChunk, NoteDetectionSettings) RemoveNotes(TrackChunk, Predicate<Note>, NoteDetectionSettings) GetObjectsUtilities GetNotes(IEnumerable<MidiEvent>, NoteDetectionSettings) Gets notes contained in the specified collection of MidiEvent . More info in the Getting objects: GetNotes article. Declaration public static ICollection<Note> GetNotes(this IEnumerable<MidiEvent> midiEvents, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < MidiEvent > midiEvents Collection of MidiEvent to search for notes. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description ICollection < Note > Collection of notes contained in midiEvents ordered by time. Exceptions Type Condition ArgumentNullException midiEvents is null . GetNotes(IEnumerable<TrackChunk>, NoteDetectionSettings) Gets notes contained in the specified collection of TrackChunk . More info in the Getting objects: GetNotes article. Declaration public static ICollection<Note> GetNotes(this IEnumerable<TrackChunk> trackChunks, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for notes. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description ICollection < Note > Collection of notes contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null . See Also ProcessNotes(IEnumerable<TrackChunk>, Action<Note>, Predicate<Note>, NoteDetectionSettings) ProcessNotes(IEnumerable<TrackChunk>, Action<Note>, NoteDetectionSettings) RemoveNotes(IEnumerable<TrackChunk>, NoteDetectionSettings) RemoveNotes(IEnumerable<TrackChunk>, Predicate<Note>, NoteDetectionSettings) GetObjectsUtilities ManageNotes(EventsCollection, NoteDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the specified events collection. More info in the Objects managers article. Declaration public static TimedObjectsManager<Note> ManageNotes(this EventsCollection eventsCollection, NoteDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds notes to manage. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the eventsCollection via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < Note > An instance of the TimedObjectsManager<TObject> that can be used to manage notes represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null . ManageNotes(TrackChunk, NoteDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the events collection of the specified track chunk. More info in the Objects managers article. Declaration public static TimedObjectsManager<Note> ManageNotes(this TrackChunk trackChunk, NoteDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds notes to manage. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the trackChunk via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < Note > An instance of the TimedObjectsManager<TObject> that can be used to manage notes represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null . ProcessNotes(EventsCollection, Action<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the EventsCollection . Declaration public static int ProcessNotes(this EventsCollection eventsCollection, Action<Note> action, NoteDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to process. Action < Note > action The action to perform on each Note contained in the eventsCollection . NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . ProcessNotes(EventsCollection, Action<Note>, Predicate<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the EventsCollection . Declaration public static int ProcessNotes(this EventsCollection eventsCollection, Action<Note> action, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to process. Action < Note > action The action to perform on each Note contained in the eventsCollection . Predicate < Note > match The predicate that defines the conditions of the Note to process. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . match is null . ProcessNotes(MidiFile, Action<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the MidiFile . Declaration public static int ProcessNotes(this MidiFile file, Action<Note> action, NoteDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to process. Action < Note > action The action to perform on each Note contained in the file . NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . ProcessNotes(MidiFile, Action<Note>, Predicate<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the MidiFile . Declaration public static int ProcessNotes(this MidiFile file, Action<Note> action, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to process. Action < Note > action The action to perform on each Note contained in the file . Predicate < Note > match The predicate that defines the conditions of the Note to process. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . match is null . ProcessNotes(TrackChunk, Action<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the TrackChunk . Declaration public static int ProcessNotes(this TrackChunk trackChunk, Action<Note> action, NoteDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunk . NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . ProcessNotes(TrackChunk, Action<Note>, Predicate<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the TrackChunk . Declaration public static int ProcessNotes(this TrackChunk trackChunk, Action<Note> action, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunk . Predicate < Note > match The predicate that defines the conditions of the Note to process. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . match is null . ProcessNotes(IEnumerable<TrackChunk>, Action<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the collection of TrackChunk . Declaration public static int ProcessNotes(this IEnumerable<TrackChunk> trackChunks, Action<Note> action, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunks . NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . ProcessNotes(IEnumerable<TrackChunk>, Action<Note>, Predicate<Note>, NoteDetectionSettings) Performs the specified action on each Note contained in the collection of TrackChunk . Declaration public static int ProcessNotes(this IEnumerable<TrackChunk> trackChunks, Action<Note> action, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to process. Action < Note > action The action to perform on each Note contained in the trackChunks . Predicate < Note > match The predicate that defines the conditions of the Note to process. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of processed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . match is null . RemoveNotes(EventsCollection, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this EventsCollection eventsCollection, NoteDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException eventsCollection is null . RemoveNotes(EventsCollection, Predicate<Note>, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this EventsCollection eventsCollection, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . match is null . RemoveNotes(MidiFile, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this MidiFile file, NoteDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException file is null . RemoveNotes(MidiFile, Predicate<Note>, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this MidiFile file, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . match is null . RemoveNotes(TrackChunk, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this TrackChunk trackChunk, NoteDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException trackChunk is null . RemoveNotes(TrackChunk, Predicate<Note>, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this TrackChunk trackChunk, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . match is null . RemoveNotes(IEnumerable<TrackChunk>, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this IEnumerable<TrackChunk> trackChunks, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException trackChunks is null . RemoveNotes(IEnumerable<TrackChunk>, Predicate<Note>, NoteDetectionSettings) Removes all the Note that match the conditions defined by the specified predicate. Declaration public static int RemoveNotes(this IEnumerable<TrackChunk> trackChunks, Predicate<Note> match, NoteDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for notes to remove. Predicate < Note > match The predicate that defines the conditions of the Note to remove. NoteDetectionSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description Int32 Count of removed notes. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . match is null . SetTimeAndLength(Note, ITimeSpan, ITimeSpan, TempoMap) Sets time and length of the specified note. Declaration [Obsolete(\"OBS15: Use SetTime/SetLength methods from TimedObjectUtilities/LengthedObjectUtilities. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs15.\")] public static Note SetTimeAndLength(this Note note, ITimeSpan time, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description Note note Note to set time and length to. ITimeSpan time Time to set to note . ITimeSpan length Length to set to note . TempoMap tempoMap Tempo map that will be used for time and length conversion. Returns Type Description Note An input note with new time and length. Exceptions Type Condition ArgumentNullException One of the following errors occured: note is null . time is null . length is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.NoteStartDetectionPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.NoteStartDetectionPolicy.html",
    "title": "Enum NoteStartDetectionPolicy | DryWetMIDI",
    "keywords": "Enum NoteStartDetectionPolicy Defines how start event of a note should be found in case of overlapping notes with the same note number and channel. The default value is FirstNoteOn . More info in the Getting objects: GetNotes: Settings: NoteStartDetectionPolicy article. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteStartDetectionPolicy Fields Name Description FirstNoteOn First Note On event with corresponding note number and channel should be taken. LastNoteOn Last Note On event with corresponding note number and channel should be taken. See Also NoteDetectionSettings NotesManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.ObjectDetectionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ObjectDetectionSettings.html",
    "title": "Class ObjectDetectionSettings | DryWetMIDI",
    "keywords": "Class ObjectDetectionSettings Settings which define how objects should be detected and built. Inheritance Object ObjectDetectionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ObjectDetectionSettings Properties ChordDetectionSettings Gets or sets settings which define how chords should be detected and built. Declaration public ChordDetectionSettings ChordDetectionSettings { get; set; } Property Value Type Description ChordDetectionSettings NoteDetectionSettings Gets or sets settings which define how notes should be detected and built. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings RestDetectionSettings Gets or sets settings which define how rests should be detected and built. Declaration public RestDetectionSettings RestDetectionSettings { get; set; } Property Value Type Description RestDetectionSettings TimedEventDetectionSettings Gets or sets settings which define how timed events should be detected and built. Declaration public TimedEventDetectionSettings TimedEventDetectionSettings { get; set; } Property Value Type Description TimedEventDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Interaction.ObjectIdUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ObjectIdUtilities.html",
    "title": "Class ObjectIdUtilities | DryWetMIDI",
    "keywords": "Class ObjectIdUtilities Provides methods to get the ID (key) of an object. Inheritance Object ObjectIdUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class ObjectIdUtilities Methods GetObjectId(ITimedObject) Gets the ID (key) of the specified object using standard logic. Declaration public static IObjectId GetObjectId(this ITimedObject obj) Parameters Type Name Description ITimedObject obj Object to get ID for. Returns Type Description IObjectId An object that represents the ID of the obj . Exceptions Type Condition NotSupportedException Getting of ID for obj is not supported. GetObjectId<TId>(TId) Gets the ID (key) as the specified value. Declaration public static IObjectId GetObjectId<TId>(TId id) Parameters Type Name Description TId id ID to wrap and return. Returns Type Description IObjectId An object that holds id . Type Parameters Name Description TId"
  },
  "api/Melanchall.DryWetMidi.Interaction.ObjectType.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ObjectType.html",
    "title": "Enum ObjectType | DryWetMIDI",
    "keywords": "Enum ObjectType The type of objects to get with methods of GetObjectsUtilities . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax [Flags] public enum ObjectType Fields Name Description Chord Represents a chord (see Chord ). Note Represents a note (see Note ). Rest Represents a rest (see Rest ). TimedEvent Represents a timed event (see TimedEvent )."
  },
  "api/Melanchall.DryWetMidi.Interaction.Parameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Parameter.html",
    "title": "Class Parameter | DryWetMIDI",
    "keywords": "Class Parameter Represents parameter (RPN or NRPN) encoded as series of Control Change events. Inheritance Object Parameter RegisteredParameter Implements ITimedObject INotifyTimeChanged Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class Parameter : ITimedObject, INotifyTimeChanged Properties Channel Gets or sets the channel of the current parameter. This channel is in fact the channel of Control Change events that represent the parameter. Declaration public FourBitNumber Channel { get; set; } Property Value Type Description FourBitNumber Time Gets or sets absolute time of the parameter data in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. ValueType Gets or sets the type of the current parameter's value. Declaration public ParameterValueType ValueType { get; set; } Property Value Type Description ParameterValueType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Methods Clone() Clones object by creating a copy of it. Declaration public abstract ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. GetTimedEvents() Returns the collection of TimedEvent objects that represent the current parameter. In fact, each TimedEvent object will contain ControlChangeEvent event. Declaration public abstract IEnumerable<TimedEvent> GetTimedEvents() Returns Type Description IEnumerable < TimedEvent > Collection of TimedEvent objects that represent the current parameter. Events TimeChanged Occurs when the time of an object has been changed. Declaration public event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs > Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ParameterValueType.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ParameterValueType.html",
    "title": "Enum ParameterValueType | DryWetMIDI",
    "keywords": "Enum ParameterValueType The type of a parameter's value. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum ParameterValueType Fields Name Description Decrement Parameter's value represents a value which should be subtracted from the current value of the parameter. Exact Parameter's value represents exact value of the parameter. Increment Parameter's value represents a value which should be added to the current value of the parameter."
  },
  "api/Melanchall.DryWetMidi.Interaction.PitchBendSensitivityParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.PitchBendSensitivityParameter.html",
    "title": "Class PitchBendSensitivityParameter | DryWetMIDI",
    "keywords": "Class PitchBendSensitivityParameter Pitch Bend Sensitivity registered parameter. Inheritance Object Parameter RegisteredParameter PitchBendSensitivityParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PitchBendSensitivityParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors PitchBendSensitivityParameter() Initializes a new instance of the PitchBendSensitivityParameter . Declaration public PitchBendSensitivityParameter() PitchBendSensitivityParameter(SevenBitNumber, SevenBitNumber) Initializes a new instance of the PitchBendSensitivityParameter with the specified exact number of half-steps and cents. Declaration public PitchBendSensitivityParameter(SevenBitNumber halfSteps, SevenBitNumber cents) Parameters Type Name Description SevenBitNumber halfSteps The number of half-steps of the sensitivity range. SevenBitNumber cents The number of cents of the sensitivity range. PitchBendSensitivityParameter(SevenBitNumber, SevenBitNumber, ParameterValueType) Initializes a new instance of the ModulationDepthRangeParameter with the specified number of half-steps and cents and type of the data. Declaration public PitchBendSensitivityParameter(SevenBitNumber halfSteps, SevenBitNumber cents, ParameterValueType valueType) Parameters Type Name Description SevenBitNumber halfSteps The number of half-steps of the sensitivity range. SevenBitNumber cents the number of cents of the sensitivity range. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Exceptions Type Condition InvalidEnumArgumentException valueType specified an invalid value. Fields DefaultCents Represents the default number of cents of the sensitivity range. Declaration public static readonly SevenBitNumber DefaultCents Field Value Type Description SevenBitNumber DefaultHalfSteps Represents the default number of half-steps of the sensitivity range. Declaration public static readonly SevenBitNumber DefaultHalfSteps Field Value Type Description SevenBitNumber Properties Cents Gets or sets the number of cents of the sensitivity range. Declaration public SevenBitNumber Cents { get; set; } Property Value Type Description SevenBitNumber HalfSteps Gets or sets the number of half-steps of the sensitivity range. Declaration public SevenBitNumber HalfSteps { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.RegisteredParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.RegisteredParameter.html",
    "title": "Class RegisteredParameter | DryWetMIDI",
    "keywords": "Class RegisteredParameter Represents MIDI registered parameter (RPN). Inheritance Object Parameter RegisteredParameter ChannelCoarseTuningParameter ChannelFineTuningParameter ModulationDepthRangeParameter PitchBendSensitivityParameter TuningBankSelectParameter TuningProgramChangeParameter Implements ITimedObject INotifyTimeChanged Inherited Members Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Parameter.Clone() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class RegisteredParameter : Parameter, ITimedObject, INotifyTimeChanged Constructors RegisteredParameter(RegisteredParameterType) Initializes a new instance of the RegisteredParameter with the specified type of a parameter. Declaration protected RegisteredParameter(RegisteredParameterType parameterType) Parameters Type Name Description RegisteredParameterType parameterType The type of parameter. Properties ParameterType Gets the type of the current parameter. Declaration public RegisteredParameterType ParameterType { get; } Property Value Type Description RegisteredParameterType Methods GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected abstract void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected abstract int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. GetTimedEvents() Returns the collection of TimedEvent objects that represent the current parameter. In fact, each TimedEvent object will contain ControlChangeEvent event. Declaration public override IEnumerable<TimedEvent> GetTimedEvents() Returns Type Description IEnumerable < TimedEvent > Collection of TimedEvent objects that represent the current parameter. Overrides Parameter.GetTimedEvents() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.RegisteredParameterType.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.RegisteredParameterType.html",
    "title": "Enum RegisteredParameterType | DryWetMIDI",
    "keywords": "Enum RegisteredParameterType the type of a registered parameter. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum RegisteredParameterType : byte Fields Name Description ChannelCoarseTuning Channel Coarse Tuning registered parameter. ChannelFineTuning Channel Fine Tuning registered parameter. ModulationDepthRange Modulation Depth Range (Vibrato Depth Range) registered parameter. PitchBendSensitivity Pitch Bend Sensitivity registered parameter. TuningBankSelect Tuning Bank Select registered parameter. TuningProgramChange Tuning Program Change registered parameter."
  },
  "api/Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ResizeNotesUtilities.html",
    "title": "Class ResizeNotesUtilities | DryWetMIDI",
    "keywords": "Class ResizeNotesUtilities Provides ways to resize collection of notes. Inheritance Object ResizeNotesUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS18: Use Resizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs18.\")] public static class ResizeNotesUtilities Methods ResizeNotes(IEnumerable<Note>, ITimeSpan, TimeSpanType, TempoMap) Resizes group of notes to the specified length treating all notes as single object. Declaration [Obsolete(\"OBS18: Use Resizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs18.\")] public static void ResizeNotes(this IEnumerable<Note> notes, ITimeSpan length, TimeSpanType distanceCalculationType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < Note > notes Notes to resize. ITimeSpan length New length of the notes collection. TimeSpanType distanceCalculationType Type of distance calculations. TempoMap tempoMap Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . length is null . tempoMap is null . ArgumentException BarBeatTicks or BarBeatFraction is used for distanceCalculationType which is unsupported. InvalidEnumArgumentException distanceCalculationType specified an invalid value. ResizeNotes(IEnumerable<Note>, Double, TimeSpanType, TempoMap) Resizes group of notes by the specified ratio treating all notes as single object. For example, resizing by ratio of 0.5 shrinks group of notes by two times. Declaration [Obsolete(\"OBS18: Use Resizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs18.\")] public static void ResizeNotes(this IEnumerable<Note> notes, double ratio, TimeSpanType distanceCalculationType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < Note > notes Notes to resize. Double ratio Ratio to resize notes by. TimeSpanType distanceCalculationType Type of distance calculations. TempoMap tempoMap Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . tempoMap is null . ArgumentException BarBeatTicks or BarBeatFraction is used for distanceCalculationType which is unsupported. ArgumentOutOfRangeException ratio is negative. InvalidEnumArgumentException distanceCalculationType specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Interaction.Rest.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Rest.html",
    "title": "Class Rest | DryWetMIDI",
    "keywords": "Class Rest Represents a musical rest. More info in the Getting objects: GetObjects: Rests article. Inheritance Object Rest Implements ILengthedObject ITimedObject INotifyTimeChanged INotifyLengthChanged Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Rest : ILengthedObject, ITimedObject, INotifyTimeChanged, INotifyLengthChanged Properties Channel Gets a channel the rest was constructed for. Declaration public FourBitNumber? Channel { get; } Property Value Type Description Nullable < FourBitNumber > EndTime Gets the end time of an object. Declaration public long EndTime { get; } Property Value Type Description Int64 Length Gets length of an object. Declaration public long Length { get; set; } Property Value Type Description Int64 NoteNumber Gets a note number the rest was constructed for. Declaration public SevenBitNumber? NoteNumber { get; } Property Value Type Description Nullable < SevenBitNumber > Time Gets start time of an object. Declaration public long Time { get; set; } Property Value Type Description Int64 Methods Clone() Clones object by creating a copy of it. Declaration public ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Split(Int64) Splits the current object by the specified time. Declaration public SplitLengthedObject Split(long time) Parameters Type Name Description Int64 time Time to split the object at. Returns Type Description SplitLengthedObject An object containing left and right parts of the split object. Both parts have the same type as the original object. Remarks If time is less than or equal to time of the object, the left part will be null . If time is greater than or equal to end time of the object, the right part will be null . Let's see a simple example. Suppose we have an object with time of 10 and length of 50 . The table below shows what left and right parts will be in case of different values of time : Time to split at Left part Right part 5 null Copy of the object 10 null Copy of the object 30 Copy of the object with time of 10 and length of 20 Copy of the object with time of 30 and length of 30 60 Copy of the object null 70 Copy of the object null To learn about other ways to split an object please read Objects splitting article. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events LengthChanged Occurs when the length of an object has been changed. Declaration public event EventHandler<LengthChangedEventArgs> LengthChanged Event Type Type Description EventHandler < LengthChangedEventArgs > TimeChanged Occurs when the time of an object has been changed. Declaration public event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs > Operators Equality(Rest, Rest) Determines if two Rest objects are equal. Declaration public static bool operator ==(Rest rest1, Rest rest2) Parameters Type Name Description Rest rest1 The first Rest to compare. Rest rest2 The second Rest to compare. Returns Type Description Boolean true if the rests are equal, false otherwise. Inequality(Rest, Rest) Determines if two Rest objects are not equal. Declaration public static bool operator !=(Rest rest1, Rest rest2) Parameters Type Name Description Rest rest1 The first Rest to compare. Rest rest2 The second Rest to compare. Returns Type Description Boolean false if the rests are equal, true otherwise. Implements ILengthedObject ITimedObject INotifyTimeChanged INotifyLengthChanged Extension Methods LengthedObjectUtilities.LengthAs<TLength>(ILengthedObject, TempoMap) LengthedObjectUtilities.LengthAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.EndTimeAs<TTime>(ILengthedObject, TempoMap) LengthedObjectUtilities.EndTimeAs(ILengthedObject, TimeSpanType, TempoMap) LengthedObjectUtilities.SetLength<TObject>(TObject, ITimeSpan, TempoMap) ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.RestDetectionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.RestDetectionSettings.html",
    "title": "Class RestDetectionSettings | DryWetMIDI",
    "keywords": "Class RestDetectionSettings Settings which define how rests should be detected and built. Inheritance Object RestDetectionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RestDetectionSettings Remarks Please see Getting objects (section GetObjects → Rests) article to learn more. Properties RestSeparationPolicy Gets or sets a value that defines a rule for creating rests. The default value is NoSeparation . Declaration public RestSeparationPolicy RestSeparationPolicy { get; set; } Property Value Type Description RestSeparationPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. See Also GetObjectsUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.RestSeparationPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.RestSeparationPolicy.html",
    "title": "Enum RestSeparationPolicy | DryWetMIDI",
    "keywords": "Enum RestSeparationPolicy Determines a rule for creating rests. The default value is NoSeparation . More info in the Getting objects: GetObjects: Rests article. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum RestSeparationPolicy Fields Name Description NoSeparation Rests should be constructed only when there are no notes at all on any channel. SeparateByChannel Rests should be constructed individually for each channel ignoring note number. SeparateByChannelAndNoteNumber Rests should be constructed individually for each channel and note number. SeparateByNoteNumber Rests should be constructed individually for each note number ignoring channel."
  },
  "api/Melanchall.DryWetMidi.Interaction.SplitLengthedObject.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.SplitLengthedObject.html",
    "title": "Class SplitLengthedObject | DryWetMIDI",
    "keywords": "Class SplitLengthedObject Container for left and right parts of split lengthed object. Inheritance Object SplitLengthedObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplitLengthedObject Properties LeftPart The left part of a split object. Declaration public ILengthedObject LeftPart { get; } Property Value Type Description ILengthedObject RightPart The right part of a split object. Declaration public ILengthedObject RightPart { get; } Property Value Type Description ILengthedObject"
  },
  "api/Melanchall.DryWetMidi.Interaction.SteppedGrid.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.SteppedGrid.html",
    "title": "Class SteppedGrid | DryWetMIDI",
    "keywords": "Class SteppedGrid Grid where points in time are distributed with the specified step or collection of steps. Inheritance Object SteppedGrid Implements IGrid Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SteppedGrid : IGrid Constructors SteppedGrid(ITimeSpan) Initializes a new instance of the SteppedGrid with the specified step so all grid's times will be distributed with equal distance between adjacent ones starting from zero. Declaration public SteppedGrid(ITimeSpan step) Parameters Type Name Description ITimeSpan step Distance between adjacent times. Exceptions Type Condition ArgumentNullException step is null . SteppedGrid(ITimeSpan, ITimeSpan) Initializes a new instance of the SteppedGrid with the specified start time and step so all grid's times will be distributed with equal distance between adjacent ones starting from the specified start time. Declaration public SteppedGrid(ITimeSpan start, ITimeSpan step) Parameters Type Name Description ITimeSpan start Start time of the grid. ITimeSpan step Distance between adjacent times. Exceptions Type Condition ArgumentNullException One of the following errors occured: start is null . step is null . SteppedGrid(ITimeSpan, IEnumerable<ITimeSpan>) Initializes a new instance of the SteppedGrid with the specified start time and steps so all grid's times will be stepped according to those steps. Declaration public SteppedGrid(ITimeSpan start, IEnumerable<ITimeSpan> steps) Parameters Type Name Description ITimeSpan start Start time of the grid. IEnumerable < ITimeSpan > steps Collection of grid's steps. Remarks Grid's times will be distributed according to provided steps. So distance between first adjacent times will be equal to first step, distance between second adjacent times will be equal to second step and so on. When last step reached steps will go from the first one. Exceptions Type Condition ArgumentNullException One of the following errors occured: start is null . steps is null . ArgumentException steps contains null . SteppedGrid(IEnumerable<ITimeSpan>) Initializes a new instance of the SteppedGrid with the specified steps so all grid's times will be stepped according to those steps. Declaration public SteppedGrid(IEnumerable<ITimeSpan> steps) Parameters Type Name Description IEnumerable < ITimeSpan > steps Collection of grid's steps. Remarks Grid's times will be distributed according to provided steps. So distance between first adjacent times will be equal to first step, distance between second adjacent times will be equal to second step and so on. When last step reached, steps will go from the first one. Exceptions Type Condition ArgumentNullException steps is null . ArgumentException steps contains null . Properties Start Start time of the current grid. Declaration public ITimeSpan Start { get; } Property Value Type Description ITimeSpan Steps Steps of the current grid. Declaration public IEnumerable<ITimeSpan> Steps { get; } Property Value Type Description IEnumerable < ITimeSpan > Methods GetTimes(TempoMap) Gets points in time of the current grid. Declaration public IEnumerable<long> GetTimes(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map used to get grid's times. Returns Type Description IEnumerable < Int64 > Collection of points in time of the current grid. Exceptions Type Condition ArgumentNullException tempoMap is null . Implements IGrid"
  },
  "api/Melanchall.DryWetMidi.Interaction.Tempo.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.Tempo.html",
    "title": "Class Tempo | DryWetMIDI",
    "keywords": "Class Tempo Represents tempo expressed in microseconds per quarter note or beats per minute. Inheritance Object Tempo Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Tempo Constructors Tempo(Int64) Initializes a new instance of the Tempo with the specified number of microseconds per quarter note. Declaration public Tempo(long microsecondsPerQuarterNote) Parameters Type Name Description Int64 microsecondsPerQuarterNote Number of microseconds per quarter note. Exceptions Type Condition ArgumentOutOfRangeException microsecondsPerQuarterNote is zero or negative. Fields Default Default tempo which is 500,000 microseconds per quarter note or 120 beats per minute. Declaration public static readonly Tempo Default Field Value Type Description Tempo Properties BeatsPerMinute Gets the number of beats per minute. Declaration public double BeatsPerMinute { get; } Property Value Type Description Double MicrosecondsPerQuarterNote Gets number of microseconds per quarter note. Declaration public long MicrosecondsPerQuarterNote { get; } Property Value Type Description Int64 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) FromBeatsPerMinute(Double) Creates an instance of the Tempo with the specified number of beats per minute. Declaration public static Tempo FromBeatsPerMinute(double beatsPerMinute) Parameters Type Name Description Double beatsPerMinute Number of beats per minute. Returns Type Description Tempo An instance of the Tempo which represents tempo as specified number of beats per minute. Exceptions Type Condition ArgumentOutOfRangeException beatsPerMinute is zero or negative. FromMillisecondsPerQuarterNote(Int64) Creates an instance of the Tempo with the specified number of milliseconds per quarter note. Declaration public static Tempo FromMillisecondsPerQuarterNote(long millisecondsPerQuarterNote) Parameters Type Name Description Int64 millisecondsPerQuarterNote Number of milliseconds per quarter note. Returns Type Description Tempo An instance of the Tempo which represents tempo as specified number of milliseconds per quarter note. Exceptions Type Condition ArgumentOutOfRangeException millisecondsPerQuarterNote is zero or negative. GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(Tempo, Tempo) Determines if two Tempo objects are equal. Declaration public static bool operator ==(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the tempos are equal, false otherwise. GreaterThan(Tempo, Tempo) Indicates whether a specified Tempo is greater than another one. Declaration public static bool operator>(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the value of tempo1 is greater than the value of tempo2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: tempo1 is null . tempo2 is null . GreaterThanOrEqual(Tempo, Tempo) Indicates whether a specified Tempo is greater than or equal to another one. Declaration public static bool operator >=(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the value of tempo1 is greater than or equal to the value of tempo2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: tempo1 is null . tempo2 is null . Inequality(Tempo, Tempo) Determines if two Tempo objects are not equal. Declaration public static bool operator !=(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean false if the tempos are equal, true otherwise. LessThan(Tempo, Tempo) Indicates whether a specified Tempo is less than another one. Declaration public static bool operator <(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the value of tempo1 is less than the value of tempo2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: tempo1 is null . tempo2 is null . LessThanOrEqual(Tempo, Tempo) Indicates whether a specified Tempo is less than or equal to another one. Declaration public static bool operator <=(Tempo tempo1, Tempo tempo2) Parameters Type Name Description Tempo tempo1 The first Tempo to compare. Tempo tempo2 The second Tempo to compare. Returns Type Description Boolean true if the value of tempo1 is less than or equal to the value of tempo2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: tempo1 is null . tempo2 is null . See Also TempoMap"
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMap.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMap.html",
    "title": "Class TempoMap | DryWetMIDI",
    "keywords": "Class TempoMap Represents a tempo map of a MIDI file. More info in the Tempo map article. Inheritance Object TempoMap Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TempoMap Fields Default The default tempo map which uses 4/4 time signature and tempo of 500,000 microseconds per quarter note. Declaration public static readonly TempoMap Default Field Value Type Description TempoMap Properties TimeDivision Gets the time division used by a tempo map. Declaration public TimeDivision TimeDivision { get; } Property Value Type Description TimeDivision Methods Clone() Clones the current TempoMap . Declaration public TempoMap Clone() Returns Type Description TempoMap An instance of the TempoMap which is a clone of the current one. Create(TimeDivision) Creates an instance of the TempoMap with the specified time division using default tempo (120 BPM) and default time signature (4/4). Declaration public static TempoMap Create(TimeDivision timeDivision) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division. Exceptions Type Condition ArgumentNullException timeDivision is null . Create(TimeDivision, Tempo) Creates an instance of the TempoMap with the specified time division and tempo using default time signature (4/4). Declaration public static TempoMap Create(TimeDivision timeDivision, Tempo tempo) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Tempo tempo Tempo of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division and tempo. Exceptions Type Condition ArgumentNullException One of the following errors occured: timeDivision is null . tempo is null . Create(TimeDivision, Tempo, TimeSignature) Creates an instance of the TempoMap with the specified time division, tempo and time signature. Declaration public static TempoMap Create(TimeDivision timeDivision, Tempo tempo, TimeSignature timeSignature) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. Tempo tempo Tempo of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division, tempoand time signature. Exceptions Type Condition ArgumentNullException One of the following errors occured: timeDivision is null . tempo is null . timeSignature is null . Create(TimeDivision, TimeSignature) Creates an instance of the TempoMap with the specified time division and time signature using default tempo (120 BPM). Declaration public static TempoMap Create(TimeDivision timeDivision, TimeSignature timeSignature) Parameters Type Name Description TimeDivision timeDivision Time division of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time division and time signature. Exceptions Type Condition ArgumentNullException One of the following errors occured: timeDivision is null . timeSignature is null . Create(Tempo) Creates an instance of the TempoMap with the specified tempo using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(Tempo tempo) Parameters Type Name Description Tempo tempo Tempo of the tempo map. Returns Type Description TempoMap TempoMap with the specified tempo. Exceptions Type Condition ArgumentNullException tempo is null . Create(Tempo, TimeSignature) Creates an instance of the TempoMap with the specified tempo and time signature using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(Tempo tempo, TimeSignature timeSignature) Parameters Type Name Description Tempo tempo Tempo of the tempo map. TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified tempo and time signature. Exceptions Type Condition ArgumentNullException One of the following errors occured: tempo is null . timeSignature is null . Create(TimeSignature) Creates an instance of the TempoMap with the specified time signature using default time division (96 ticks per quarter note). Declaration public static TempoMap Create(TimeSignature timeSignature) Parameters Type Name Description TimeSignature timeSignature Time signature of the tempo map. Returns Type Description TempoMap TempoMap with the specified time signature. Exceptions Type Condition ArgumentNullException timeSignature is null . GetTempoAtTime(ITimeSpan) Returns tempo at the specified time. Declaration public Tempo GetTempoAtTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time to get tempo at. Returns Type Description Tempo Tempo at the time of time . Exceptions Type Condition ArgumentNullException time is null . GetTempoChanges() Returns the collection of tempo changes. Declaration public IEnumerable<ValueChange<Tempo>> GetTempoChanges() Returns Type Description IEnumerable < ValueChange < Tempo >> Collection of tempo changes. GetTimeSignatureAtTime(ITimeSpan) Returns time signature at the specified time. Declaration public TimeSignature GetTimeSignatureAtTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time signature to get tempo at. Returns Type Description TimeSignature Time signature at the time of time . Exceptions Type Condition ArgumentNullException time is null . GetTimeSignatureChanges() Returns the collection of time signature changes. Declaration public IEnumerable<ValueChange<TimeSignature>> GetTimeSignatureChanges() Returns Type Description IEnumerable < ValueChange < TimeSignature >> Collection of time signature changes."
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMapManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMapManager.html",
    "title": "Class TempoMapManager | DryWetMIDI",
    "keywords": "Class TempoMapManager Provides a way to manage tempo map of a MIDI file. More info in the Tempo map article. Inheritance Object TempoMapManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TempoMapManager : IDisposable Constructors TempoMapManager() Initializes a new instance of the TempoMapManager that can be used to manage new tempo map with the default time division (96 ticks per quarter note). Declaration public TempoMapManager() TempoMapManager(TimeDivision) Initializes a new instance of the TempoMapManager with the specified time division. Declaration public TempoMapManager(TimeDivision timeDivision) Parameters Type Name Description TimeDivision timeDivision Time division of a new tempo that will be managed by this manager. Exceptions Type Condition ArgumentNullException timeDivision is null . TempoMapManager(TimeDivision, IEnumerable<EventsCollection>) Initializes a new instance of the TempoMapManager with the specified time division and events collections. Declaration public TempoMapManager(TimeDivision timeDivision, IEnumerable<EventsCollection> eventsCollections) Parameters Type Name Description TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. IEnumerable < EventsCollection > eventsCollections Collection of EventsCollection which hold events that represent tempo map of a MIDI file. Exceptions Type Condition ArgumentNullException One of the following errors occured: timeDivision is null . eventsCollections is null . ArgumentException eventsCollections is empty. Properties TempoMap Gets current tempo map built by the TempoMapManager . Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap Methods ClearTempo(ITimeSpan) Removes all changes of tempo that occured since the specified time. Declaration public void ClearTempo(ITimeSpan startTime) Parameters Type Name Description ITimeSpan startTime Time to remove changes of tempo since. Exceptions Type Condition ArgumentNullException startTime is null . ClearTempo(ITimeSpan, ITimeSpan) Removes all changes of tempo that occured between the specified times. Declaration public void ClearTempo(ITimeSpan startTime, ITimeSpan endTime) Parameters Type Name Description ITimeSpan startTime Start of time range to remove changes of tempo in. ITimeSpan endTime End of time range to remove changes of tempo in. Exceptions Type Condition ArgumentNullException One of the following errors occured: startTime is null . endTime is null . ClearTempo(Int64) Removes all changes of tempo that occured since the specified time. Declaration public void ClearTempo(long startTime) Parameters Type Name Description Int64 startTime Time to remove changes of tempo since. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. ClearTempo(Int64, Int64) Removes all changes of tempo that occured between the specified times. Declaration public void ClearTempo(long startTime, long endTime) Parameters Type Name Description Int64 startTime Start of time range to remove changes of tempo in. Int64 endTime End of time range to remove changes of tempo in. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: startTime is negative. endTime is negative. ClearTempoMap() Clears current tempo map removing all changes of tempo and time signature. Declaration public void ClearTempoMap() ClearTimeSignature(ITimeSpan) Removes all changes of time signature that occured since the specified time. Declaration public void ClearTimeSignature(ITimeSpan startTime) Parameters Type Name Description ITimeSpan startTime Time to remove changes of time signature since. Exceptions Type Condition ArgumentNullException startTime is null . ClearTimeSignature(ITimeSpan, ITimeSpan) Removes all changes of time signature that occured between the specified times. Declaration public void ClearTimeSignature(ITimeSpan startTime, ITimeSpan endTime) Parameters Type Name Description ITimeSpan startTime Start of time range to remove changes of time signature in. ITimeSpan endTime End of time range to remove changes of time signature in. Exceptions Type Condition ArgumentNullException One of the following errors occured: startTime is null . endTime is null . ClearTimeSignature(Int64) Removes all changes of time signature that occured since the specified time. Declaration public void ClearTimeSignature(long startTime) Parameters Type Name Description Int64 startTime Time to remove changes of time signature since. Exceptions Type Condition ArgumentOutOfRangeException startTime is negative. ClearTimeSignature(Int64, Int64) Removes all changes of time signature that occured between the specified times. Declaration public void ClearTimeSignature(long startTime, long endTime) Parameters Type Name Description Int64 startTime Start of time range to remove changes of time signature in. Int64 endTime End of time range to remove changes of time signature in. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: startTime is negative. endTime is negative. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() ReplaceTempoMap(TempoMap) Replaces current tempo map with the specified one. Declaration public void ReplaceTempoMap(TempoMap tempoMap) Parameters Type Name Description TempoMap tempoMap Tempo map to replace the current one. Exceptions Type Condition ArgumentNullException tempoMap is null . SaveChanges() Saves tempo map changes that were made with the TempoMapManager updating underlying events collections. Declaration public void SaveChanges() Remarks This method will rewrite content of all events collections were used to construct the current TempoMapManager with events were managed by underlying TimedEventsManager objects of this manager. Also all delta-times of wrapped events will be recalculated according to the Time of event wrappers. SetTempo(ITimeSpan, Tempo) Sets new tempo that will last from the specified time until next change of tempo. Declaration public void SetTempo(ITimeSpan time, Tempo tempo) Parameters Type Name Description ITimeSpan time Time to set the new tempo at. Tempo tempo New tempo that will last from the specified time until next change of tempo. Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . tempo is null . SetTempo(Int64, Tempo) Sets new tempo that will last from the specified time until next change of tempo. Declaration public void SetTempo(long time, Tempo tempo) Parameters Type Name Description Int64 time Time to set the new tempo at. Tempo tempo New tempo that will last from the specified time until next change of tempo. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempo is null . SetTimeSignature(ITimeSpan, TimeSignature) Sets new time signature that will last from the specified time until next change of time signature. Declaration public void SetTimeSignature(ITimeSpan time, TimeSignature timeSignature) Parameters Type Name Description ITimeSpan time Time to set the new time signature at. TimeSignature timeSignature New time signature that will last from the specified time until next change of time signature. Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . timeSignature is null . SetTimeSignature(Int64, TimeSignature) Sets new time signature that will last from the specified time until next change of time signature. Declaration public void SetTimeSignature(long time, TimeSignature timeSignature) Parameters Type Name Description Int64 time Time to set the new time signature at. TimeSignature timeSignature New time signature that will last from the specified time until next change of time signature. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException timeSignature is null . Implements System.IDisposable See Also TempoMap"
  },
  "api/Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TempoMapManagingUtilities.html",
    "title": "Class TempoMapManagingUtilities | DryWetMIDI",
    "keywords": "Class TempoMapManagingUtilities Extension methods for managing tempo map. More info in the Tempo map article. Inheritance Object TempoMapManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TempoMapManagingUtilities Methods GetTempoMap(MidiFile) Gets tempo map of the specified MIDI file. Declaration public static TempoMap GetTempoMap(this MidiFile file) Parameters Type Name Description MidiFile file MIDI file to get tempo map of. Returns Type Description TempoMap Tempo map of the file . Exceptions Type Condition ArgumentNullException file is null . GetTempoMap(IEnumerable<TrackChunk>, TimeDivision) Gets tempo map represented by the specified time division and events collections of the specified track chunks. Declaration public static TempoMap GetTempoMap(this IEnumerable<TrackChunk> trackChunks, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMap Tempo map represented by the trackChunks and timeDivision . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . timeDivision is null . ManageTempoMap(MidiFile) Creates an instance of the TempoMapManager initializing it with the events collections of the specified MIDI file. More info in the Tempo map article. Declaration public static TempoMapManager ManageTempoMap(this MidiFile file) Parameters Type Name Description MidiFile file MIDI file to manage tempo map of. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map of the file . Exceptions Type Condition ArgumentNullException file is null . ManageTempoMap(IEnumerable<EventsCollection>, TimeDivision) Creates an instance of the TempoMapManager initializing it with the specified events collections and time division. More info in the Tempo map article. Declaration public static TempoMapManager ManageTempoMap(this IEnumerable<EventsCollection> eventsCollections, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < EventsCollection > eventsCollections Collection of EventsCollection which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map represented by the eventsCollections and timeDivision . Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollections is null . timeDivision is null . ManageTempoMap(IEnumerable<TrackChunk>, TimeDivision) Creates an instance of the TempoMapManager initializing it with the specified time division and events collections of the specified track chunks. More info in the Tempo map article. Declaration public static TempoMapManager ManageTempoMap(this IEnumerable<TrackChunk> trackChunks, TimeDivision timeDivision) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk which hold events that represent tempo map of a MIDI file. TimeDivision timeDivision MIDI file time division which specifies the meaning of the time used by events of the file. Returns Type Description TempoMapManager An instance of the TempoMapManager that can be used to manage tempo map represented by the trackChunks and timeDivision . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . timeDivision is null . ReplaceTempoMap(MidiFile, TempoMap) Replaces tempo map contained in the specified MidiFile with another one. Declaration public static void ReplaceTempoMap(this MidiFile file, TempoMap tempoMap) Parameters Type Name Description MidiFile file MidiFile holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the file . Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . tempoMap is null . ReplaceTempoMap(IEnumerable<EventsCollection>, TempoMap) Replaces tempo map contained in the specified collection of the EventsCollection with another one. Declaration public static void ReplaceTempoMap(this IEnumerable<EventsCollection> eventsCollections, TempoMap tempoMap) Parameters Type Name Description IEnumerable < EventsCollection > eventsCollections Collection of the EventsCollection holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the eventsCollections . Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollections is null . tempoMap is null . ReplaceTempoMap(IEnumerable<TrackChunk>, TempoMap) Replaces tempo map contained in the specified collection of the TrackChunk with another one. Declaration public static void ReplaceTempoMap(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of the TrackChunk holding a tempo map to replace. TempoMap tempoMap Tempo map to replace the one contained in the trackChunks . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeChangedEventArgs.html",
    "title": "Class TimeChangedEventArgs | DryWetMIDI",
    "keywords": "Class TimeChangedEventArgs Contains arguments for the TimeChanged event. Inheritance Object EventArgs TimeChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeChangedEventArgs : EventArgs Properties NewTime Gets the new time of an object. Declaration public long NewTime { get; } Property Value Type Description Int64 OldTime Gets the old time of an object. Declaration public long OldTime { get; } Property Value Type Description Int64"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeConverter.html",
    "title": "Class TimeConverter | DryWetMIDI",
    "keywords": "Class TimeConverter Provides a way to convert the time of an object from one representation to another. More info in the Time and length article. Inheritance Object TimeConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimeConverter Methods ConvertFrom(ITimeSpan, TempoMap) Converts time from the specified time type to Int64 . Declaration public static long ConvertFrom(ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description Int64 Time as Int64 . Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . tempoMap is null . ConvertTo(ITimeSpan, TimeSpanType, TempoMap) Converts time from one time type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan time, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. TimeSpanType timeType Type that will represent the time of an object. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of time span defined by timeType . Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . tempoMap is null . InvalidEnumArgumentException timeType specified an invalid value. ConvertTo(ITimeSpan, Type, TempoMap) Converts time from one time type to another one. Declaration public static ITimeSpan ConvertTo(ITimeSpan time, Type timeType, TempoMap tempoMap) Parameters Type Name Description ITimeSpan time Time to convert. Type timeType Type to convert time to. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of timeType . Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . timeType is null . tempoMap is null . NotSupportedException timeType is not supported. ConvertTo(Int64, TimeSpanType, TempoMap) Converts time from Int64 to the specified time type. Declaration public static ITimeSpan ConvertTo(long time, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description Int64 time Time to convert. TimeSpanType timeType Type that will represent the time of an object. TempoMap tempoMap Tempo map used to convert time . Returns Type Description ITimeSpan Time as an instance of time span defined by timeType . Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempoMap is null . InvalidEnumArgumentException timeType specified an invalid value. ConvertTo<TTimeSpan>(ITimeSpan, TempoMap) Converts time from one time type to another one. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(ITimeSpan time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description ITimeSpan time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description TTimeSpan Time as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the time of an object. Exceptions Type Condition ArgumentNullException One of the following errors occured: time is null . tempoMap is null . NotSupportedException TTimeSpan is not supported. ConvertTo<TTimeSpan>(Int64, TempoMap) Converts time from Int64 to the specified time type. Declaration public static TTimeSpan ConvertTo<TTimeSpan>(long time, TempoMap tempoMap) where TTimeSpan : ITimeSpan Parameters Type Name Description Int64 time Time to convert. TempoMap tempoMap Tempo map used to convert time . Returns Type Description TTimeSpan Time as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the time of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. ArgumentNullException tempoMap is null . NotSupportedException TTimeSpan is not supported."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEvent.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEvent.html",
    "title": "Class TimedEvent | DryWetMIDI",
    "keywords": "Class TimedEvent Represents wrapper for the MidiEvent that provides absolute time of an event. Inheritance Object TimedEvent Implements ITimedObject INotifyTimeChanged Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public class TimedEvent : ITimedObject, INotifyTimeChanged Constructors TimedEvent(MidiEvent) Initializes a new instance of the TimedEvent with the specified MIDI event. Declaration public TimedEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent An event to wrap into TimedEvent . TimedEvent(MidiEvent, Int64) Initializes a new instance of the TimedEvent with the specified MIDI event and absolute time. Declaration public TimedEvent(MidiEvent midiEvent, long time) Parameters Type Name Description MidiEvent midiEvent An event to wrap into TimedEvent . Int64 time Absolute time of an event in units defined by the time division of a MIDI file. Properties Event Gets wrapped MIDI event. Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent Time Gets or sets absolute time of the event in units defined by the time division of a MIDI file. Declaration public long Time { get; set; } Property Value Type Description Int64 Exceptions Type Condition ArgumentOutOfRangeException value is negative. Methods Clone() Clones object by creating a copy of it. Declaration public virtual ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events TimeChanged Occurs when the time of an object has been changed. Declaration public event EventHandler<TimeChangedEventArgs> TimeChanged Event Type Type Description EventHandler < TimeChangedEventArgs > Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedEventsManagingUtilities.SetTime(TimedEvent, ITimeSpan, TempoMap) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventData.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventData.html",
    "title": "Class TimedEventData | DryWetMIDI",
    "keywords": "Class TimedEventData Holds the data for a TimedEvent construction. Inheritance Object TimedEventData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventData Properties Event Gets a raw MIDI event. Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent EventIndex Gets the index of the Event within an events collection. Declaration public int EventIndex { get; } Property Value Type Description Int32 EventsCollectionIndex Gets the index of events collection where Event is placed. Declaration public int EventsCollectionIndex { get; } Property Value Type Description Int32 Remarks Events collection means either TrackChunk or EventsCollection (which can be obtained via Events ). Note that index is from 0 to events collections count minus 1 . Thus if, for example, a MIDI file has following chunks: an event from the last chunk will have EventsCollectionIndex set to 1 , because custom chunk is not treated as events collection and therefore doesn't take part in indexing. Time Gets the absolute time of the Event . Declaration public long Time { get; } Property Value Type Description Int64 See Also TimedEventDetectionSettings TimedEventsManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventDetectionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventDetectionSettings.html",
    "title": "Class TimedEventDetectionSettings | DryWetMIDI",
    "keywords": "Class TimedEventDetectionSettings Settings which define how timed events should be detected and built. Inheritance Object TimedEventDetectionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedEventDetectionSettings Properties Constructor Gets or sets custom construction method for TimedEvent . If null , default method will be used (via one of the TimedEvent 's constructors). Declaration public Func<TimedEventData, TimedEvent> Constructor { get; set; } Property Value Type Description Func < TimedEventData , TimedEvent > See Also TimedEventsManagingUtilities GetObjectsUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventsManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventsManager.html",
    "title": "Class TimedEventsManager | DryWetMIDI",
    "keywords": "Class TimedEventsManager Provides a way to manage events of a MIDI file by their absolute time. Inheritance Object TimedObjectsManager < TimedEvent > TimedEventsManager Implements IDisposable Inherited Members TimedObjectsManager<TimedEvent>.Objects TimedObjectsManager<TimedEvent>.SaveChanges() TimedObjectsManager<TimedEvent>.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS11: Use TimedObjectsManager class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs11.\")] public sealed class TimedEventsManager : TimedObjectsManager<TimedEvent>, IDisposable Constructors TimedEventsManager(EventsCollection, TimedEventDetectionSettings, Comparison<MidiEvent>) Initializes a new instance of the TimedEventsManager with the specified events collection and comparison delegate for events that have same time. Declaration public TimedEventsManager(EventsCollection eventsCollection, TimedEventDetectionSettings timedEventDetectionSettings = null, Comparison<MidiEvent> sameTimeEventsComparison = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds events to manage. TimedEventDetectionSettings timedEventDetectionSettings Settings accoridng to which timed events should be detected and built. Comparison < MidiEvent > sameTimeEventsComparison Delegate to compare events with the same absolute time. Remarks If the sameTimeEventsComparison is not specified events with the same time will be placed into the underlying events collection in order of adding them through the manager. If you want to specify custom order of such events you need to specify appropriate comparison delegate. Exceptions Type Condition ArgumentNullException eventsCollection is null . Properties Events Gets the TimedObjectsCollection<TObject> with all timed events managed by the current TimedEventsManager . Declaration public TimedObjectsCollection<TimedEvent> Events { get; } Property Value Type Description TimedObjectsCollection < TimedEvent > Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedEventsManagingUtilities.html",
    "title": "Class TimedEventsManagingUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsManagingUtilities Extension methods for managing MIDI events by their absolute time. Inheritance Object TimedEventsManagingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedEventsManagingUtilities Methods AddEvent(TimedObjectsCollection<TimedEvent>, MidiEvent, ITimeSpan, TempoMap) Adds a MidiEvent into a TimedObjectsCollection<TObject> with the specified absolute time. Declaration [Obsolete(\"OBS16: Use TimedEvent constructor and add an object manually. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs16.\")] public static void AddEvent(this TimedObjectsCollection<TimedEvent> eventsCollection, MidiEvent midiEvent, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description TimedObjectsCollection < TimedEvent > eventsCollection TimedObjectsCollection<TObject> to add an event into. MidiEvent midiEvent Event to add into the eventsCollection . ITimeSpan time Absolute time that will be assigned to the midiEvent when it will be placed into the eventsCollection . TempoMap tempoMap Tempo map used to place midiEvent into the eventsCollection with the specified time. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . midiEvent is null . time is null . tempoMap is null . ArgumentException midiEvent is either system real-time or system common one. AddEvent(TimedObjectsCollection<TimedEvent>, MidiEvent, Int64) Adds a MidiEvent into a TimedObjectsCollection<TObject> with the specified absolute time. Declaration [Obsolete(\"OBS16: Use TimedEvent constructor and add an object manually. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs16.\")] public static void AddEvent(this TimedObjectsCollection<TimedEvent> eventsCollection, MidiEvent midiEvent, long time) Parameters Type Name Description TimedObjectsCollection < TimedEvent > eventsCollection TimedObjectsCollection<TObject> to add an event into. MidiEvent midiEvent Event to add into the eventsCollection . Int64 time Absolute time that will be assigned to the midiEvent when it will be placed into the eventsCollection . Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . midiEvent is null . ArgumentOutOfRangeException time is negative. ArgumentException midiEvent is either system real-time or system common one. GetTimedEvents(EventsCollection, TimedEventDetectionSettings) Gets timed events contained in the specified EventsCollection . More info in the Getting objects: GetTimedEvents article. Declaration public static ICollection<TimedEvent> GetTimedEvents(this EventsCollection eventsCollection, TimedEventDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description ICollection < TimedEvent > Collection of timed events contained in eventsCollection ordered by time. Exceptions Type Condition ArgumentNullException eventsCollection is null . See Also ProcessTimedEvents(EventsCollection, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) ProcessTimedEvents(EventsCollection, Action<TimedEvent>, TimedEventDetectionSettings) RemoveTimedEvents(EventsCollection) RemoveTimedEvents(EventsCollection, Predicate<TimedEvent>, TimedEventDetectionSettings) GetObjectsUtilities GetTimedEvents(MidiFile, TimedEventDetectionSettings) Gets timed events contained in the specified MidiFile . More info in the Getting objects: GetTimedEvents article. Declaration public static ICollection<TimedEvent> GetTimedEvents(this MidiFile file, TimedEventDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for events. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description ICollection < TimedEvent > Collection of timed events contained in file ordered by time. Exceptions Type Condition ArgumentNullException file is null . See Also ProcessTimedEvents(MidiFile, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) ProcessTimedEvents(MidiFile, Action<TimedEvent>, TimedEventDetectionSettings) RemoveTimedEvents(MidiFile) RemoveTimedEvents(MidiFile, Predicate<TimedEvent>, TimedEventDetectionSettings) GetObjectsUtilities GetTimedEvents(TrackChunk, TimedEventDetectionSettings) Gets timed events contained in the specified TrackChunk . More info in the Getting objects: GetTimedEvents article. Declaration public static ICollection<TimedEvent> GetTimedEvents(this TrackChunk trackChunk, TimedEventDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description ICollection < TimedEvent > Collection of timed events contained in trackChunk ordered by time. Exceptions Type Condition ArgumentNullException trackChunk is null . See Also ProcessTimedEvents(TrackChunk, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) ProcessTimedEvents(TrackChunk, Action<TimedEvent>, TimedEventDetectionSettings) RemoveTimedEvents(TrackChunk) RemoveTimedEvents(TrackChunk, Predicate<TimedEvent>, TimedEventDetectionSettings) GetObjectsUtilities GetTimedEvents(IEnumerable<TrackChunk>, TimedEventDetectionSettings) Gets timed events contained in the specified collection of TrackChunk . More info in the Getting objects: GetTimedEvents article. Declaration public static ICollection<TimedEvent> GetTimedEvents(this IEnumerable<TrackChunk> trackChunks, TimedEventDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Track chunks to search for events. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description ICollection < TimedEvent > Collection of timed events contained in trackChunks ordered by time. Exceptions Type Condition ArgumentNullException trackChunks is null . See Also ProcessTimedEvents(IEnumerable<TrackChunk>, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) ProcessTimedEvents(IEnumerable<TrackChunk>, Action<TimedEvent>, TimedEventDetectionSettings) RemoveTimedEvents(IEnumerable<TrackChunk>) RemoveTimedEvents(IEnumerable<TrackChunk>, Predicate<TimedEvent>, TimedEventDetectionSettings) GetObjectsUtilities ManageTimedEvents(EventsCollection, TimedEventDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the specified events collection. More info in the Objects managers article. Declaration public static TimedObjectsManager<TimedEvent> ManageTimedEvents(this EventsCollection eventsCollection, TimedEventDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection that holds events to manage. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the eventsCollection via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < TimedEvent > An instance of the TimedObjectsManager<TObject> that can be used to manage events represented by the eventsCollection . Exceptions Type Condition ArgumentNullException eventsCollection is null . ManageTimedEvents(TrackChunk, TimedEventDetectionSettings, TimedObjectsComparer) Creates an instance of the TimedObjectsManager<TObject> initializing it with the events collection of the specified track chunk. More info in the Objects managers article. Declaration public static TimedObjectsManager<TimedEvent> ManageTimedEvents(this TrackChunk trackChunk, TimedEventDetectionSettings settings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk that holds events to manage. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating and saving objects back to the trackChunk via SaveChanges() or Dispose() . Returns Type Description TimedObjectsManager < TimedEvent > An instance of the TimedObjectsManager<TObject> that can be used to manage events represented by the trackChunk . Exceptions Type Condition ArgumentNullException trackChunk is null . ProcessTimedEvents(EventsCollection, Action<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the EventsCollection . Declaration public static int ProcessTimedEvents(this EventsCollection eventsCollection, Action<TimedEvent> action, TimedEventDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the eventsCollection . TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . ProcessTimedEvents(EventsCollection, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the EventsCollection . Declaration public static int ProcessTimedEvents(this EventsCollection eventsCollection, Action<TimedEvent> action, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the eventsCollection . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . action is null . match is null . ProcessTimedEvents(MidiFile, Action<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the MidiFile . Declaration public static int ProcessTimedEvents(this MidiFile file, Action<TimedEvent> action, TimedEventDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the file . TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . ProcessTimedEvents(MidiFile, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the MidiFile . Declaration public static int ProcessTimedEvents(this MidiFile file, Action<TimedEvent> action, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the file . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . action is null . match is null . ProcessTimedEvents(TrackChunk, Action<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the TrackChunk . Declaration public static int ProcessTimedEvents(this TrackChunk trackChunk, Action<TimedEvent> action, TimedEventDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunk . TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . ProcessTimedEvents(TrackChunk, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the TrackChunk . Declaration public static int ProcessTimedEvents(this TrackChunk trackChunk, Action<TimedEvent> action, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunk . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . action is null . match is null . ProcessTimedEvents(IEnumerable<TrackChunk>, Action<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the collection of TrackChunk . Declaration public static int ProcessTimedEvents(this IEnumerable<TrackChunk> trackChunks, Action<TimedEvent> action, TimedEventDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunks . TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . ProcessTimedEvents(IEnumerable<TrackChunk>, Action<TimedEvent>, Predicate<TimedEvent>, TimedEventDetectionSettings) Performs the specified action on each TimedEvent contained in the collection of TrackChunk . Declaration public static int ProcessTimedEvents(this IEnumerable<TrackChunk> trackChunks, Action<TimedEvent> action, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to process. Action < TimedEvent > action The action to perform on each TimedEvent contained in the trackChunks . Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to process. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of processed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . action is null . match is null . RemoveTimedEvents(EventsCollection) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this EventsCollection eventsCollection) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to remove. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException eventsCollection is null . RemoveTimedEvents(EventsCollection, Predicate<TimedEvent>, TimedEventDetectionSettings) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this EventsCollection eventsCollection, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . match is null . RemoveTimedEvents(MidiFile) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this MidiFile file) Parameters Type Name Description MidiFile file MidiFile to search for events to remove. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException file is null . RemoveTimedEvents(MidiFile, Predicate<TimedEvent>, TimedEventDetectionSettings) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this MidiFile file, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description MidiFile file MidiFile to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: file is null . match is null . RemoveTimedEvents(TrackChunk) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this TrackChunk trackChunk) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to remove. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException trackChunk is null . RemoveTimedEvents(TrackChunk, Predicate<TimedEvent>, TimedEventDetectionSettings) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this TrackChunk trackChunk, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . match is null . RemoveTimedEvents(IEnumerable<TrackChunk>) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this IEnumerable<TrackChunk> trackChunks) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to remove. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException trackChunks is null . RemoveTimedEvents(IEnumerable<TrackChunk>, Predicate<TimedEvent>, TimedEventDetectionSettings) Removes all the TimedEvent that match the conditions defined by the specified predicate. Declaration public static int RemoveTimedEvents(this IEnumerable<TrackChunk> trackChunks, Predicate<TimedEvent> match, TimedEventDetectionSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to search for events to remove. Predicate < TimedEvent > match The predicate that defines the conditions of the TimedEvent to remove. TimedEventDetectionSettings settings Settings accoridng to which timed events should be detected and built. Returns Type Description Int32 Count of removed timed events. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . match is null . SetTime(TimedEvent, ITimeSpan, TempoMap) Sets time of the specified timed event. Declaration [Obsolete(\"OBS14: Use SetTime method from TimedObjectUtilities. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs14.\")] public static TimedEvent SetTime(this TimedEvent timedEvent, ITimeSpan time, TempoMap tempoMap) Parameters Type Name Description TimedEvent timedEvent Timed event to set time to. ITimeSpan time Time to set to timedEvent . TempoMap tempoMap Tempo map that will be used for time conversion. Returns Type Description TimedEvent An input timedEvent with new time. Exceptions Type Condition ArgumentNullException One of the following errors occured: timedEvent is null . time is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollection-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollection-1.html",
    "title": "Class TimedObjectsCollection<TObject> | DryWetMIDI",
    "keywords": "Class TimedObjectsCollection<TObject> Represents a basic collection of the ITimedObject . Inheritance Object TimedObjectsCollection<TObject> Implements IEnumerable <TObject> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedObjectsCollection<TObject> : IEnumerable<TObject>, IEnumerable where TObject : ITimedObject Type Parameters Name Description TObject The type of elements in the collection. Properties Count Gets the number of objects contained in the TimedObjectsCollection<TObject> . Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(TObject[]) Adds objects to this collection. Declaration public void Add(params TObject[] objects) Parameters Type Name Description TObject[] objects Objects to add to the collection. Exceptions Type Condition ArgumentNullException objects is null . Add(IEnumerable<TObject>) Adds objects to this collection. Declaration public void Add(IEnumerable<TObject> objects) Parameters Type Name Description IEnumerable <TObject> objects Objects to add to the collection. Exceptions Type Condition ArgumentNullException objects is null . Clear() Removes all objects from this collection. Declaration public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TObject> GetEnumerator() Returns Type Description IEnumerator <TObject> An enumerator that can be used to iterate through the collection. Remove(TObject[]) Removes objects from this collection. Declaration public bool Remove(params TObject[] objects) Parameters Type Name Description TObject[] objects Objects to remove from the collection. Returns Type Description Boolean true if objects were successfully removed from the collection; otherwise, false . Exceptions Type Condition ArgumentNullException objects is null . Remove(IEnumerable<TObject>) Removes objects from this collection. Declaration public bool Remove(IEnumerable<TObject> objects) Parameters Type Name Description IEnumerable <TObject> objects Objects to remove from the collection. Returns Type Description Boolean true if objects were successfully removed from the collection; otherwise, false . Exceptions Type Condition ArgumentNullException objects is null . RemoveAll(Predicate<TObject>) Removes all the objects that match the conditions defined by the specified predicate. Declaration public void RemoveAll(Predicate<TObject> match) Parameters Type Name Description Predicate <TObject> match The Predicate<T> delegate that defines the conditions of the objects to remove. Exceptions Type Condition ArgumentNullException match is null . Events CollectionChanged Occurs when objects collection changes (an object added or removed). Declaration public event TimedObjectsCollectionChangedEventHandler<TObject> CollectionChanged Event Type Type Description TimedObjectsCollectionChangedEventHandler <TObject> Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through the collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, Int64) TimedObjectUtilities.AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollectionChangedEventArgs-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollectionChangedEventArgs-1.html",
    "title": "Class TimedObjectsCollectionChangedEventArgs<TObject> | DryWetMIDI",
    "keywords": "Class TimedObjectsCollectionChangedEventArgs<TObject> Provides data for the CollectionChanged event. Inheritance Object EventArgs TimedObjectsCollectionChangedEventArgs<TObject> Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedObjectsCollectionChangedEventArgs<TObject> : EventArgs where TObject : ITimedObject Type Parameters Name Description TObject Properties AddedObjects Gets objects that were added to a TimedObjectsCollection<TObject> . Declaration public IEnumerable<TObject> AddedObjects { get; } Property Value Type Description IEnumerable <TObject> RemovedObjects Gets objects that were removed from a TimedObjectsCollection<TObject> . Declaration public IEnumerable<TObject> RemovedObjects { get; } Property Value Type Description IEnumerable <TObject>"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollectionChangedEventHandler-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsCollectionChangedEventHandler-1.html",
    "title": "Delegate TimedObjectsCollectionChangedEventHandler<TObject> | DryWetMIDI",
    "keywords": "Delegate TimedObjectsCollectionChangedEventHandler<TObject> Represents the method that will handle the CollectionChanged event. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public delegate void TimedObjectsCollectionChangedEventHandler<TObject>(TimedObjectsCollection<TObject> collection, TimedObjectsCollectionChangedEventArgs<TObject> args) where TObject : ITimedObject; Parameters Type Name Description TimedObjectsCollection <TObject> collection TimedObjectsCollection<TObject> that has fired the event. TimedObjectsCollectionChangedEventArgs <TObject> args A TimedObjectsCollectionChangedEventArgs<TObject> that contains the event data. Type Parameters Name Description TObject The type of objects within CollectionChanged ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsComparer.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsComparer.html",
    "title": "Class TimedObjectsComparer | DryWetMIDI",
    "keywords": "Class TimedObjectsComparer Defines a method that a type implements to compare two objects. Inheritance Object TimedObjectsComparer Implements IComparer < ITimedObject > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public class TimedObjectsComparer : IComparer<ITimedObject> Methods Compare(ITimedObject, ITimedObject) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public virtual int Compare(ITimedObject x, ITimedObject y) Parameters Type Name Description ITimedObject x The first object to compare. ITimedObject y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y , as shown in the following table. Value Meaning Less than zero x is less than y Zero x equals y Greater than zero x is greater than y Implements System.Collections.Generic.IComparer<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsManager.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsManager.html",
    "title": "Class TimedObjectsManager | DryWetMIDI",
    "keywords": "Class TimedObjectsManager Provides a way to manage timed objects of different types within an EventsCollection (which can be obtained via Events for example). More info in the Objects managers article. Inheritance Object TimedObjectsManager < ITimedObject > TimedObjectsManager Implements IDisposable Inherited Members TimedObjectsManager<ITimedObject>.Objects TimedObjectsManager<ITimedObject>.SaveChanges() TimedObjectsManager<ITimedObject>.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimedObjectsManager : TimedObjectsManager<ITimedObject>, IDisposable Remarks To start manage objects you need to get an instance of the TimedObjectsManager . To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage objects within the using block. Constructors TimedObjectsManager(EventsCollection, ObjectType, ObjectDetectionSettings, TimedObjectsComparer) Initializes a new instance of the TimedObjectsManager with the specified events collection and object type. Optionally object detection settings and comparer can be provided. Declaration public TimedObjectsManager(EventsCollection eventsCollection, ObjectType objectType, ObjectDetectionSettings objectDetectionSettings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to manage objects within. ObjectType objectType The type of objects to manage. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating Objects or saving objects back to the eventsCollection via SaveChanges() or Dispose() . Exceptions Type Condition ArgumentNullException eventsCollection is null . Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectsManager-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectsManager-1.html",
    "title": "Class TimedObjectsManager<TObject> | DryWetMIDI",
    "keywords": "Class TimedObjectsManager<TObject> Provides a way to manage timed objects of the specified type within an EventsCollection (which can be obtained via Events for example). More info in the Objects managers article. Inheritance Object TimedObjectsManager<TObject> ChordsManager NotesManager TimedEventsManager TimedObjectsManager Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public class TimedObjectsManager<TObject> : IDisposable where TObject : ITimedObject Type Parameters Name Description TObject Remarks To start manage objects you need to get an instance of the TimedObjectsManager<TObject> . Also ManageX methods within specific object type utilities class (for example, ManageNotes(TrackChunk, NoteDetectionSettings, TimedObjectsComparer) ) can be used. To finish managing you need to call the SaveChanges() or Dispose() method. Since the manager implements IDisposable it is recommended to manage objects within the using block. Constructors TimedObjectsManager(EventsCollection, ObjectDetectionSettings, TimedObjectsComparer) Initializes a new instance of the TimedObjectsManager<TObject> with the specified events collection. Optionally object detection settings and comparer can be provided. Declaration public TimedObjectsManager(EventsCollection eventsCollection, ObjectDetectionSettings objectDetectionSettings = null, TimedObjectsComparer comparer = null) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to manage objects within. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. TimedObjectsComparer comparer Comparer that will be used to order objects on enumerating Objects or saving objects back to the eventsCollection via SaveChanges() or Dispose() . Exceptions Type Condition ArgumentNullException eventsCollection is null . Properties Objects Gets the TimedObjectsCollection<TObject> with all objects managed by the current TimedObjectsManager<TObject> . Declaration public TimedObjectsCollection<TObject> Objects { get; } Property Value Type Description TimedObjectsCollection <TObject> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() SaveChanges() Saves all objects that were managed with the current TimedObjectsManager<TObject> updating underlying events collection. Declaration public void SaveChanges() Remarks This method will rewrite content of the events collection was used to construct the current TimedObjectsManager<TObject> with events were managed by this manager. Implements System.IDisposable See Also TimedEventsManagingUtilities NotesManagingUtilities ChordsManagingUtilities"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimedObjectUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimedObjectUtilities.html",
    "title": "Class TimedObjectUtilities | DryWetMIDI",
    "keywords": "Class TimedObjectUtilities Extension methods for objects that implement the ITimedObject interface. Inheritance Object TimedObjectUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimedObjectUtilities Methods AddObjects(EventsCollection, IEnumerable<ITimedObject>) Adds the specified collection of objects to EventsCollection . Declaration public static void AddObjects(this EventsCollection eventsCollection, IEnumerable<ITimedObject> timedObjects) Parameters Type Name Description EventsCollection eventsCollection EventsCollection to add objects to. IEnumerable < ITimedObject > timedObjects Objects to add to eventsCollection . Exceptions Type Condition ArgumentNullException One of the following errors occured: eventsCollection is null . timedObjects is null . AddObjects(TrackChunk, IEnumerable<ITimedObject>) Adds the specified collection of objects to TrackChunk . Declaration public static void AddObjects(this TrackChunk trackChunk, IEnumerable<ITimedObject> timedObjects) Parameters Type Name Description TrackChunk trackChunk TrackChunk to add objects to. IEnumerable < ITimedObject > timedObjects Objects to add to trackChunk . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . timedObjects is null . AtTime<TObject>(IEnumerable<TObject>, ITimeSpan, TempoMap) Filters collection of ITimedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, ITimeSpan time, TempoMap tempoMap) where TObject : ITimedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. ITimeSpan time Time to filter objects by. TempoMap tempoMap Tempo map to filter objects by time . Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of timed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . time is null . tempoMap is null . AtTime<TObject>(IEnumerable<TObject>, Int64) Filters collection of ITimedObject to return objects at the specified time. Declaration public static IEnumerable<TObject> AtTime<TObject>(this IEnumerable<TObject> objects, long time) where TObject : ITimedObject Parameters Type Name Description IEnumerable <TObject> objects A collection to filter. Int64 time Time to filter objects by. Returns Type Description IEnumerable <TObject> A collection that contains objects from the input sequence that are at the specified time. Type Parameters Name Description TObject The type of the elements of objects . Remarks Note that changes made on the objects returned by this method will not be saved to an underlying data source (events collection, track chunk, file). To change properties of timed objects and save them you need to use a manager appropriate for an object's type. Exceptions Type Condition ArgumentNullException objects is null . ArgumentOutOfRangeException time is negative. SetTime<TObject>(TObject, ITimeSpan, TempoMap) Sets time of the specified object in terms of ITimeSpan . Declaration public static TObject SetTime<TObject>(this TObject obj, ITimeSpan time, TempoMap tempoMap) where TObject : ITimedObject Parameters Type Name Description TObject obj Object to set time of. ITimeSpan time New time of the obj . TempoMap tempoMap TempoMap used to calculate new time in ticks. Returns Type Description TObject The same object the method was called on. Type Parameters Name Description TObject The type of the obj . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . time is null . tempoMap is null . One of the objects is null . TimeAs(ITimedObject, TimeSpanType, TempoMap) Gets time of an ITimedObject as an instance of time span defined by the specified time span type. Declaration public static ITimeSpan TimeAs(this ITimedObject obj, TimeSpanType timeType, TempoMap tempoMap) Parameters Type Name Description ITimedObject obj Object to get time of. TimeSpanType timeType The type of time span to convert the time of obj to. TempoMap tempoMap Tempo map to calculate time of the obj . Returns Type Description ITimeSpan Time of the specified object as an instance of time span defined by the timeType . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . InvalidEnumArgumentException timeType specified an invalid value. TimeAs<TTime>(ITimedObject, TempoMap) Gets time of an ITimedObject as an instance of type that implements the ITimeSpan interface. Declaration public static TTime TimeAs<TTime>(this ITimedObject obj, TempoMap tempoMap) where TTime : ITimeSpan Parameters Type Name Description ITimedObject obj Object to get time of. TempoMap tempoMap Tempo map to calculate time of the obj . Returns Type Description TTime Time of the specified object as an instance of TTime . Type Parameters Name Description TTime Type that will represent the time of the obj . Exceptions Type Condition ArgumentNullException One of the following errors occured: obj is null . tempoMap is null . NotSupportedException TTime is not supported. ToFile(IEnumerable<ITimedObject>) Creates a MIDI file with the specified timed objects. Declaration public static MidiFile ToFile(this IEnumerable<ITimedObject> timedObjects) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of objects to create a MIDI file from. Returns Type Description MidiFile MidiFile containing the timedObjects . Remarks Note that only MIDI events allowed by SMF specification will be added to result MIDI file. So instances of TimedEvent containing SystemCommonEvent or SystemRealTimeEvent won't be added. Exceptions Type Condition ArgumentNullException timedObjects is null . ToTrackChunk(IEnumerable<ITimedObject>) Creates a track chunk with the specified objects. Declaration public static TrackChunk ToTrackChunk(this IEnumerable<ITimedObject> timedObjects) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of objects to create a track chunk from. Returns Type Description TrackChunk TrackChunk containing the timedObjects . Remarks Note that only MIDI events allowed by SMF specification will be added to result track chunk. So instances of TimedEvent containing SystemCommonEvent or SystemRealTimeEvent won't be added. Exceptions Type Condition ArgumentNullException timedObjects is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSignature.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSignature.html",
    "title": "Class TimeSignature | DryWetMIDI",
    "keywords": "Class TimeSignature Represents time signature which is number of beats of specified length. Inheritance Object TimeSignature Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSignature Constructors TimeSignature(Int32, Int32) Initializes a new instance of the TimeSignature with the specified numerator and denominator. Declaration public TimeSignature(int numerator, int denominator) Parameters Type Name Description Int32 numerator Numerator of the time signature which defines number of beats. Int32 denominator Denominator of the time signature which defines beat length. Exceptions Type Condition ArgumentOutOfRangeException One of the following errors occured: numerator is zero or negative. denominator is zero or negative. denominator is not a power of two. Fields Default Default time signature which is 4/4. Declaration public static readonly TimeSignature Default Field Value Type Description TimeSignature Properties Denominator Gets denominator of the time signature which defines beat length. Declaration public int Denominator { get; } Property Value Type Description Int32 Numerator Gets numerator of the time signature which defines number of beats. Declaration public int Numerator { get; } Property Value Type Description Int32 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(TimeSignature, TimeSignature) Determines if two TimeSignature objects are equal. Declaration public static bool operator ==(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the time signatures are equal, false otherwise. GreaterThan(TimeSignature, TimeSignature) Indicates whether a specified TimeSignature is greater than another one. Declaration public static bool operator>(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the value of timeSignature1 is greater than the value of timeSignature2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSignature1 is null . timeSignature2 is null . GreaterThanOrEqual(TimeSignature, TimeSignature) Indicates whether a specified TimeSignature is greater than or equal to another one. Declaration public static bool operator >=(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the value of timeSignature1 is greater than or equal to the value of timeSignature2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSignature1 is null . timeSignature2 is null . Inequality(TimeSignature, TimeSignature) Determines if two TimeSignature objects are not equal. Declaration public static bool operator !=(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean false if the time signatures are equal, true otherwise. LessThan(TimeSignature, TimeSignature) Indicates whether a specified TimeSignature is less than another one. Declaration public static bool operator <(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the value of timeSignature1 is less than the value of timeSignature2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSignature1 is null . timeSignature2 is null . LessThanOrEqual(TimeSignature, TimeSignature) Indicates whether a specified TimeSignature is less than or equal to another one. Declaration public static bool operator <=(TimeSignature timeSignature1, TimeSignature timeSignature2) Parameters Type Name Description TimeSignature timeSignature1 The first TimeSignature to compare. TimeSignature timeSignature2 The second TimeSignature to compare. Returns Type Description Boolean true if the value of timeSignature1 is less than or equal to the value of timeSignature2 ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSignature1 is null . timeSignature2 is null . See Also TempoMap"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanComparer.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanComparer.html",
    "title": "Class TimeSpanComparer | DryWetMIDI",
    "keywords": "Class TimeSpanComparer Compares two time spans determining relation between them. Inheritance Object TimeSpanComparer Implements IComparer < ITimeSpan > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeSpanComparer : IComparer<ITimeSpan> Methods Compare(ITimeSpan, ITimeSpan) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public int Compare(ITimeSpan x, ITimeSpan y) Parameters Type Name Description ITimeSpan x The first object to compare. ITimeSpan y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y , as shown in the following table. Value Meaning Less than zero x is less than y Zero x equals y Greater than zero x is greater than y Implements System.Collections.Generic.IComparer<T>"
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanMode.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanMode.html",
    "title": "Enum TimeSpanMode | DryWetMIDI",
    "keywords": "Enum TimeSpanMode Mode of the arithmetic operation between two ITimeSpan . Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeSpanMode Fields Name Description LengthLength Both time spans represent length. TimeLength First time span represents time and second one represents length. TimeTime Both time spans represent time."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanRoundingPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanRoundingPolicy.html",
    "title": "Enum TimeSpanRoundingPolicy | DryWetMIDI",
    "keywords": "Enum TimeSpanRoundingPolicy Specifies how a time span should be rounded. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeSpanRoundingPolicy Remarks The default value of the enum is NoRounding . Let's see how remaining options work. Please note that rounding step should be specified (see Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) ). RoundUp used to round a time span to the smallest one that is greater than or equal to the time span. Following table shows how time span 0:0:10 will be rounded using different steps: Step Result 0:0:15 0:0:15 0:0:10 0:0:10 0:0:3 0:0:12 RoundDown used to round a time span to the largest one that is less than or equal to the time span. Following table shows how time span 0:0:10 will be rounded using different steps: Step Result 0:0:3 0:0:9 0:0:10 0:0:10 0:0:6 0:0:6 0:0:15 0:0:0 Fields Name Description NoRounding Don't round time span. RoundDown Round time span down (like, for example, Floor(Double) ). RoundUp Round time span up (like, for example, Ceiling(Double) )."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanType.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanType.html",
    "title": "Enum TimeSpanType | DryWetMIDI",
    "keywords": "Enum TimeSpanType The type of a time span. Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeSpanType Fields Name Description BarBeatFraction Bar/beat time span which represents bars and fractional beats (for example, 1.5 beats). More info in the Time and length: Representations: Bars, beats and fraction article. BarBeatTicks Bar/beat time span which represents bars, beats and ticks. More info in the Time and length: Representations: Bars, beats and ticks article. Metric Metric time span which represents hours, minutes and seconds. More info in the Time and length: Representations: Metric article. Midi MIDI time span which represnts an amount of time measured in units of the time division of a MIDI file. More info in the Time and length: Representations: MIDI article. Musical Musical time span which represents a fraction of the whole note's length. More info in the Time and length: Representations: Musical article."
  },
  "api/Melanchall.DryWetMidi.Interaction.TimeSpanUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TimeSpanUtilities.html",
    "title": "Class TimeSpanUtilities | DryWetMIDI",
    "keywords": "Class TimeSpanUtilities Provides useful utilities for working with ITimeSpan . Inheritance Object TimeSpanUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TimeSpanUtilities Methods GetMaxTimeSpan(TimeSpanType) Gets an object that represents maximum value of time span defined by the specified time span type. Declaration public static ITimeSpan GetMaxTimeSpan(TimeSpanType timeSpanType) Parameters Type Name Description TimeSpanType timeSpanType The type of time span to get maximum value. Returns Type Description ITimeSpan An object that represents maximum value of time span defined by timeSpanType . Exceptions Type Condition InvalidEnumArgumentException timeSpanType specified an invalid value. GetZeroTimeSpan(TimeSpanType) Gets an object that represents zero value of time span defined by the specified time span type. Declaration public static ITimeSpan GetZeroTimeSpan(TimeSpanType timeSpanType) Parameters Type Name Description TimeSpanType timeSpanType The type of time span to get zero value. Returns Type Description ITimeSpan An object that represents zero value of time span defined by timeSpanType . Exceptions Type Condition InvalidEnumArgumentException timeSpanType specified an invalid value. GetZeroTimeSpan<TTimeSpan>() Gets an object that represents zero value of time span defined by the specified time span type. Declaration public static TTimeSpan GetZeroTimeSpan<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan An object that represents zero value of time span defined by TTimeSpan . Type Parameters Name Description TTimeSpan The type of time span to get zero value. IsZeroTimeSpan(ITimeSpan) Gets a value indicating whether the specified time span is zero or not. Declaration public static bool IsZeroTimeSpan(this ITimeSpan timeSpan) Parameters Type Name Description ITimeSpan timeSpan Time span to check. Returns Type Description Boolean true if the timeSpan represents zero time span; otherwise, false . Exceptions Type Condition ArgumentNullException timeSpan is null . Parse(String) Converts the string representation of a time span to its ITimeSpan equivalent. Declaration public static ITimeSpan Parse(string input) Parameters Type Name Description String input A string containing a time span to convert. Returns Type Description ITimeSpan A ITimeSpan equivalent to the time span contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. Round(ITimeSpan, TimeSpanRoundingPolicy, Int64, ITimeSpan, TempoMap) Rounds a time span using the specified step and rounding policy. Declaration public static ITimeSpan Round(this ITimeSpan timeSpan, TimeSpanRoundingPolicy roundingPolicy, long time, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description ITimeSpan timeSpan Time span to round. TimeSpanRoundingPolicy roundingPolicy Policy according to which the timeSpan should be rounded. Int64 time Time os the timeSpan . ITimeSpan step Step to round the timeSpan by. TempoMap tempoMap Tempo map used to calculate new time span. Returns Type Description ITimeSpan A new time span which is the timeSpan rounded using the passed parameters. Exceptions Type Condition ArgumentNullException One of the following errors occured: timeSpan is null . step is null . tempoMap is null . InvalidEnumArgumentException roundingPolicy specified an invalid value. ArgumentOutOfRangeException time is negative. TryParse(String, out ITimeSpan) Converts the string representation of a time span to its ITimeSpan equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out ITimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. ITimeSpan timeSpan When this method returns, contains the ITimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . TryParse(String, TimeSpanType, out ITimeSpan) Converts the string representation of a time span to its ITimeSpan equivalent using the specified type of time span. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, TimeSpanType timeSpanType, out ITimeSpan timeSpan) Parameters Type Name Description String input A string containing a time span to convert. TimeSpanType timeSpanType the type of time span to convert input to. ITimeSpan timeSpan When this method returns, contains the ITimeSpan equivalent of the time span contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TrackChunkUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TrackChunkUtilities.html",
    "title": "Class TrackChunkUtilities | DryWetMIDI",
    "keywords": "Class TrackChunkUtilities Utility methods for TrackChunk . Inheritance Object TrackChunkUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public static class TrackChunkUtilities Methods ShiftEvents(TrackChunk, ITimeSpan, TempoMap) Shifts events forward inside TrackChunk by the specified distance. Declaration public static void ShiftEvents(this TrackChunk trackChunk, ITimeSpan distance, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to shift. ITimeSpan distance Distance to shift events by. TempoMap tempoMap Tempo map used for internal distance conversions. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . distance is null . tempoMap is null . ShiftEvents(IEnumerable<TrackChunk>, ITimeSpan, TempoMap) Shifts events forward inside collection of TrackChunk by the specified distance. Declaration public static void ShiftEvents(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to shift. ITimeSpan distance Distance to shift events by. TempoMap tempoMap Tempo map used for internal distance conversions. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . distance is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Interaction.TuningBankSelectParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TuningBankSelectParameter.html",
    "title": "Class TuningBankSelectParameter | DryWetMIDI",
    "keywords": "Class TuningBankSelectParameter Tuning Bank Select registered parameter. Inheritance Object Parameter RegisteredParameter TuningBankSelectParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TuningBankSelectParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors TuningBankSelectParameter() Initializes a new instance of the TuningBankSelectParameter . Declaration public TuningBankSelectParameter() TuningBankSelectParameter(SevenBitNumber) Initializes a new instance of the TuningBankSelectParameter with the specified exact bank number. Declaration public TuningBankSelectParameter(SevenBitNumber bankNumber) Parameters Type Name Description SevenBitNumber bankNumber The bank number. TuningBankSelectParameter(SevenBitNumber, ParameterValueType) Initializes a new instance of the TuningBankSelectParameter with the specified bank number and type of this number. Declaration public TuningBankSelectParameter(SevenBitNumber bankNumber, ParameterValueType valueType) Parameters Type Name Description SevenBitNumber bankNumber The bank number. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Properties BankNumber Gets or sets the bank number. Declaration public SevenBitNumber BankNumber { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.TuningProgramChangeParameter.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.TuningProgramChangeParameter.html",
    "title": "Class TuningProgramChangeParameter | DryWetMIDI",
    "keywords": "Class TuningProgramChangeParameter Tuning Program Change registered parameter. Inheritance Object Parameter RegisteredParameter TuningProgramChangeParameter Implements ITimedObject INotifyTimeChanged Inherited Members RegisteredParameter.ParameterType RegisteredParameter.GetTimedEvents() Parameter.TimeChanged Parameter.Channel Parameter.ValueType Parameter.Time Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TuningProgramChangeParameter : RegisteredParameter, ITimedObject, INotifyTimeChanged Constructors TuningProgramChangeParameter() Initializes a new instance of the TuningProgramChangeParameter . Declaration public TuningProgramChangeParameter() TuningProgramChangeParameter(SevenBitNumber) Initializes a new instance of the TuningProgramChangeParameter with the specified exact program number. Declaration public TuningProgramChangeParameter(SevenBitNumber programNumber) Parameters Type Name Description SevenBitNumber programNumber The program number. TuningProgramChangeParameter(SevenBitNumber, ParameterValueType) Initializes a new instance of the TuningProgramChangeParameter with the specified program number and type of this number. Declaration public TuningProgramChangeParameter(SevenBitNumber programNumber, ParameterValueType valueType) Parameters Type Name Description SevenBitNumber programNumber The program number. ParameterValueType valueType The type of parameter's data which defines whether it represents exact value, increment or decrement. Properties ProgramNumber Gets or sets the program number. Declaration public SevenBitNumber ProgramNumber { get; set; } Property Value Type Description SevenBitNumber Methods Clone() Clones object by creating a copy of it. Declaration public override ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Overrides Parameter.Clone() GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) Returns MSB and LSB that represent data of the current parameter. Declaration protected override void GetData(out SevenBitNumber msb, out SevenBitNumber? lsb) Parameters Type Name Description SevenBitNumber msb MSB of parameter's data. Nullable < SevenBitNumber > lsb LSB of parameter's data. Overrides RegisteredParameter.GetData(out SevenBitNumber, out Nullable<SevenBitNumber>) GetIncrementStepsCount() Returns the number of increment/decrement steps based on the value of the current parameter. Declaration protected override int GetIncrementStepsCount() Returns Type Description Int32 The number of increment/decrement steps based on the value of the current parameter. Overrides RegisteredParameter.GetIncrementStepsCount() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides RegisteredParameter.ToString() Implements ITimedObject INotifyTimeChanged Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Interaction.ValueChange-1.html": {
    "href": "api/Melanchall.DryWetMidi.Interaction.ValueChange-1.html",
    "title": "Class ValueChange<TValue> | DryWetMIDI",
    "keywords": "Class ValueChange<TValue> Represents a change of a parameter's value at some time. Inheritance Object ValueChange<TValue> Implements ITimedObject Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Interaction Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ValueChange<TValue> : ITimedObject Type Parameters Name Description TValue Type of value. Properties Time Gets the MIDI time when value is changed. Declaration public long Time { get; set; } Property Value Type Description Int64 Value Gets the new value that will last until next value change. Declaration public TValue Value { get; } Property Value Type Description TValue Methods Clone() Clones object by creating a copy of it. Declaration public ITimedObject Clone() Returns Type Description ITimedObject Copy of the object. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(ValueChange<TValue>, ValueChange<TValue>) Determines if two ValueChange<TValue> objects are equal. Declaration public static bool operator ==(ValueChange<TValue> change1, ValueChange<TValue> change2) Parameters Type Name Description ValueChange <TValue> change1 The first ValueChange<TValue> to compare. ValueChange <TValue> change2 The second ValueChange<TValue> to compare. Returns Type Description Boolean true if the value changes are equal, false otherwise. Inequality(ValueChange<TValue>, ValueChange<TValue>) Determines if two ValueChange<TValue> objects are not equal. Declaration public static bool operator !=(ValueChange<TValue> change1, ValueChange<TValue> change2) Parameters Type Name Description ValueChange <TValue> change1 The first ValueChange<TValue> to compare. ValueChange <TValue> change2 The second ValueChange<TValue> to compare. Returns Type Description Boolean false if the value changes are equal, true otherwise. Implements ITimedObject Extension Methods ObjectIdUtilities.GetObjectId(ITimedObject) TimedObjectUtilities.TimeAs<TTime>(ITimedObject, TempoMap) TimedObjectUtilities.TimeAs(ITimedObject, TimeSpanType, TempoMap) TimedObjectUtilities.SetTime<TObject>(TObject, ITimeSpan, TempoMap)"
  },
  "api/Melanchall.DryWetMidi.Multimedia.DeviceAddedRemovedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.DeviceAddedRemovedEventArgs.html",
    "title": "Class DeviceAddedRemovedEventArgs | DryWetMIDI",
    "keywords": "Class DeviceAddedRemovedEventArgs Provides data for DeviceAdded and DeviceRemoved events. Inheritance Object EventArgs DeviceAddedRemovedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DeviceAddedRemovedEventArgs : EventArgs Properties Device Gets a device that has been added or removed. Declaration public MidiDevice Device { get; } Property Value Type Description MidiDevice"
  },
  "api/Melanchall.DryWetMidi.Multimedia.DevicesConnector.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.DevicesConnector.html",
    "title": "Class DevicesConnector | DryWetMIDI",
    "keywords": "Class DevicesConnector Provides a way to connect an input MIDI device to an output MIDI devices to redirect all incoming events from the input device to the output ones. More info in the Devices connector article. Inheritance Object DevicesConnector Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DevicesConnector Constructors DevicesConnector(IInputDevice, IOutputDevice[]) Initializes a new instance of the DevicesConnector with the specified input and output MIDI devices. Declaration public DevicesConnector(IInputDevice inputDevice, params IOutputDevice[] outputDevices) Parameters Type Name Description IInputDevice inputDevice Input MIDI device to connect to outputDevices . IOutputDevice [] outputDevices Output MIDI devices to connect inputDevice to. Remarks inputDevice will not be actually connected to outputDevices after an instance of DevicesConnector is created. You must call Connect() method to establish connection between devices. Exceptions Type Condition ArgumentNullException One of the following errors occured: inputDevice is null . outputDevices is null . ArgumentException outputDevices contains null . Properties AreDevicesConnected Gets or sets a value indicating whether InputDevice currently connected to OutputDevices or not (i.e. Connect() method has been called). Declaration public bool AreDevicesConnected { get; } Property Value Type Description Boolean EventCallback Gets or sets a callback to process events coming from InputDevice before they will be sent to OutputDevices . The default value is null which means no processing will be applied. Declaration public DevicesConnectorEventCallback EventCallback { get; set; } Property Value Type Description DevicesConnectorEventCallback InputDevice Gets an input MIDI device to connect to OutputDevices . Declaration public IInputDevice InputDevice { get; } Property Value Type Description IInputDevice OutputDevices Gets output MIDI devices to connect InputDevice to. Declaration public IReadOnlyCollection<IOutputDevice> OutputDevices { get; } Property Value Type Description IReadOnlyCollection < IOutputDevice > Methods Connect() Connects InputDevice to OutputDevices so all events coming from the input device will be redirected to the output ones. Declaration public void Connect() Disconnect() Disconnects InputDevice from OutputDevices so events coming from the input device will not be redirected to the output ones. Declaration public void Disconnect()"
  },
  "api/Melanchall.DryWetMidi.Multimedia.DevicesConnectorEventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.DevicesConnectorEventCallback.html",
    "title": "Delegate DevicesConnectorEventCallback | DryWetMIDI",
    "keywords": "Delegate DevicesConnectorEventCallback Callback used to process events coming from InputDevice before they will be sent to OutputDevices . Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public delegate MidiEvent DevicesConnectorEventCallback(MidiEvent inputMidiEvent); Parameters Type Name Description MidiEvent inputMidiEvent A MIDI event to process. Returns Type Description MidiEvent New event (or the input one) which is the processed original one."
  },
  "api/Melanchall.DryWetMidi.Multimedia.DevicesConnectorUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.DevicesConnectorUtilities.html",
    "title": "Class DevicesConnectorUtilities | DryWetMIDI",
    "keywords": "Class DevicesConnectorUtilities Provides methods to connect MIDI devices. More info in the Devices connector article. Inheritance Object DevicesConnectorUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public static class DevicesConnectorUtilities Methods Connect(IInputDevice, IOutputDevice[]) Connects an input device to the specified output devices. Declaration public static DevicesConnector Connect(this IInputDevice inputDevice, params IOutputDevice[] outputDevices) Parameters Type Name Description IInputDevice inputDevice Input MIDI device to connect to outputDevices . IOutputDevice [] outputDevices Output MIDI devices to connect inputDevice to. Returns Type Description DevicesConnector Exceptions Type Condition ArgumentNullException One of the following errors occured: inputDevice is null . outputDevices is null . ArgumentException outputDevices contains null ."
  },
  "api/Melanchall.DryWetMidi.Multimedia.DevicesWatcher.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.DevicesWatcher.html",
    "title": "Class DevicesWatcher | DryWetMIDI",
    "keywords": "Class DevicesWatcher Provides a way to watch devices adding/removing in the system. More info in the Devices watcher article. Inheritance Object DevicesWatcher Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class DevicesWatcher Properties Instance Gets the instance of DevicesWatcher . Declaration public static DevicesWatcher Instance { get; } Property Value Type Description DevicesWatcher Events DeviceAdded Occurs when a MIDI device has been added to the system. Declaration public event EventHandler<DeviceAddedRemovedEventArgs> DeviceAdded Event Type Type Description EventHandler < DeviceAddedRemovedEventArgs > DeviceRemoved Occurs when a MIDI device has been removed from the system. Declaration public event EventHandler<DeviceAddedRemovedEventArgs> DeviceRemoved Event Type Type Description EventHandler < DeviceAddedRemovedEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Multimedia.ErrorOccurredEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.ErrorOccurredEventArgs.html",
    "title": "Class ErrorOccurredEventArgs | DryWetMIDI",
    "keywords": "Class ErrorOccurredEventArgs Provides data for an event indicating an error occurred on a device. Inheritance Object EventArgs ErrorOccurredEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ErrorOccurredEventArgs : EventArgs Properties Exception Gets the exception caused an error. Declaration public Exception Exception { get; } Property Value Type Description Exception"
  },
  "api/Melanchall.DryWetMidi.Multimedia.EventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.EventCallback.html",
    "title": "Delegate EventCallback | DryWetMIDI",
    "keywords": "Delegate EventCallback Callback used to process MIDI event to be played by Playback . Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public delegate MidiEvent EventCallback(MidiEvent rawEvent, long rawTime, TimeSpan playbackTime); Parameters Type Name Description MidiEvent rawEvent MIDI event to process. Int64 rawTime Absolute time of rawEvent . TimeSpan playbackTime Current time of the playback. Returns Type Description MidiEvent New MIDI event which is rawEvent processed by the callback; or null if event should be ignored. See Also Playback EventCallback"
  },
  "api/Melanchall.DryWetMidi.Multimedia.HighPrecisionTickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.HighPrecisionTickGenerator.html",
    "title": "Class HighPrecisionTickGenerator | DryWetMIDI",
    "keywords": "Class HighPrecisionTickGenerator Tick generator providing most accurate ticking, allowing firing intervals of 1 ms which is the smallest possible one. Inheritance Object TickGenerator HighPrecisionTickGenerator Implements IDisposable Inherited Members TickGenerator.TickGenerated TickGenerator.IsRunning TickGenerator.GenerateTick() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class HighPrecisionTickGenerator : TickGenerator, IDisposable Fields MaxInterval The largest possible interval. Declaration public static readonly TimeSpan MaxInterval Field Value Type Description TimeSpan MinInterval The smallest possible interval. Declaration public static readonly TimeSpan MinInterval Field Value Type Description TimeSpan Methods Dispose() Releases all resources used by the current tick generator. Declaration public override void Dispose() Overrides TickGenerator.Dispose() Dispose(Boolean) Releases all resources used by the current tick generator. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides TickGenerator.Dispose(Boolean) Finalize() Finalizes the current instance of the HighPrecisionTickGenerator . Declaration protected void Finalize() Start(TimeSpan) Starts a tick generator. Declaration protected override void Start(TimeSpan interval) Parameters Type Name Description TimeSpan interval Interval between ticks. Overrides TickGenerator.Start(TimeSpan) Exceptions Type Condition ArgumentOutOfRangeException interval is out of [ MinInterval ; MaxInterval ] range. Stop() Stops a tick generator. Declaration protected override void Stop() Overrides TickGenerator.Stop() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.html",
    "title": "Namespace Melanchall.DryWetMidi.Multimedia | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Multimedia Classes DeviceAddedRemovedEventArgs Provides data for DeviceAdded and DeviceRemoved events. DevicesConnector Provides a way to connect an input MIDI device to an output MIDI devices to redirect all incoming events from the input device to the output ones. More info in the Devices connector article. DevicesConnectorUtilities Provides methods to connect MIDI devices. More info in the Devices connector article. DevicesWatcher Provides a way to watch devices adding/removing in the system. More info in the Devices watcher article. ErrorOccurredEventArgs Provides data for an event indicating an error occurred on a device. HighPrecisionTickGenerator Tick generator providing most accurate ticking, allowing firing intervals of 1 ms which is the smallest possible one. InputDevice Represents an input MIDI device. More info in the Devices and Input device articles. MidiClock MIDI clock used to drive playback or any timer-based object. MidiClockSettings Holds settings for MidiClock used by a clock driven object. MidiDevice Represents a MIDI device. MidiDeviceException The exception that is thrown when an error occurred on a MIDI device. MidiEventPlayedEventArgs Holds an instance of MidiEvent for EventPlayed event. MidiEventReceivedEventArgs Provides data for the EventReceived event. MidiEventSentEventArgs Provides data for the EventSent event. MidiTimeCodeReceivedEventArgs Provides data for the MidiTimeCodeReceived event. NotePlaybackData Data related to MIDI note. NotesEventArgs Holds notes collection for NotesPlaybackStarted and NotesPlaybackFinished . OutputDevice Represents an output MIDI device. More info in the Devices and Output device articles. Playback Provides a way to play MIDI data through the specified output MIDI device. More info in the Playback article. PlaybackCurrentTime Holds the current time of a playback. PlaybackCurrentTimeChangedEventArgs Holds current times of playbacks for CurrentTimeChanged . PlaybackCurrentTimeWatcher Provides notifications about playback's current time changed. PlaybackCurrentTimeWatcherSettings Settings for PlaybackCurrentTimeWatcher . PlaybackSettings Settings according to which an instance of the Playback should be created. PlaybackSnapping Provides a way to manage snap points for Playback . PlaybackUtilities Contains methods to play MIDI data and retrieving an instance of the Playback which provides advanced features for MIDI data playing. More info in the Playback article. Recording Provides a way to record MIDI data received by an input MIDI device. More info in the Recording article. RecordingUtilities Contains methods to manipulate by recording of MIDI data. More info in the Recording article. RegularPrecisionTickGenerator Tick generator which uses Timer for ticking. SnapPoint Snap point for Playback . SnapPoint<TData> Snap point for Playback with attached data. SnapPointsGroup Represents a group of snap points. TickGenerator Tick generator which provides ticking with the specified interval. TickGeneratorException The exception that is thrown when an error occurred on TickGenerator . VirtualDevice Represents a virtual loopback MIDI device (MIDI cable). More info in the Virtual device article. Interfaces IClockDrivenObject Represents an object driven by clock (timer). IInputDevice Represents an abstract input MIDI device. More info in the Devices and Input device articles. IOutputDevice Represents an abstract output MIDI device. More info in the Devices and Output device articles. Enums InputDeviceProperty Additional property attached to an instance of the InputDevice . OutputDeviceOption Optional functionality supported by an output device on Windows (see dwSupport field description in MIDIOUTCAPS ). OutputDeviceProperty Additional property attached to an instance of the OutputDevice . OutputDeviceTechnology Type of a MIDI output device on Windows (see wTechnology field description in MIDIOUTCAPS ). Delegates DevicesConnectorEventCallback Callback used to process events coming from InputDevice before they will be sent to OutputDevices . EventCallback Callback used to process MIDI event to be played by Playback . NoteCallback Callback used to process note to be played by Playback . PlaybackEventCallback Callback used to modify MIDI event before playing."
  },
  "api/Melanchall.DryWetMidi.Multimedia.IClockDrivenObject.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.IClockDrivenObject.html",
    "title": "Interface IClockDrivenObject | DryWetMIDI",
    "keywords": "Interface IClockDrivenObject Represents an object driven by clock (timer). Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public interface IClockDrivenObject Methods TickClock() Advances current object's clock time. Declaration void TickClock()"
  },
  "api/Melanchall.DryWetMidi.Multimedia.IInputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.IInputDevice.html",
    "title": "Interface IInputDevice | DryWetMIDI",
    "keywords": "Interface IInputDevice Represents an abstract input MIDI device. More info in the Devices and Input device articles. Inherited Members IDisposable.Dispose() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public interface IInputDevice : IDisposable Properties IsListeningForEvents Gets a value that indicates whether the current input device is currently listening for incoming MIDI events. Declaration bool IsListeningForEvents { get; } Property Value Type Description Boolean Methods StartEventsListening() Starts listening for incoming MIDI events on the current input device. Declaration void StartEventsListening() StopEventsListening() Stops listening for incoming MIDI events on the current input device. Declaration void StopEventsListening() Events EventReceived Occurs when a MIDI event is received. Declaration event EventHandler<MidiEventReceivedEventArgs> EventReceived Event Type Type Description EventHandler < MidiEventReceivedEventArgs > Extension Methods DevicesConnectorUtilities.Connect(IInputDevice, IOutputDevice[])"
  },
  "api/Melanchall.DryWetMidi.Multimedia.InputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.InputDevice.html",
    "title": "Class InputDevice | DryWetMIDI",
    "keywords": "Class InputDevice Represents an input MIDI device. More info in the Devices and Input device articles. Inheritance Object MidiDevice InputDevice Implements IInputDevice IDisposable Inherited Members MidiDevice.ErrorOccurred MidiDevice._disposed MidiDevice.IsEnabled MidiDevice.EnsureDeviceIsNotDisposed() MidiDevice.EnsureDeviceIsNotRemoved() MidiDevice.OnError(Exception) MidiDevice.EnsureSessionIsCreated() MidiDevice.Dispose() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class InputDevice : MidiDevice, IInputDevice, IDisposable Properties IsListeningForEvents Gets a value that indicates whether InputDevice is currently listening for incoming MIDI events. Declaration public bool IsListeningForEvents { get; } Property Value Type Description Boolean Name Gets the name of the current MIDI device. Declaration public override string Name { get; } Property Value Type Description String Overrides MidiDevice.Name RaiseMidiTimeCodeReceived Gets or sets a value indicating if MidiTimeCodeReceived event should be raised or not. Declaration public bool RaiseMidiTimeCodeReceived { get; set; } Property Value Type Description Boolean SilentNoteOnPolicy Gets or sets reaction of the input device on Note On events with velocity of zero. The default is NoteOn . Declaration public SilentNoteOnPolicy SilentNoteOnPolicy { get; set; } Property Value Type Description SilentNoteOnPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) Remarks On Windows the method will just compare objects references. \"True\" equality check available on macOS only. GetAll() Retrieves all input MIDI devices presented in the system. Declaration public static ICollection<InputDevice> GetAll() Returns Type Description ICollection < InputDevice > All input MIDI devices presented in the system. GetByIndex(Int32) Retrieves an input MIDI device by the specified index. Declaration public static InputDevice GetByIndex(int index) Parameters Type Name Description Int32 index Index of an input device to retrieve. Returns Type Description InputDevice Input MIDI device at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Index is less than zero or greater than devices count minus 1. MidiDeviceException An error occurred on the device. GetByName(String) Retrieves a first input MIDI device with the specified name. Declaration public static InputDevice GetByName(string name) Parameters Type Name Description String name The name of an input MIDI device to retrieve. Returns Type Description InputDevice Input MIDI device with the specified name. Exceptions Type Condition ArgumentException One of the following errors occured: name is null or contains white-spaces only. name specifies an input MIDI device which is not presented in the system. MidiDeviceException An error occurred on the device. GetDevicesCount() Retrieves the number of input MIDI devices presented in the system. Declaration public static int GetDevicesCount() Returns Type Description Int32 Number of input MIDI devices presented in the system. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetProperty(InputDeviceProperty) Returns current value of the specified property attached to the current input device. Declaration public object GetProperty(InputDeviceProperty property) Parameters Type Name Description InputDeviceProperty property The property to get value of. Returns Type Description Object The current value of the property . Remarks To get the list of properties applicable to input devices on the current operating system use GetSupportedProperties() method. Following table shows the type of value returned by the method for each property: Property Type Product String Manufacturer String DriverVersion Int32 UniqueId Int32 DriverOwner String Exceptions Type Condition InvalidEnumArgumentException property specified an invalid value. ArgumentException property is not in the list of the properties supported for the current operating system. ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on the device. One of the cases when this exception can be thrown is device is not in the system anymore (for example, unplugged). InvalidOperationException The current InputDevice instance is created by DeviceRemoved event and thus considered as removed so you cannot interact with it. GetSupportedProperties() Returns the list of the properties supported by input devices on the current operating system. Declaration public static InputDeviceProperty[] GetSupportedProperties() Returns Type Description InputDeviceProperty [] The list of the properties supported by input devices on the current operating system. StartEventsListening() Starts listening for incoming MIDI events on the current input device. Declaration public void StartEventsListening() Exceptions Type Condition ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on device. InvalidOperationException The current InputDevice instance is created by DeviceRemoved event and thus considered as removed so you cannot interact with it. StopEventsListening() Stops listening for incoming MIDI events on the current input device. Declaration public void StopEventsListening() Exceptions Type Condition ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on device. InvalidOperationException The current InputDevice instance is created by DeviceRemoved event and thus considered as removed so you cannot interact with it. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides MidiDevice.ToString() Events EventReceived Occurs when a MIDI event is received. Declaration public event EventHandler<MidiEventReceivedEventArgs> EventReceived Event Type Type Description EventHandler < MidiEventReceivedEventArgs > MidiTimeCodeReceived Occurs when MIDI time code received, i.e. all MIDI events to complete MIDI time code are received. Declaration public event EventHandler<MidiTimeCodeReceivedEventArgs> MidiTimeCodeReceived Event Type Type Description EventHandler < MidiTimeCodeReceivedEventArgs > Remarks This event will be raised only if RaiseMidiTimeCodeReceived is set to true . Operators Equality(InputDevice, InputDevice) Determines if two InputDevice objects are equal. Declaration public static bool operator ==(InputDevice inputDevice1, InputDevice inputDevice2) Parameters Type Name Description InputDevice inputDevice1 The first InputDevice to compare. InputDevice inputDevice2 The second InputDevice to compare. Returns Type Description Boolean true if the devices are equal, false otherwise. Remarks On Windows the operator will just compare objects references. \"True\" equality check available on macOS only. Inequality(InputDevice, InputDevice) Determines if two InputDevice objects are not equal. Declaration public static bool operator !=(InputDevice inputDevice1, InputDevice inputDevice2) Parameters Type Name Description InputDevice inputDevice1 The first InputDevice to compare. InputDevice inputDevice2 The second InputDevice to compare. Returns Type Description Boolean false if the devices are equal, true otherwise. Remarks On Windows the operator will just compare objects references. \"True\" inequality check available on macOS only. Implements IInputDevice System.IDisposable Extension Methods DevicesConnectorUtilities.Connect(IInputDevice, IOutputDevice[])"
  },
  "api/Melanchall.DryWetMidi.Multimedia.InputDeviceProperty.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.InputDeviceProperty.html",
    "title": "Enum InputDeviceProperty | DryWetMIDI",
    "keywords": "Enum InputDeviceProperty Additional property attached to an instance of the InputDevice . Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public enum InputDeviceProperty Fields Name Description DriverOwner Owner of an input device driver on macOS (see kMIDIPropertyDriverOwner ). DriverVersion Version of an input device driver (see vDriverVersion field description in MIDIINCAPS on Windows; see kMIDIPropertyDriverVersion on macOS). Manufacturer Manufacturer of an input device (see wMid field description in MIDIINCAPS on Windows; see kMIDIPropertyManufacturer on macOS). Product Product/model name (see wPid field description in MIDIINCAPS on Windows; see kMIDIPropertyModel on macOS). UniqueId Unique identifier of an input device on macOS (see kMIDIPropertyUniqueID ). See Also InputDevice"
  },
  "api/Melanchall.DryWetMidi.Multimedia.IOutputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.IOutputDevice.html",
    "title": "Interface IOutputDevice | DryWetMIDI",
    "keywords": "Interface IOutputDevice Represents an abstract output MIDI device. More info in the Devices and Output device articles. Inherited Members IDisposable.Dispose() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public interface IOutputDevice : IDisposable Methods PrepareForEventsSending() Prepares output MIDI device for sending events to it allocating necessary resources. Declaration void PrepareForEventsSending() Remarks It is not needed to call this method before actual MIDI data sending since first call of SendEvent(MidiEvent) will prepare the device automatically. But it can take some time so you may decide to call PrepareForEventsSending() before working with device. SendEvent(MidiEvent) Sends a MIDI event to the current output device. Declaration void SendEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event to send. Events EventSent Occurs when a MIDI event is sent. Declaration event EventHandler<MidiEventSentEventArgs> EventSent Event Type Type Description EventHandler < MidiEventSentEventArgs >"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiClock.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiClock.html",
    "title": "Class MidiClock | DryWetMIDI",
    "keywords": "Class MidiClock MIDI clock used to drive playback or any timer-based object. Inheritance Object MidiClock Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiClock : IDisposable Constructors MidiClock(Boolean, TickGenerator, TimeSpan) Initializes a new instance of the MidiClock with the specified value indicating whether first tick should be generated immediately after clock started, and tick generator. Declaration public MidiClock(bool startImmediately, TickGenerator tickGenerator, TimeSpan interval) Parameters Type Name Description Boolean startImmediately A value indicating whether first tick should be generated immediately after clock started. TickGenerator tickGenerator Tick generator used as timer firing at the specified interval. Null for no tick generator. TimeSpan interval Interval of clock's ticiking. Properties CurrentTime Gets the current time of clock as TimeSpan . Declaration public TimeSpan CurrentTime { get; } Property Value Type Description TimeSpan Interval Gets the interval of the current clock's ticiking. Declaration public TimeSpan Interval { get; } Property Value Type Description TimeSpan IsRunning Gets a value indicating whether MIDI clock is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Speed Gets or sets the speed of clock, i.e. the speed of current time changing. Declaration public double Speed { get; set; } Property Value Type Description Double Exceptions Type Condition ArgumentOutOfRangeException value is negative. ObjectDisposedException The current MidiClock is disposed. Methods Dispose() Releases all resources used by the current MidiClock . Declaration public void Dispose() Finalize() Finalizes the current instance of the MidiClock . Declaration protected void Finalize() ResetCurrentTime() Resets the current time of the clock setting it to zero. Declaration public void ResetCurrentTime() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Restart() Stops, sets current time to zero and starts the clock. Declaration public void Restart() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. SetCurrentTime(TimeSpan) Sets the current time of the clock. Declaration public void SetCurrentTime(TimeSpan time) Parameters Type Name Description TimeSpan time New current time of the clock. Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Start() Starts/resumes the clock. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Stop() Stops the clock.Current time will not be changed. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current MidiClock is disposed. Tick() Generates new clock's tick manually without pulse from tick generator. Declaration public void Tick() Events Ticked Occurs when new tick generated. Declaration public event EventHandler Ticked Event Type Type Description EventHandler Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiClockSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiClockSettings.html",
    "title": "Class MidiClockSettings | DryWetMIDI",
    "keywords": "Class MidiClockSettings Holds settings for MidiClock used by a clock driven object. Inheritance Object MidiClockSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiClockSettings Properties CreateTickGeneratorCallback Gets or sets a callback used to create tick generator for MIDI clock. Declaration public Func<TickGenerator> CreateTickGeneratorCallback { get; set; } Property Value Type Description Func < TickGenerator > Exceptions Type Condition ArgumentNullException value is null ."
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiDevice.html",
    "title": "Class MidiDevice | DryWetMIDI",
    "keywords": "Class MidiDevice Represents a MIDI device. Inheritance Object MidiDevice InputDevice OutputDevice VirtualDevice Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class MidiDevice : IDisposable Fields _disposed Flag to detect redundant disposing. Declaration protected bool _disposed Field Value Type Description Boolean Properties IsEnabled Gets or sets a value indicating whether a device is enabled (i.e. operable) or not. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean Name Gets the name of the current MIDI device. Declaration public abstract string Name { get; } Property Value Type Description String Methods Dispose() Releases all resources used by the MIDI device class instance. Declaration public void Dispose() EnsureDeviceIsNotDisposed() Checks that current instance of MIDI device class is not disposed and throws ObjectDisposedException if it is. Declaration protected void EnsureDeviceIsNotDisposed() Exceptions Type Condition ObjectDisposedException Current instance of MIDI device class is disposed. EnsureDeviceIsNotRemoved() Checks that current instance of MIDI device class is not created via 'Device removed' notification and throws InvalidOperationException if it is. Declaration protected void EnsureDeviceIsNotRemoved() Exceptions Type Condition InvalidOperationException Current instance of MIDI device class is created via 'Device removed' notification. EnsureSessionIsCreated() Ensures MIDI devices session is created. Declaration protected static void EnsureSessionIsCreated() Finalize() Finalizes the current instance of the MIDI device class. Declaration protected void Finalize() OnError(Exception) Raises ErrorOccurred event. Declaration protected void OnError(Exception exception) Parameters Type Name Description Exception exception An exception that represents error occurred. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Events ErrorOccurred Occurs when an error occurred on device (for example, during MIDI events parsing). Declaration public event EventHandler<ErrorOccurredEventArgs> ErrorOccurred Event Type Type Description EventHandler < ErrorOccurredEventArgs > Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiDeviceException.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiDeviceException.html",
    "title": "Class MidiDeviceException | DryWetMIDI",
    "keywords": "Class MidiDeviceException The exception that is thrown when an error occurred on a MIDI device. Inheritance Object Exception MidiException MidiDeviceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class MidiDeviceException : MidiException, ISerializable Constructors MidiDeviceException() Initializes a new instance of the MidiDeviceException . Declaration public MidiDeviceException() MidiDeviceException(String) Initializes a new instance of the MidiDeviceException with the specified error message. Declaration public MidiDeviceException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. MidiDeviceException(String, Exception) Initializes a new instance of the MidiDeviceException class with the specified error message and a reference to the inner exception that is the cause of this exception. Declaration public MidiDeviceException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. MidiDeviceException(String, Int32) Initializes a new instance of the MidiDeviceException class with the specified error message and an error code. Declaration public MidiDeviceException(string message, int errorCode) Parameters Type Name Description String message The error message that explains the reason for the exception. Int32 errorCode The error code. Properties ErrorCode Gets the code of an error represented by the current MidiDeviceException . Declaration public int? ErrorCode { get; } Property Value Type Description Nullable < Int32 > Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiEventPlayedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiEventPlayedEventArgs.html",
    "title": "Class MidiEventPlayedEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventPlayedEventArgs Holds an instance of MidiEvent for EventPlayed event. Inheritance Object EventArgs MidiEventPlayedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventPlayedEventArgs : EventArgs Properties Event Gets a MIDI event played. Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent Metadata Gets a metadata associated with the Event . Declaration public object Metadata { get; } Property Value Type Description Object"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiEventReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiEventReceivedEventArgs.html",
    "title": "Class MidiEventReceivedEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventReceivedEventArgs Provides data for the EventReceived event. Inheritance Object EventArgs MidiEventReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventReceivedEventArgs : EventArgs Constructors MidiEventReceivedEventArgs(MidiEvent) Initializes a new instance of the MidiEventReceivedEventArgs with the specified MIDI event. Declaration public MidiEventReceivedEventArgs(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event received by IInputDevice . Exceptions Type Condition ArgumentNullException midiEvent is null . Properties Event Gets MIDI event received by IInputDevice . Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiEventSentEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiEventSentEventArgs.html",
    "title": "Class MidiEventSentEventArgs | DryWetMIDI",
    "keywords": "Class MidiEventSentEventArgs Provides data for the EventSent event. Inheritance Object EventArgs MidiEventSentEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiEventSentEventArgs : EventArgs Constructors MidiEventSentEventArgs(MidiEvent) Initializes a new instance of the MidiEventSentEventArgs with the specified MIDI event. Declaration public MidiEventSentEventArgs(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event sent by IOutputDevice . Exceptions Type Condition ArgumentNullException midiEvent is null . Properties Event Gets MIDI event sent to IOutputDevice . Declaration public MidiEvent Event { get; } Property Value Type Description MidiEvent"
  },
  "api/Melanchall.DryWetMidi.Multimedia.MidiTimeCodeReceivedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.MidiTimeCodeReceivedEventArgs.html",
    "title": "Class MidiTimeCodeReceivedEventArgs | DryWetMIDI",
    "keywords": "Class MidiTimeCodeReceivedEventArgs Provides data for the MidiTimeCodeReceived event. Inheritance Object EventArgs MidiTimeCodeReceivedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiTimeCodeReceivedEventArgs : EventArgs Properties Format Gets format of MIDI time code. Declaration public MidiTimeCodeType Format { get; } Property Value Type Description MidiTimeCodeType Frames Gets the frames component of MIDI time code. Declaration public int Frames { get; } Property Value Type Description Int32 Hours Gets the hours component of MIDI time code. Declaration public int Hours { get; } Property Value Type Description Int32 Minutes Gets the minutes component of MIDI time code. Declaration public int Minutes { get; } Property Value Type Description Int32 Seconds Gets the seconds component of MIDI time code. Declaration public int Seconds { get; } Property Value Type Description Int32"
  },
  "api/Melanchall.DryWetMidi.Multimedia.NoteCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.NoteCallback.html",
    "title": "Delegate NoteCallback | DryWetMIDI",
    "keywords": "Delegate NoteCallback Callback used to process note to be played by Playback . Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public delegate NotePlaybackData NoteCallback(NotePlaybackData rawNoteData, long rawTime, long rawLength, TimeSpan playbackTime); Parameters Type Name Description NotePlaybackData rawNoteData Data of the note to process. Int64 rawTime Absolute time of note to process. Int64 rawLength Length of note to process. TimeSpan playbackTime Current time of the playback. Returns Type Description NotePlaybackData Data of the new note which is rawNoteData processed by the callback; or null if note should be ignored. See Also Playback NoteCallback"
  },
  "api/Melanchall.DryWetMidi.Multimedia.NotePlaybackData.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.NotePlaybackData.html",
    "title": "Class NotePlaybackData | DryWetMIDI",
    "keywords": "Class NotePlaybackData Data related to MIDI note. Inheritance Object NotePlaybackData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotePlaybackData Constructors NotePlaybackData(SevenBitNumber, SevenBitNumber, SevenBitNumber, FourBitNumber) Initializes a new instance of the NotePlaybackData with the specified note number, velocity, off velocity and channel. Declaration public NotePlaybackData(SevenBitNumber noteNumber, SevenBitNumber velocity, SevenBitNumber offVelocity, FourBitNumber channel) Parameters Type Name Description SevenBitNumber noteNumber Note number. SevenBitNumber velocity Velocity of Note On event of the note. SevenBitNumber offVelocity Velocity of Note Off event of the note. FourBitNumber channel Note channel. Fields SkipNote Data which instructs playback to skip note. Declaration public static readonly NotePlaybackData SkipNote Field Value Type Description NotePlaybackData Properties Channel Gets the note channel. Declaration public FourBitNumber Channel { get; } Property Value Type Description FourBitNumber NoteNumber Gets the note number. Declaration public SevenBitNumber NoteNumber { get; } Property Value Type Description SevenBitNumber OffVelocity Gets the velocity of Note Off event of the note. Declaration public SevenBitNumber OffVelocity { get; } Property Value Type Description SevenBitNumber Velocity Gets the velocity of Note On event of the note. Declaration public SevenBitNumber Velocity { get; } Property Value Type Description SevenBitNumber See Also NoteCallback"
  },
  "api/Melanchall.DryWetMidi.Multimedia.NotesEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.NotesEventArgs.html",
    "title": "Class NotesEventArgs | DryWetMIDI",
    "keywords": "Class NotesEventArgs Holds notes collection for NotesPlaybackStarted and NotesPlaybackFinished . Inheritance Object EventArgs NotesEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NotesEventArgs : EventArgs Properties Notes Gets notes collection that started or finished to play by a Playback . Declaration public IEnumerable<Note> Notes { get; } Property Value Type Description IEnumerable < Note >"
  },
  "api/Melanchall.DryWetMidi.Multimedia.OutputDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.OutputDevice.html",
    "title": "Class OutputDevice | DryWetMIDI",
    "keywords": "Class OutputDevice Represents an output MIDI device. More info in the Devices and Output device articles. Inheritance Object MidiDevice OutputDevice Implements IOutputDevice IDisposable Inherited Members MidiDevice.ErrorOccurred MidiDevice._disposed MidiDevice.IsEnabled MidiDevice.EnsureDeviceIsNotDisposed() MidiDevice.EnsureDeviceIsNotRemoved() MidiDevice.OnError(Exception) MidiDevice.EnsureSessionIsCreated() MidiDevice.Dispose() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class OutputDevice : MidiDevice, IOutputDevice, IDisposable Properties Name Gets the name of the current MIDI device. Declaration public override string Name { get; } Property Value Type Description String Overrides MidiDevice.Name Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) Remarks On Windows the method will just compare objects references. \"True\" equality check available on macOS only. GetAll() Retrieves all output MIDI devices presented in the system. Declaration public static ICollection<OutputDevice> GetAll() Returns Type Description ICollection < OutputDevice > All output MIDI devices presented in the system. GetByIndex(Int32) Retrieves an output MIDI device by the specified index. Declaration public static OutputDevice GetByIndex(int index) Parameters Type Name Description Int32 index Index of an output device to retrieve. Returns Type Description OutputDevice Output MIDI device at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Index is less than zero or greater than devices count minus 1. MidiDeviceException An error occurred on the device. GetByName(String) Retrieves a first output MIDI device with the specified name. Declaration public static OutputDevice GetByName(string name) Parameters Type Name Description String name The name of an output MIDI device to retrieve. Returns Type Description OutputDevice Output MIDI device with the specified name. Exceptions Type Condition ArgumentException One of the following errors occured: name is null or contains white-spaces only. name specifies an output MIDI device which is not presented in the system. MidiDeviceException An error occurred on the device. GetDevicesCount() Retrieves the number of output MIDI devices presented in the system. Declaration public static int GetDevicesCount() Returns Type Description Int32 Number of output MIDI devices presented in the system. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetProperty(OutputDeviceProperty) Returns current value of the specified property attached to the current output device. Declaration public object GetProperty(OutputDeviceProperty property) Parameters Type Name Description OutputDeviceProperty property The property to get value of. Returns Type Description Object The current value of the property . Remarks To get the list of properties applicable to output devices on the current operating system use GetSupportedProperties() method. Following table shows the type of value returned by the method for each property: Property Type Product String Manufacturer String DriverVersion Int32 UniqueId Int32 DriverOwner String Technology OutputDeviceTechnology VoicesNumber Int32 NotesNumber Int32 Channels FourBitNumber [] Options OutputDeviceOption Exceptions Type Condition InvalidEnumArgumentException property specified an invalid value. ArgumentException property is not in the list of the properties supported for the current operating system. ObjectDisposedException The current InputDevice is disposed. MidiDeviceException An error occurred on the device. One of the cases when this exception can be thrown is device is not in the system anymore (for example, unplugged). InvalidOperationException The current InputDevice instance is created by DeviceRemoved event and thus considered as removed so you cannot interact with it. GetSupportedProperties() Returns the list of the properties supported by output devices on the current operating system. Declaration public static OutputDeviceProperty[] GetSupportedProperties() Returns Type Description OutputDeviceProperty [] The list of the properties supported by output devices on the current operating system. PrepareForEventsSending() Prepares output MIDI device for sending events to it allocating necessary resources. Declaration public void PrepareForEventsSending() Remarks It is not needed to call this method before actual MIDI data sending since first call of SendEvent(MidiEvent) will prepare the device automatically. But it can take some time so you may decide to call PrepareForEventsSending() before working with device. Exceptions Type Condition MidiDeviceException An error occurred on device. SendEvent(MidiEvent) Sends a MIDI event to the current output device. Declaration public void SendEvent(MidiEvent midiEvent) Parameters Type Name Description MidiEvent midiEvent MIDI event to send. Exceptions Type Condition ObjectDisposedException The current OutputDevice is disposed. ArgumentNullException midiEvent is null . MidiDeviceException An error occurred on device. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides MidiDevice.ToString() TurnAllNotesOff() Turns off all notes that were turned on by sending Note On events, and which haven't yet been turned off by respective Note Off events. Declaration public void TurnAllNotesOff() Exceptions Type Condition ObjectDisposedException The current OutputDevice is disposed. MidiDeviceException An error occurred on device. Events EventSent Occurs when a MIDI event is sent. Declaration public event EventHandler<MidiEventSentEventArgs> EventSent Event Type Type Description EventHandler < MidiEventSentEventArgs > Operators Equality(OutputDevice, OutputDevice) Determines if two OutputDevice objects are equal. Declaration public static bool operator ==(OutputDevice outputDevice1, OutputDevice outputDevice2) Parameters Type Name Description OutputDevice outputDevice1 The first OutputDevice to compare. OutputDevice outputDevice2 The second OutputDevice to compare. Returns Type Description Boolean true if the devices are equal, false otherwise. Remarks On Windows the operator will just compare objects references. \"True\" equality check available on macOS only. Inequality(OutputDevice, OutputDevice) Determines if two OutputDevice objects are not equal. Declaration public static bool operator !=(OutputDevice outputDevice1, OutputDevice outputDevice2) Parameters Type Name Description OutputDevice outputDevice1 The first OutputDevice to compare. OutputDevice outputDevice2 The second OutputDevice to compare. Returns Type Description Boolean false if the devices are equal, true otherwise. Remarks On Windows the operator will just compare objects references. \"True\" inequality check available on macOS only. Implements IOutputDevice System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceOption.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceOption.html",
    "title": "Enum OutputDeviceOption | DryWetMIDI",
    "keywords": "Enum OutputDeviceOption Optional functionality supported by an output device on Windows (see dwSupport field description in MIDIOUTCAPS ). Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax [Flags] public enum OutputDeviceOption Fields Name Description LeftRightVolume Supports separate left and right volume control. PatchCaching Supports patch caching. Stream Provides direct support for the midiStreamOut function. Unknown Unknown option. Volume Supports volume control."
  },
  "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceProperty.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceProperty.html",
    "title": "Enum OutputDeviceProperty | DryWetMIDI",
    "keywords": "Enum OutputDeviceProperty Additional property attached to an instance of the OutputDevice . Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public enum OutputDeviceProperty Fields Name Description Channels Channels that an internal synthesizer device responds to on Windows (see wChannelMask field description in MIDIOUTCAPS ). DriverOwner Owner of an output device driver on macOS (see kMIDIPropertyDriverOwner ). DriverVersion Version of an output device driver (see vDriverVersion field description in MIDIOUTCAPS on Windows; see kMIDIPropertyDriverVersion on macOS). Manufacturer Manufacturer of an output device (see wMid field description in MIDIOUTCAPS on Windows; see kMIDIPropertyManufacturer on macOS). NotesNumber Maximum number of simultaneous notes that can be played by an internal synthesizer device on Windows (see wNotes field description in MIDIOUTCAPS ). Options Optional functionality supported by the device on Windows (see dwSupport field description in MIDIOUTCAPS ). Product Product/model name (see wPid field description in MIDIOUTCAPS on Windows; see kMIDIPropertyModel on macOS). Technology Type of an output device on Windows (see wTechnology field description in MIDIOUTCAPS ). UniqueId Unique identifier of an output device on macOS (see kMIDIPropertyUniqueID ). VoicesNumber Number of voices supported by an internal synthesizer device on Windows (see wVoices field description in MIDIOUTCAPS ). See Also OutputDevice"
  },
  "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceTechnology.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.OutputDeviceTechnology.html",
    "title": "Enum OutputDeviceTechnology | DryWetMIDI",
    "keywords": "Enum OutputDeviceTechnology Type of a MIDI output device on Windows (see wTechnology field description in MIDIOUTCAPS ). Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public enum OutputDeviceTechnology Fields Name Description FmSynth FM synthesizer. Mapper Microsoft MIDI mapper. MidiPort MIDI hardware port. SoftwareSynth Software synthesizer. SquareSynth Square wave synthesizer. Synth Synthesizer. Unknown Unknown type. Wavetable Hardware wavetable synthesizer."
  },
  "api/Melanchall.DryWetMidi.Multimedia.Playback.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.Playback.html",
    "title": "Class Playback | DryWetMIDI",
    "keywords": "Class Playback Provides a way to play MIDI data through the specified output MIDI device. More info in the Playback article. Inheritance Object Playback Implements IDisposable IClockDrivenObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public class Playback : IDisposable, IClockDrivenObject Remarks You can derive from the Playback class to create your own playback logic. Please see Custom playback article to learn more. Constructors Playback(IEnumerable<ITimedObject>, TempoMap, IOutputDevice, PlaybackSettings) Initializes a new instance of the Playback with the specified collection of timed objects, tempo map and output MIDI device to play events through. Declaration public Playback(IEnumerable<ITimedObject> timedObjects, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of timed objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play timedObjects through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: timedObjects is null . tempoMap is null . outputDevice is null . Playback(IEnumerable<ITimedObject>, TempoMap, PlaybackSettings) Initializes a new instance of the Playback with the specified collection of timed objects and tempo map. Declaration public Playback(IEnumerable<ITimedObject> timedObjects, TempoMap tempoMap, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects Collection of timed objects to play. TempoMap tempoMap Tempo map used to calculate events times. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: timedObjects is null . tempoMap is null . Properties EventCallback Gets or sets callback used to process MIDI event to be played. Declaration public EventCallback EventCallback { get; set; } Property Value Type Description EventCallback Remarks Note that NoteOnEvent and NoteOffEvent won't be passed to EventCallback . Since processing of a note requires syncing between pairs of corresponding events, such pairs are handled by NoteCallback to be sure that a note's integrity is not broken. Examples The following example filters out all Program Change events: playback.EventCallback = (midiEvent, rawTime, playbackTime) => midiEvent.EventType == MidiEventType.ProgramChange ? null : midiEvent; Next example shows how to replace program 1 in all Program Change events to program 2 : playback.EventCallback = (midiEvent, rawTime, playbackTime) => ((midiEvent is ProgramChangeEvent programChangeEvent) && programChangeEvent.ProgramNumber == 1) ? new ProgramChangeEvent((SevenBitNumber)2) { Channel = programChangeEvent.Channel } : midiEvent; InterruptNotesOnStop Gets or sets a value indicating whether currently playing notes must be stopped on playback stop or not. Declaration public bool InterruptNotesOnStop { get; set; } Property Value Type Description Boolean IsRunning Gets a value indicating whether playing is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Loop Gets or sets a value indicating whether playing should automatically start from the first event after the last one played. Declaration public bool Loop { get; set; } Property Value Type Description Boolean NoteCallback Gets or sets callback used to process note to be played. Declaration public NoteCallback NoteCallback { get; set; } Property Value Type Description NoteCallback Examples In the following example every note to be played will be transposed by 10 half-steps up: var playback = midiFile.GetPlayback(outputDevice); playback.NoteCallback = (rawNoteData, rawTime, rawLength, playbackTime) => new NotePlaybackData( (SevenBitNumber)(rawNoteData.NoteNumber + 10), rawNoteData.Velocity, // leave velocity as is rawNoteData.OffVelocity, // leave off velocity as is rawNoteData.Channel); // leave channel as is playback.Start(); Next example shows how you can filter out notes with velocity below 100 : playback.NoteCallback = (rawNoteData, rawTime, rawLength, playbackTime) => rawNoteData.Velocity < 100 ? null : rawNoteData; OutputDevice Gets or sets the output MIDI device to play MIDI data through. Declaration public IOutputDevice OutputDevice { get; set; } Property Value Type Description IOutputDevice PlaybackEnd Gets or sets the end time of the current playback. It defines end time of the region to play back. Declaration public ITimeSpan PlaybackEnd { get; set; } Property Value Type Description ITimeSpan Remarks In conjunction with PlaybackStart you can define a region within the current playback which will be played. If you set the property to null the end of playback will be used. PlaybackStart Gets or sets the start time of the current playback. It defines start time of the region to play back. Declaration public ITimeSpan PlaybackStart { get; set; } Property Value Type Description ITimeSpan Remarks In conjunction with PlaybackEnd you can define a region within the current playback which will be played. If you set the property to null the start of playback (zero) will be used. Snapping Gets an object to manage playback's snap points. Declaration public PlaybackSnapping Snapping { get; } Property Value Type Description PlaybackSnapping Speed Gets or sets the speed of events playing. 1 means normal speed. For example, to play events twice slower this property should be set to 0.5 . Value of 2 will make playback twice faster. Declaration public double Speed { get; set; } Property Value Type Description Double Examples Example below shows how you can use Speed property to set new BPM (if original data doesn't have tempo changes): var tempoMap = midiFile.GetTempoMap(); var originalBpm = tempoMap.GetTempoAtTime((MidiTimeSpan)0).BeatsPerMinute; var newBpm = 240; playback.Speed = newBpm / originalBpm; We want to have BPM of 240 here so we just divide it by original BPM value. If original BPM was 120 , we'll get 2 which is exactly what we want - double the speed. If original value is 480 , we'll get 0.5 which means speed will be slowed down by two times. Exceptions Type Condition ArgumentOutOfRangeException value is zero or negative. ObjectDisposedException The current Playback is disposed. TempoMap Gets the tempo map used to calculate events times. Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap TrackControlValue Gets or sets a value indicating whether controller values must be tracked or not. If true , any jump in time will force playback send ControlChangeEvent corresponding to the controller value at new time, if needed. The default value is false . More info in the Data tracking: MIDI parameters values tracking article. Declaration public bool TrackControlValue { get; set; } Property Value Type Description Boolean TrackNotes Gets or sets a value indicating whether notes must be tracked or not. If false , notes will be treated as just Note On/Note Off events. The default value is false . More info in the Data tracking: Notes tracking article. Declaration public bool TrackNotes { get; set; } Property Value Type Description Boolean TrackPitchValue Gets or sets a value indicating whether pitch value must be tracked or not. If true , any jump in time will force playback send PitchBendEvent corresponding to the pitch value at new time, if needed. The default value is false . More info in the Data tracking: MIDI parameters values tracking article. Declaration public bool TrackPitchValue { get; set; } Property Value Type Description Boolean TrackProgram Gets or sets a value indicating whether program must be tracked or not. If true , any jump in time will force playback send ProgramChangeEvent corresponding to the program at new time, if needed. The default value is false . More info in the Data tracking: MIDI parameters values tracking article. Declaration public bool TrackProgram { get; set; } Property Value Type Description Boolean Methods Dispose() Releases all resources used by the current Playback . Declaration public void Dispose() Finalize() Finalizes the current instance of the Playback . Declaration protected void Finalize() GetCurrentTime(TimeSpanType) Retrieves the current time of the playback in the specified format. Declaration public ITimeSpan GetCurrentTime(TimeSpanType timeType) Parameters Type Name Description TimeSpanType timeType Type that will represent the current time. Returns Type Description ITimeSpan The current time of the playback as an instance of time span defined by timeType . Exceptions Type Condition InvalidEnumArgumentException timeType specified an invalid value. GetCurrentTime<TTimeSpan>() Retrieves the current time of the playback in the specified format. Declaration public TTimeSpan GetCurrentTime<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The current time of the playback as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the current time. GetDuration(TimeSpanType) Retrieves the duration of the playback in the specified format. Declaration public ITimeSpan GetDuration(TimeSpanType durationType) Parameters Type Name Description TimeSpanType durationType Type that will represent the duration. Returns Type Description ITimeSpan The duration of the playback as an instance of time span defined by durationType . Exceptions Type Condition InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>() Retrieves the duration of the playback in the specified format. Declaration public TTimeSpan GetDuration<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The duration of the playback as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the duration. GetTimedEvents(ITimedObject) Returns collection of TimedEvent representing the specified timed object. Declaration protected virtual IEnumerable<TimedEvent> GetTimedEvents(ITimedObject timedObject) Parameters Type Name Description ITimedObject timedObject Timed object to get collection of TimedEvent from. Returns Type Description IEnumerable < TimedEvent > Collection of TimedEvent representing the timedObject . Remarks The method can be useful in case of custom playback and custom input object. MoveBack(ITimeSpan) Shifts playback position back by the specified step. Declaration public void MoveBack(ITimeSpan step) Parameters Type Name Description ITimeSpan step Amount of time to shift playback position by. Exceptions Type Condition ArgumentNullException step is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveForward(ITimeSpan) Shifts playback position forward by the specified step. Declaration public void MoveForward(ITimeSpan step) Parameters Type Name Description ITimeSpan step Amount of time to shift playback position by. Exceptions Type Condition ArgumentNullException step is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToFirstSnapPoint() Sets playback position to the time of first snap point. Declaration public bool MoveToFirstSnapPoint() Returns Type Description Boolean true if playback position successfully changed to the time of first snap point; otherwise, false . Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToFirstSnapPoint<TData>(TData) Sets playback position to the time of first snap point holding the specified data. Declaration public bool MoveToFirstSnapPoint<TData>(TData data) Parameters Type Name Description TData data Data of a snap point to move to. Returns Type Description Boolean true if playback position successfully changed to the time of first snap point with the specified data; otherwise, false . Type Parameters Name Description TData Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToNextSnapPoint() Sets playback position to the time of next snap point (relative to the current time of playback). Declaration public bool MoveToNextSnapPoint() Returns Type Description Boolean true if playback position successfully changed to the time of a next snap point; otherwise, false . Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToNextSnapPoint(SnapPointsGroup) Sets playback position to the time of next snap point (relative to the current time of playback) that belongs to the specified SnapPointsGroup . Declaration public bool MoveToNextSnapPoint(SnapPointsGroup snapPointsGroup) Parameters Type Name Description SnapPointsGroup snapPointsGroup SnapPointsGroup that defines snap points to select the one from. Returns Type Description Boolean true if playback position successfully changed to the time of a next snap point within snapPointsGroup ; otherwise, false . Exceptions Type Condition ArgumentNullException snapPointsGroup is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToNextSnapPoint<TData>(TData) Sets playback position to the time of next snap point (relative to the current time of playback) holding the specified data. Declaration public bool MoveToNextSnapPoint<TData>(TData data) Parameters Type Name Description TData data Returns Type Description Boolean true if playback position successfully changed to the time of a next snap point with the specified data; otherwise, false . Type Parameters Name Description TData Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToPreviousSnapPoint() Sets playback position to the time of previous snap point (relative to the current time of playback). Declaration public bool MoveToPreviousSnapPoint() Returns Type Description Boolean true if playback position successfully changed to the time of a previous snap point; otherwise, false . Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToPreviousSnapPoint(SnapPointsGroup) Sets playback position to the time of the previous snap point (relative to the current time of playback) that belongs to the specified SnapPointsGroup . Declaration public bool MoveToPreviousSnapPoint(SnapPointsGroup snapPointsGroup) Parameters Type Name Description SnapPointsGroup snapPointsGroup SnapPointsGroup that defines snap points to select the one from. Returns Type Description Boolean true if playback position successfully changed to the time of a previous snap point within snapPointsGroup ; otherwise, false . Exceptions Type Condition ArgumentNullException snapPointsGroup is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToPreviousSnapPoint<TData>(TData) Sets playback position to the time of previous snap point (relative to the current time of playback) holding the specified data. Declaration public bool MoveToPreviousSnapPoint<TData>(TData data) Parameters Type Name Description TData data Data of a snap point to move to. Returns Type Description Boolean true if playback position successfully changed to the time of a previous snap point with the specified data; otherwise, false . Type Parameters Name Description TData Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToSnapPoint(SnapPoint) Sets playback position to the time of the specified snap point. Declaration public bool MoveToSnapPoint(SnapPoint snapPoint) Parameters Type Name Description SnapPoint snapPoint Snap point to move to. Returns Type Description Boolean true if playback position successfully changed to the time of snapPoint ; otherwise, false . Exceptions Type Condition ArgumentNullException snapPoint is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToStart() Sets playback position to the beginning of the MIDI data. Declaration public void MoveToStart() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. MoveToTime(ITimeSpan) Sets playback position to the specified time from the beginning of the MIDI data. Declaration public void MoveToTime(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time from the beginning of the MIDI data to set playback position to. Exceptions Type Condition ArgumentNullException time is null . ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Play() Starts playing of the MIDI data. This method will block execution of a program until all MIDI data is played. Declaration public void Play() Remarks If Loop is set to true , this method will execute forever. Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Start() Starts playing of the MIDI data. This method is non-blocking. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. Stop() Stops playing of the MIDI data. Note that this method doesn't reset playback position. If you call Start() , playing will be resumed from the point where Stop() was called. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. MidiDeviceException An error occurred on device. TickClock() Ticks internal clock. Declaration public void TickClock() Exceptions Type Condition ObjectDisposedException The current Playback is disposed. TryPlayEvent(MidiEvent, Object) Tries to play the specified MIDI event. By default just sends the event to output device returning true . Declaration protected virtual bool TryPlayEvent(MidiEvent midiEvent, object metadata) Parameters Type Name Description MidiEvent midiEvent MIDI event to try to play. Object metadata Metadata attached to midiEvent . Returns Type Description Boolean true if midiEvent was played; otherwise, false . Remarks Please see Custom playback article to learn more about how to use metadata parameter. Events DeviceErrorOccurred Occurs when an error got from output device. Declaration public event EventHandler<ErrorOccurredEventArgs> DeviceErrorOccurred Event Type Type Description EventHandler < ErrorOccurredEventArgs > EventPlayed Occurs when MIDI event played. Declaration public event EventHandler<MidiEventPlayedEventArgs> EventPlayed Event Type Type Description EventHandler < MidiEventPlayedEventArgs > Finished Occurs when playback finished, i.e. last event has been played and no need to restart playback due to value of the Loop . Declaration public event EventHandler Finished Event Type Type Description EventHandler NotesPlaybackFinished Occurs when notes finished to play. It will raised if playback's cursor gets out from notes. Declaration public event EventHandler<NotesEventArgs> NotesPlaybackFinished Event Type Type Description EventHandler < NotesEventArgs > NotesPlaybackStarted Occurs when notes started to play. It will raised if playback's cursor gets in to notes. Declaration public event EventHandler<NotesEventArgs> NotesPlaybackStarted Event Type Type Description EventHandler < NotesEventArgs > RepeatStarted Occurs when playback started new cycle of the data playing in case of Loop set to true . Declaration public event EventHandler RepeatStarted Event Type Type Description EventHandler Started Occurs when playback started via Start() or Play() methods. Declaration public event EventHandler Started Event Type Type Description EventHandler Stopped Occurs when playback stopped via Stop() method. Declaration public event EventHandler Stopped Event Type Type Description EventHandler Implements System.IDisposable IClockDrivenObject"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTime.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTime.html",
    "title": "Class PlaybackCurrentTime | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTime Holds the current time of a playback. Inheritance Object PlaybackCurrentTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTime Properties Playback Gets the playback which current PlaybackCurrentTime holds current time for. Declaration public Playback Playback { get; } Property Value Type Description Playback Time Gets the current time of a playback. Declaration public ITimeSpan Time { get; } Property Value Type Description ITimeSpan"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeChangedEventArgs.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeChangedEventArgs.html",
    "title": "Class PlaybackCurrentTimeChangedEventArgs | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTimeChangedEventArgs Holds current times of playbacks for CurrentTimeChanged . Inheritance Object EventArgs PlaybackCurrentTimeChangedEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTimeChangedEventArgs : EventArgs Properties Times Gets collection of current times of playbacks. Declaration public IEnumerable<PlaybackCurrentTime> Times { get; } Property Value Type Description IEnumerable < PlaybackCurrentTime >"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcher.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcher.html",
    "title": "Class PlaybackCurrentTimeWatcher | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTimeWatcher Provides notifications about playback's current time changed. Inheritance Object PlaybackCurrentTimeWatcher Implements IDisposable IClockDrivenObject Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTimeWatcher : IDisposable, IClockDrivenObject Constructors PlaybackCurrentTimeWatcher(PlaybackCurrentTimeWatcherSettings) Initializes a new instance of the PlaybackCurrentTimeWatcher . Declaration public PlaybackCurrentTimeWatcher(PlaybackCurrentTimeWatcherSettings settings = null) Parameters Type Name Description PlaybackCurrentTimeWatcherSettings settings Settings for playbacks watching. Properties Instance Gets the default instance of PlaybackCurrentTimeWatcher . Declaration public static PlaybackCurrentTimeWatcher Instance { get; } Property Value Type Description PlaybackCurrentTimeWatcher IsWatching Gets a value indicating whether the watcher polls playbacks current times or not. Declaration public bool IsWatching { get; } Property Value Type Description Boolean Playbacks Gets playbacks the watcher polls current time of. Declaration public IEnumerable<Playback> Playbacks { get; } Property Value Type Description IEnumerable < Playback > PollingInterval Gets or sets the interval of playbacks current times polling. Declaration public TimeSpan PollingInterval { get; set; } Property Value Type Description TimeSpan TimeType Gets or sets the type of a playback's time to convert to in case of playback was added in the watcher via AddPlayback(Playback) method (without specifying desired time type). The default value is Midi . Declaration public TimeSpanType TimeType { get; set; } Property Value Type Description TimeSpanType Remarks The current time of a playback will be converted to this time type only if the playback was added in the watcher via AddPlayback(Playback) method. If AddPlayback(Playback, TimeSpanType) method was used, its second parameter overrides the global type defined by the TimeType property. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Methods AddPlayback(Playback) Adds a playback to the list of ones to watch current times of. The time will be reported in the type defined by TimeType property. Declaration public void AddPlayback(Playback playback) Parameters Type Name Description Playback playback Playback to watch current time of. Exceptions Type Condition ArgumentNullException playback is null . ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. AddPlayback(Playback, TimeSpanType) Adds a playback to the list of ones to watch current times of. The time will be reported in the specified type. Declaration public void AddPlayback(Playback playback, TimeSpanType timeType) Parameters Type Name Description Playback playback Playback to watch current time of. TimeSpanType timeType Type of current time to convert to. Exceptions Type Condition ArgumentNullException playback is null . InvalidEnumArgumentException timeType specified an invalid value. ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Dispose() Releases all resources used by the current PlaybackCurrentTimeWatcher . Declaration public void Dispose() RemoveAllPlaybacks() Removes all playbacks from the list of ones to watch current times of. Declaration public void RemoveAllPlaybacks() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. RemovePlayback(Playback) Removes a playback from the list of ones to watch current times of. Declaration public void RemovePlayback(Playback playback) Parameters Type Name Description Playback playback Playback to exclude current time watching of. Exceptions Type Condition ArgumentNullException playback is null . ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. SetPlaybackTimeType(Playback, TimeSpanType) Sets the type the current time of the specified playback should be converted to. Declaration public void SetPlaybackTimeType(Playback playback, TimeSpanType timeType) Parameters Type Name Description Playback playback Playback to set timetype for. TimeSpanType timeType Type to convert current time of the playback to. Exceptions Type Condition ArgumentNullException playback is null . InvalidEnumArgumentException timeType specified an invalid value. ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. ArgumentOutOfRangeException playback is not added to the current watcher. Start() Starts current times watching. Declaration public void Start() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Stop() Stops current times watching. Declaration public void Stop() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. TickClock() Ticks internal clock. Declaration public void TickClock() Exceptions Type Condition ObjectDisposedException The current PlaybackCurrentTimeWatcher is disposed. Events CurrentTimeChanged Occurs when current times of playbacks are changed. Declaration public event EventHandler<PlaybackCurrentTimeChangedEventArgs> CurrentTimeChanged Event Type Type Description EventHandler < PlaybackCurrentTimeChangedEventArgs > Implements System.IDisposable IClockDrivenObject"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcherSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackCurrentTimeWatcherSettings.html",
    "title": "Class PlaybackCurrentTimeWatcherSettings | DryWetMIDI",
    "keywords": "Class PlaybackCurrentTimeWatcherSettings Settings for PlaybackCurrentTimeWatcher . Inheritance Object PlaybackCurrentTimeWatcherSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackCurrentTimeWatcherSettings Properties ClockSettings Gets or sets settings for internal MidiClock used to watch playbacks by PlaybackCurrentTimeWatcher . Declaration public MidiClockSettings ClockSettings { get; set; } Property Value Type Description MidiClockSettings WatchOnlyRunningPlaybacks Gets or sets a value indicating whether current time should be reported for only running playbacks ( IsRunning is true ) or not. The default value is false which means all playbacks will be watched. Declaration public bool WatchOnlyRunningPlaybacks { get; set; } Property Value Type Description Boolean"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackEventCallback.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackEventCallback.html",
    "title": "Delegate PlaybackEventCallback | DryWetMIDI",
    "keywords": "Delegate PlaybackEventCallback Callback used to modify MIDI event before playing. Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public delegate MidiEvent PlaybackEventCallback(MidiEvent midiEvent, TimeSpan time, long rawTime); Parameters Type Name Description MidiEvent midiEvent MIDI event to modify. TimeSpan time Absolute metric time of the event. Int64 rawTime Absolute time of the event in MIDI ticks. Returns Type Description MidiEvent MIDI event that should be played. It can be modified original event or a new one."
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackSettings.html",
    "title": "Class PlaybackSettings | DryWetMIDI",
    "keywords": "Class PlaybackSettings Settings according to which an instance of the Playback should be created. Inheritance Object PlaybackSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackSettings Properties ClockSettings Gets or sets settings of the internal playback's clock. Declaration public MidiClockSettings ClockSettings { get; set; } Property Value Type Description MidiClockSettings NoteDetectionSettings Gets or sets settings which define how notes should be detected and built internally by the Playback . Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings TimedEventDetectionSettings Gets or sets settings which define how timed events should be detected and built internally by the Playback . Declaration public TimedEventDetectionSettings TimedEventDetectionSettings { get; set; } Property Value Type Description TimedEventDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackSnapping.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackSnapping.html",
    "title": "Class PlaybackSnapping | DryWetMIDI",
    "keywords": "Class PlaybackSnapping Provides a way to manage snap points for Playback . Inheritance Object PlaybackSnapping Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PlaybackSnapping Properties IsEnabled Gets or sets a value indicating whether playback snapping is enabled or not. The property lets turn on or off all snap points at once. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean SnapPoints Gets all snap points. Declaration public IEnumerable<SnapPoint> SnapPoints { get; } Property Value Type Description IEnumerable < SnapPoint > Methods AddSnapPoint(ITimeSpan) Adds a snap point at the specified time. Declaration public SnapPoint<Guid> AddSnapPoint(ITimeSpan time) Parameters Type Name Description ITimeSpan time Time to add snap point at. Returns Type Description SnapPoint < Guid > An instance of the SnapPoint<TData> representing a snap point at time . Exceptions Type Condition ArgumentNullException time is null . AddSnapPoint<TData>(ITimeSpan, TData) Adds a snap point with the specified data at given time. Declaration public SnapPoint<TData> AddSnapPoint<TData>(ITimeSpan time, TData data) Parameters Type Name Description ITimeSpan time Time to add snap point at. TData data Data to attach to snap point. Returns Type Description SnapPoint <TData> An instance of the SnapPoint<TData> representing a snap point with data at time . Type Parameters Name Description TData Type of data that will be attached to a snap point. Exceptions Type Condition ArgumentNullException time is null . Clear() Removes all snap points. Declaration public void Clear() RemoveSnapPoint<TData>(SnapPoint<TData>) Removes a snap point. Declaration public void RemoveSnapPoint<TData>(SnapPoint<TData> snapPoint) Parameters Type Name Description SnapPoint <TData> snapPoint Snap point to remove. Type Parameters Name Description TData Type of data attached to snapPoint . Exceptions Type Condition ArgumentNullException snapPoint is null . RemoveSnapPointsByData<TData>(Predicate<TData>) Removes all snap points that match the conditions defined by the specified predicate. Declaration public void RemoveSnapPointsByData<TData>(Predicate<TData> predicate) Parameters Type Name Description Predicate <TData> predicate The Predicate<T> delegate that defines the conditions of snap points to remove. Type Parameters Name Description TData Type of data attached to snap points to remove. Exceptions Type Condition ArgumentNullException predicate is null . SnapToGrid(IGrid) Adds snap points at times defined by the specified grid. Declaration public SnapPointsGroup SnapToGrid(IGrid grid) Parameters Type Name Description IGrid grid The grid that defines times to add snap points to. Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to. Exceptions Type Condition ArgumentNullException grid is null . SnapToNotesEnds() Adds snap points at end times of notes. Declaration public SnapPointsGroup SnapToNotesEnds() Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to. SnapToNotesStarts() Adds snap points at start times of notes. Declaration public SnapPointsGroup SnapToNotesStarts() Returns Type Description SnapPointsGroup An instance of the SnapPointsGroup added snap points belong to."
  },
  "api/Melanchall.DryWetMidi.Multimedia.PlaybackUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.PlaybackUtilities.html",
    "title": "Class PlaybackUtilities | DryWetMIDI",
    "keywords": "Class PlaybackUtilities Contains methods to play MIDI data and retrieving an instance of the Playback which provides advanced features for MIDI data playing. More info in the Playback article. Inheritance Object PlaybackUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public static class PlaybackUtilities Methods GetPlayback(Pattern, TempoMap, FourBitNumber, IOutputDevice, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events that will be produced by specified Pattern . Declaration public static Playback GetPlayback(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events that will be produced by the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . tempoMap is null . outputDevice is null . GetPlayback(Pattern, TempoMap, FourBitNumber, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events that will be produced by specified Pattern . Declaration public static Playback GetPlayback(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, PlaybackSettings playbackSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events that will be produced by the pattern . Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . tempoMap is null . GetPlayback(MidiFile, IOutputDevice, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified MidiFile . Declaration public static Playback GetPlayback(this MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the midiFile . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . outputDevice is null . GetPlayback(MidiFile, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified MidiFile . Declaration public static Playback GetPlayback(this MidiFile midiFile, PlaybackSettings playbackSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the midiFile . Exceptions Type Condition ArgumentNullException midiFile is null . GetPlayback(TrackChunk, TempoMap, IOutputDevice, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified TrackChunk . Declaration public static Playback GetPlayback(this TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunk . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . outputDevice is null . GetPlayback(TrackChunk, TempoMap, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified TrackChunk . Declaration public static Playback GetPlayback(this TrackChunk trackChunk, TempoMap tempoMap, PlaybackSettings playbackSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunk . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . GetPlayback(IEnumerable<MidiEvent>, TempoMap, IOutputDevice, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events collection. Events will be sheduled for playback according to their delta-times. Declaration public static Playback GetPlayback(this IEnumerable<MidiEvent> events, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < MidiEvent > events MIDI events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing events . Exceptions Type Condition ArgumentNullException One of the following errors occured: events is null . tempoMap is null . outputDevice is null . GetPlayback(IEnumerable<MidiEvent>, TempoMap, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events collection. Events will be sheduled for playback according to their delta-times. Declaration public static Playback GetPlayback(this IEnumerable<MidiEvent> events, TempoMap tempoMap, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < MidiEvent > events MIDI events to play. TempoMap tempoMap Tempo map used to calculate events times. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing events . Exceptions Type Condition ArgumentNullException One of the following errors occured: events is null . tempoMap is null . GetPlayback(IEnumerable<TrackChunk>, TempoMap, IOutputDevice, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified collection of TrackChunk . Declaration public static Playback GetPlayback(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunks . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . outputDevice is null . GetPlayback(IEnumerable<TrackChunk>, TempoMap, PlaybackSettings) Retrieves an instance of the Playback for playing MIDI events contained in the specified collection of TrackChunk . Declaration public static Playback GetPlayback(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing MIDI events contained in the trackChunks . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, PlaybackSettings) Retrieves an instance of the Playback for playing musical objects using the specified program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. SevenBitNumber programNumber Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, PlaybackSettings) Retrieves an instance of the Playback for playing musical objects using the specified General MIDI 2 program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidi2Program generalMidi2Program Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . InvalidEnumArgumentException generalMidi2Program specified an invalid value. GetPlayback<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, PlaybackSettings) Retrieves an instance of the Playback for playing musical objects using the specified General MIDI 1 program. Declaration public static Playback GetPlayback<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidiProgram generalMidiProgram Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Returns Type Description Playback An instance of the Playback for playing objects . Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . InvalidEnumArgumentException generalMidiProgram specified an invalid value. Play(Pattern, TempoMap, FourBitNumber, IOutputDevice, PlaybackSettings) Plays MIDI events that will be produced by specified Pattern . Declaration public static void Play(this Pattern pattern, TempoMap tempoMap, FourBitNumber channel, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description Pattern pattern Pattern producing events to play. TempoMap tempoMap Tempo map used to calculate events times. FourBitNumber channel MIDI channel to play channel events on. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: pattern is null . tempoMap is null . outputDevice is null . Play(MidiFile, IOutputDevice, PlaybackSettings) Plays MIDI events contained in the specified MidiFile . Declaration public static void Play(this MidiFile midiFile, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile containing events to play. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . outputDevice is null . Play(TrackChunk, TempoMap, IOutputDevice, PlaybackSettings) Plays MIDI events contained in the specified TrackChunk . Declaration public static void Play(this TrackChunk trackChunk, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . outputDevice is null . Play(IEnumerable<TrackChunk>, TempoMap, IOutputDevice, PlaybackSettings) Plays MIDI events contained in the specified collection of TrackChunk . Declaration public static void Play(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, IOutputDevice outputDevice, PlaybackSettings playbackSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk containing events to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play events through. PlaybackSettings playbackSettings Settings according to which a playback should be created. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . outputDevice is null . Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, SevenBitNumber, PlaybackSettings) Plays musical objects using the specified program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, SevenBitNumber programNumber, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. SevenBitNumber programNumber Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidi2Program, PlaybackSettings) Plays musical objects using the specified General MIDI 2 program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidi2Program generalMidi2Program, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidi2Program generalMidi2Program Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . InvalidEnumArgumentException generalMidi2Program specified an invalid value. Play<TObject>(IEnumerable<TObject>, TempoMap, IOutputDevice, GeneralMidiProgram, PlaybackSettings) Plays musical objects using the specified General MIDI 1 program. Declaration public static void Play<TObject>(this IEnumerable<TObject> objects, TempoMap tempoMap, IOutputDevice outputDevice, GeneralMidiProgram generalMidiProgram, PlaybackSettings playbackSettings = null) where TObject : IMusicalObject, ITimedObject Parameters Type Name Description IEnumerable <TObject> objects Objects to play. TempoMap tempoMap Tempo map used to calculate events times. IOutputDevice outputDevice Output MIDI device to play objects through. GeneralMidiProgram generalMidiProgram Program that should be used to play objects . PlaybackSettings playbackSettings Settings according to which a playback should be created. Type Parameters Name Description TObject The type of objects to play. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . outputDevice is null . InvalidEnumArgumentException generalMidiProgram specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Multimedia.Recording.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.Recording.html",
    "title": "Class Recording | DryWetMIDI",
    "keywords": "Class Recording Provides a way to record MIDI data received by an input MIDI device. More info in the Recording article. Inheritance Object Recording Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Recording : IDisposable Constructors Recording(TempoMap, IInputDevice) Initializes a new instance of the Recording with the specified tempo map and input MIDI device to capture MIDI data from. Declaration public Recording(TempoMap tempoMap, IInputDevice inputDevice) Parameters Type Name Description TempoMap tempoMap Tempo map used to calculate events times. IInputDevice inputDevice Input MIDI device to capture MIDI data from. Exceptions Type Condition ArgumentNullException One of the following errors occured: tempoMap is null . inputDevice is null . Properties InputDevice Gets the input MIDI device to record MIDI data from. Declaration public IInputDevice InputDevice { get; } Property Value Type Description IInputDevice IsRunning Gets a value indicating whether recording is currently running or not. Declaration public bool IsRunning { get; } Property Value Type Description Boolean TempoMap Gets the tempo map used to calculate recorded events times. Declaration public TempoMap TempoMap { get; } Property Value Type Description TempoMap Methods Dispose() Releases all resources used by the current Recording . Declaration public void Dispose() GetDuration(TimeSpanType) Retrieves the duration of the recording in the specified format. Declaration public ITimeSpan GetDuration(TimeSpanType durationType) Parameters Type Name Description TimeSpanType durationType Type that will represent the duration. Returns Type Description ITimeSpan The duration of the recording as an instance of time span defined by durationType . Exceptions Type Condition InvalidEnumArgumentException durationType specified an invalid value. GetDuration<TTimeSpan>() Retrieves the duration of the recording in the specified format. Declaration public TTimeSpan GetDuration<TTimeSpan>() where TTimeSpan : ITimeSpan Returns Type Description TTimeSpan The duration of the recording as an instance of TTimeSpan . Type Parameters Name Description TTimeSpan Type that will represent the duration. GetEvents() Gets MIDI events recorded by the current Recording . Declaration public IReadOnlyList<TimedEvent> GetEvents() Returns Type Description IReadOnlyList < TimedEvent > MIDI events recorded by the current Recording . Start() Starts MIDI data recording. Declaration public void Start() Exceptions Type Condition InvalidOperationException Input device is not listening for MIDI events. Stop() Stops MIDI data recording. Note that this method doesn't reset the recording time. If you call Start() , recording will be resumed from the point where Stop() was called. Declaration public void Stop() Events Started Occurs when recording started via Start() method. Declaration public event EventHandler Started Event Type Type Description EventHandler Stopped Occurs when recording stopped via Stop() method. Declaration public event EventHandler Stopped Event Type Type Description EventHandler Implements System.IDisposable Extension Methods RecordingUtilities.ToTrackChunk(Recording) RecordingUtilities.ToFile(Recording)"
  },
  "api/Melanchall.DryWetMidi.Multimedia.RecordingUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.RecordingUtilities.html",
    "title": "Class RecordingUtilities | DryWetMIDI",
    "keywords": "Class RecordingUtilities Contains methods to manipulate by recording of MIDI data. More info in the Recording article. Inheritance Object RecordingUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public static class RecordingUtilities Methods ToFile(Recording) Creates an instance of the MidiFile and places recorded events to it. Declaration public static MidiFile ToFile(this Recording recording) Parameters Type Name Description Recording recording Recording to place events to MidiFile from. Returns Type Description MidiFile MidiFile with events recorded with Recording . Exceptions Type Condition ArgumentNullException recording is null . ArgumentException recording is in progress. ToTrackChunk(Recording) Creates an instance of the TrackChunk and places recorded events to it. Declaration public static TrackChunk ToTrackChunk(this Recording recording) Parameters Type Name Description Recording recording Recording to place events to TrackChunk from. Returns Type Description TrackChunk TrackChunk with events recorded with Recording . Exceptions Type Condition ArgumentNullException recording is null . ArgumentException recording is in progress. See Also Recording"
  },
  "api/Melanchall.DryWetMidi.Multimedia.RegularPrecisionTickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.RegularPrecisionTickGenerator.html",
    "title": "Class RegularPrecisionTickGenerator | DryWetMIDI",
    "keywords": "Class RegularPrecisionTickGenerator Tick generator which uses Timer for ticking. Inheritance Object TickGenerator RegularPrecisionTickGenerator Implements IDisposable Inherited Members TickGenerator.TickGenerated TickGenerator.IsRunning TickGenerator.GenerateTick() TickGenerator.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RegularPrecisionTickGenerator : TickGenerator, IDisposable Fields MaxInterval The largest possible interval. Declaration public static readonly TimeSpan MaxInterval Field Value Type Description TimeSpan MinInterval The smallest possible interval. Declaration public static readonly TimeSpan MinInterval Field Value Type Description TimeSpan Methods Dispose(Boolean) Releases all resources used by the current tick generator. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides TickGenerator.Dispose(Boolean) Start(TimeSpan) Starts a tick generator. Declaration protected override void Start(TimeSpan interval) Parameters Type Name Description TimeSpan interval Interval between ticks. Overrides TickGenerator.Start(TimeSpan) Exceptions Type Condition ArgumentOutOfRangeException interval is out of [ MinInterval ; MaxInterval ] range. Stop() Stops a tick generator. Declaration protected override void Stop() Overrides TickGenerator.Stop() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.SnapPoint.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.SnapPoint.html",
    "title": "Class SnapPoint | DryWetMIDI",
    "keywords": "Class SnapPoint Snap point for Playback . Inheritance Object SnapPoint SnapPoint<TData> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public class SnapPoint Properties IsEnabled Gets or sets a value indicating whether the current SnapPoint is enabled or not. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean SnapPointsGroup Gets an instance of the SnapPointsGroup the current SnapPoint belongs to; or null if the snap point doesn't belong to a group. Declaration public SnapPointsGroup SnapPointsGroup { get; } Property Value Type Description SnapPointsGroup Time Gets the time of the current SnapPoint . Declaration public TimeSpan Time { get; } Property Value Type Description TimeSpan"
  },
  "api/Melanchall.DryWetMidi.Multimedia.SnapPoint-1.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.SnapPoint-1.html",
    "title": "Class SnapPoint<TData> | DryWetMIDI",
    "keywords": "Class SnapPoint<TData> Snap point for Playback with attached data. Inheritance Object SnapPoint SnapPoint<TData> Inherited Members SnapPoint.IsEnabled SnapPoint.Time SnapPoint.SnapPointsGroup Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SnapPoint<TData> : SnapPoint Type Parameters Name Description TData The type of data attached to snap point. Properties Data Gets the data attached to the current SnapPoint<TData> . Declaration public TData Data { get; } Property Value Type Description TData"
  },
  "api/Melanchall.DryWetMidi.Multimedia.SnapPointsGroup.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.SnapPointsGroup.html",
    "title": "Class SnapPointsGroup | DryWetMIDI",
    "keywords": "Class SnapPointsGroup Represents a group of snap points. Inheritance Object SnapPointsGroup Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SnapPointsGroup Properties IsEnabled Gets or sets a value indicating whether the current SnapPointsGroup is enabled or not. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean"
  },
  "api/Melanchall.DryWetMidi.Multimedia.TickGenerator.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.TickGenerator.html",
    "title": "Class TickGenerator | DryWetMIDI",
    "keywords": "Class TickGenerator Tick generator which provides ticking with the specified interval. Inheritance Object TickGenerator HighPrecisionTickGenerator RegularPrecisionTickGenerator Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public abstract class TickGenerator : IDisposable Properties IsRunning Gets a value indicating whether the current tick generator is currently running or not. Declaration protected bool IsRunning { get; set; } Property Value Type Description Boolean Methods Dispose() Releases all resources used by the current tick generator. Declaration public virtual void Dispose() Dispose(Boolean) Releases all resources used by the current tick generator. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing GenerateTick() Generates a tick firing the TickGenerated event. Declaration protected void GenerateTick() Start(TimeSpan) Starts a tick generator. Declaration protected abstract void Start(TimeSpan interval) Parameters Type Name Description TimeSpan interval Interval between ticks. Stop() Stops a tick generator. Declaration protected abstract void Stop() Events TickGenerated Occurs on tick generator's tick. Declaration public event EventHandler TickGenerated Event Type Type Description EventHandler Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.TickGeneratorException.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.TickGeneratorException.html",
    "title": "Class TickGeneratorException | DryWetMIDI",
    "keywords": "Class TickGeneratorException The exception that is thrown when an error occurred on TickGenerator . Inheritance Object Exception MidiException TickGeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax [Serializable] public sealed class TickGeneratorException : MidiException, ISerializable Constructors TickGeneratorException(String, Int32) Initializes a new instance of the TickGeneratorException class with the specified error message and an error code. Declaration public TickGeneratorException(string message, int errorCode) Parameters Type Name Description String message The error message that explains the reason for the exception. Int32 errorCode The error code. Properties ErrorCode Gets the code of an error represented by the current MidiDeviceException . Declaration public int ErrorCode { get; } Property Value Type Description Int32 Methods GetObjectData(SerializationInfo, StreamingContext) Sets the SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. Overrides Exception.GetObjectData(SerializationInfo, StreamingContext) Exceptions Type Condition ArgumentNullException info is null . Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Melanchall.DryWetMidi.Multimedia.VirtualDevice.html": {
    "href": "api/Melanchall.DryWetMidi.Multimedia.VirtualDevice.html",
    "title": "Class VirtualDevice | DryWetMIDI",
    "keywords": "Class VirtualDevice Represents a virtual loopback MIDI device (MIDI cable). More info in the Virtual device article. Inheritance Object MidiDevice VirtualDevice Implements IDisposable Inherited Members MidiDevice.ErrorOccurred MidiDevice._disposed MidiDevice.IsEnabled MidiDevice.EnsureDeviceIsNotDisposed() MidiDevice.EnsureDeviceIsNotRemoved() MidiDevice.OnError(Exception) MidiDevice.EnsureSessionIsCreated() MidiDevice.Dispose() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.Multimedia Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class VirtualDevice : MidiDevice, IDisposable Properties InputDevice Gets the input subdevice of the current VirtualDevice . Declaration public InputDevice InputDevice { get; } Property Value Type Description InputDevice Name Gets the name of the current MIDI device. Declaration public override string Name { get; } Property Value Type Description String Overrides MidiDevice.Name OutputDevice Gets the output subdevice of the current VirtualDevice . Declaration public OutputDevice OutputDevice { get; } Property Value Type Description OutputDevice Methods Create(String) Creates an instance of the VirtualDevice with the specified name. Declaration public static VirtualDevice Create(string name) Parameters Type Name Description String name The name of a virtual device to create. Returns Type Description VirtualDevice An instance of the VirtualDevice with name of name . Exceptions Type Condition ArgumentException name is null or contains white-spaces only. NotSupportedException Virtual device creation is not supported on the current operating system. MidiDeviceException An error occurred on device creation. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides MidiDevice.ToString() Implements System.IDisposable"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Chord.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Chord.html",
    "title": "Class Chord | DryWetMIDI",
    "keywords": "Class Chord Represents a chord as a set of notes names. Inheritance Object Chord Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Chord Constructors Chord(NoteName, Interval[]) Initializes a new instance of the Chord with the specified root note name and intervals from root one. Declaration public Chord(NoteName rootNoteName, params Interval[] intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. Interval [] intervalsFromRoot Intervals from root note. Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. ArgumentNullException intervalsFromRoot is null . Chord(NoteName, NoteName[]) Initializes a new instance of the Chord with the specified root note name and names of the notes above root one (for example, C and E G). Declaration public Chord(NoteName rootNoteName, params NoteName[] notesNamesAboveRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. NoteName [] notesNamesAboveRoot The set of names of the notes above root one. Exceptions Type Condition InvalidEnumArgumentException One of the following errors occured: rootNoteName specified an invalid value. notesNamesAboveRoot contains an invalid value. Chord(NoteName, IEnumerable<Interval>) Initializes a new instance of the Chord with the specified root note name and intervals from root one. Declaration public Chord(NoteName rootNoteName, IEnumerable<Interval> intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. IEnumerable < Interval > intervalsFromRoot Intervals from root note. Exceptions Type Condition InvalidEnumArgumentException rootNoteName specified an invalid value. ArgumentNullException intervalsFromRoot is null . Chord(ICollection<NoteName>) Initializes a new instance of the Chord with the specified notes names (for example, C E G). Declaration public Chord(ICollection<NoteName> notesNames) Parameters Type Name Description ICollection < NoteName > notesNames The set of notes names. Exceptions Type Condition ArgumentNullException notesNames is null . InvalidEnumArgumentException notesNames contains an invalid value. ArgumentException notesNames is empty collection. Properties NotesNames Gets the chord's notes names. Declaration public ICollection<NoteName> NotesNames { get; } Property Value Type Description ICollection < NoteName > RootNoteName Gets the root note's name of the chord. Declaration public NoteName RootNoteName { get; } Property Value Type Description NoteName Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetByTriad(NoteName, ChordQuality, Interval[]) Creates an instance of the Chord as triad with possible addition of another notes by intervals from the root one. Declaration public static Chord GetByTriad(NoteName rootNoteName, ChordQuality chordQuality, params Interval[] intervalsFromRoot) Parameters Type Name Description NoteName rootNoteName The root note's name. ChordQuality chordQuality Chord's quality. Interval [] intervalsFromRoot Intervals from root note. Returns Type Description Chord Chord created by triad with addition of notes defined by intervalsFromRoot . Exceptions Type Condition InvalidEnumArgumentException One of the following errors occured: rootNoteName specified an invalid value. chordQuality specified an invalid value. ArgumentNullException intervalsFromRoot is null . GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetNames() Returns collection of names of the current Chord . Declaration public IReadOnlyCollection<string> GetNames() Returns Type Description IReadOnlyCollection < String > Collection of names of the current Chord . Parse(String) Converts the string representation of a musical chord to its Chord equivalent. Declaration public static Chord Parse(string input) Parameters Type Name Description String input A string containing a chord to convert. Returns Type Description Chord A Chord equivalent to the musical chord contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Chord) Converts the string representation of a musical chord to its Chord equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Chord chord) Parameters Type Name Description String input A string containing a chord to convert. Chord chord When this method returns, contains the Chord equivalent of the musical chord contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Equality(Chord, Chord) Determines if two Chord objects are equal. Declaration public static bool operator ==(Chord chord1, Chord chord2) Parameters Type Name Description Chord chord1 The first Chord to compare. Chord chord2 The second Chord to compare. Returns Type Description Boolean true if the chords are equal, false otherwise. Inequality(Chord, Chord) Determines if two Chord objects are not equal. Declaration public static bool operator !=(Chord chord1, Chord chord2) Parameters Type Name Description Chord chord1 The first Chord to compare. Chord chord2 The second Chord to compare. Returns Type Description Boolean false if the chords are equal, true otherwise. Extension Methods ChordUtilities.GetIntervalsFromRootNote(Chord) ChordUtilities.GetIntervalsBetweenNotes(Chord) ChordUtilities.ResolveRootNote(Chord, Octave) ChordUtilities.ResolveNotes(Chord, Octave) ChordUtilities.GetInversions(Chord)"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordProgression.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordProgression.html",
    "title": "Class ChordProgression | DryWetMIDI",
    "keywords": "Class ChordProgression Represents a chord progression as a set of chords. Inheritance Object ChordProgression Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ChordProgression Constructors ChordProgression(Chord[]) Initializes a new instance of the ChordProgression with the specified chords. Declaration public ChordProgression(params Chord[] chords) Parameters Type Name Description Chord [] chords Chords of the chord progression. Exceptions Type Condition ArgumentNullException chords is null . ArgumentException chords contains null . ChordProgression(IEnumerable<Chord>) Initializes a new instance of the ChordProgression with the specified chords. Declaration public ChordProgression(IEnumerable<Chord> chords) Parameters Type Name Description IEnumerable < Chord > chords Chords of the chord progression. Exceptions Type Condition ArgumentNullException chords is null . ArgumentException chords contains null . Properties Chords Gets the chords of the chord progression. Declaration public IEnumerable<Chord> Chords { get; } Property Value Type Description IEnumerable < Chord > Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String, Scale) Converts the string representation of a chord progression to its ChordProgression equivalent. Declaration public static ChordProgression Parse(string input, Scale scale) Parameters Type Name Description String input A string containing a chord progression to convert. Scale scale Scale to resolve chords. Returns Type Description ChordProgression A ChordProgression equivalent to the chord progression contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, Scale, out ChordProgression) Converts the string representation of a chord progression to its ChordProgression equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, Scale scale, out ChordProgression chordProgression) Parameters Type Name Description String input A string containing a chord progression to convert. Scale scale Scale to resolve chords. ChordProgression chordProgression When this method returns, contains the ChordProgression equivalent of the chord progression contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Equality(ChordProgression, ChordProgression) Determines if two ChordProgression objects are equal. Declaration public static bool operator ==(ChordProgression chordProgression1, ChordProgression chordProgression2) Parameters Type Name Description ChordProgression chordProgression1 The first ChordProgression to compare. ChordProgression chordProgression2 The second ChordProgression to compare. Returns Type Description Boolean true if the chord progressions are equal, false otherwise. Inequality(ChordProgression, ChordProgression) Determines if two ChordProgression objects are not equal. Declaration public static bool operator !=(ChordProgression chordProgression1, ChordProgression chordProgression2) Parameters Type Name Description ChordProgression chordProgression1 The first ChordProgression to compare. ChordProgression chordProgression2 The second ChordProgression to compare. Returns Type Description Boolean false if the chord progressions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordQuality.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordQuality.html",
    "title": "Enum ChordQuality | DryWetMIDI",
    "keywords": "Enum ChordQuality Represents a chord's quality. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum ChordQuality Fields Name Description Augmented Augmented chord. Diminished Diminished chord. Major Major chord. Minor Minor chord."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ChordUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ChordUtilities.html",
    "title": "Class ChordUtilities | DryWetMIDI",
    "keywords": "Class ChordUtilities Utilities for working with Chord . Inheritance Object ChordUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ChordUtilities Methods GetIntervalsBetweenNotes(Chord) Gets intervals between notes of the specified chord. For example, +4 and +3 for C major (+4 for C and E, +3 for E and G). Declaration public static IEnumerable<Interval> GetIntervalsBetweenNotes(this Chord chord) Parameters Type Name Description Chord chord Chord to get intervals between notes. Returns Type Description IEnumerable < Interval > Intervals between notes of the chord . Exceptions Type Condition ArgumentNullException chord is null . GetIntervalsFromRootNote(Chord) Gets intervals from the root note of the specified chord. For example, +4 and +7 for C major (+4 for C and E, +7 for C and G). Declaration public static IEnumerable<Interval> GetIntervalsFromRootNote(this Chord chord) Parameters Type Name Description Chord chord Chord to get intervals from root note. Returns Type Description IEnumerable < Interval > Intervals from the root note of the chord . Exceptions Type Condition ArgumentNullException chord is null . InvalidOperationException Some intervals are greater than MaxValue . GetInversions(Chord) Gets the collection of chord's inversions. Declaration public static IEnumerable<Chord> GetInversions(this Chord chord) Parameters Type Name Description Chord chord Returns Type Description IEnumerable < Chord > Collection of chord's inversions. ResolveNotes(Chord, Octave) Resolves notes of the specified chord. Declaration public static IEnumerable<Note> ResolveNotes(this Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to resolve notes. Octave octave Octave to resolve notes of the chord . Returns Type Description IEnumerable < Note > Notes of the chord regarding to octave . Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null . ResolveRootNote(Chord, Octave) Resolves root note of the specified chord. Declaration public static Note ResolveRootNote(this Chord chord, Octave octave) Parameters Type Name Description Chord chord Chord to resolve root note. Octave octave Octave to resolve root note of the chord . Returns Type Description Note Root note of the chord regarding to octave . Exceptions Type Condition ArgumentNullException One of the following errors occured: chord is null . octave is null ."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.html",
    "title": "Namespace Melanchall.DryWetMidi.MusicTheory | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.MusicTheory Classes Chord Represents a chord as a set of notes names. ChordProgression Represents a chord progression as a set of chords. ChordUtilities Utilities for working with Chord . Interval Represents a musical interval in terms of half steps number. IntervalDefinition Definition of a musical interval which is number and quality. Note Represents a note, i.e. note name and octave. Notes Contains all available MIDI notes. NoteUtilities Provides utilities for working with the Note . Octave Represents an octave defined by its number. Scale Represents a musical scale. ScaleIntervals Provides intervals sequences for known musical scales. ScaleUtilities Provides useful utilities for working with Scale . Enums ChordQuality Represents a chord's quality. IntervalDirection Direction of a musical interval represented by the Interval . The default is Up . IntervalQuality Represents an interval's quality. NoteName Name of a note of the 12-tone chromatic scale. ScaleDegree Represents specific note (degree) of a musical scale."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Interval.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Interval.html",
    "title": "Class Interval | DryWetMIDI",
    "keywords": "Class Interval Represents a musical interval in terms of half steps number. Inheritance Object Interval Implements IComparable < Interval > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Interval : IComparable<Interval> Fields Eight Interval of eight half steps up. Declaration public static readonly Interval Eight Field Value Type Description Interval Eleven Interval of eleven half steps up. Declaration public static readonly Interval Eleven Field Value Type Description Interval Five Interval of five half steps up. Declaration public static readonly Interval Five Field Value Type Description Interval Four Interval of four half steps up. Declaration public static readonly Interval Four Field Value Type Description Interval Nine Interval of nine half steps up. Declaration public static readonly Interval Nine Field Value Type Description Interval One Interval of one half step up. Declaration public static readonly Interval One Field Value Type Description Interval Seven Interval of seven half steps up. Declaration public static readonly Interval Seven Field Value Type Description Interval Six Interval of six half steps up. Declaration public static readonly Interval Six Field Value Type Description Interval Ten Interval of ten half steps up. Declaration public static readonly Interval Ten Field Value Type Description Interval Three Interval of three half steps up. Declaration public static readonly Interval Three Field Value Type Description Interval Twelve Interval of twelve half steps up (one octave up). Declaration public static readonly Interval Twelve Field Value Type Description Interval Two Interval of two half steps up. Declaration public static readonly Interval Two Field Value Type Description Interval Zero Interval of zero half steps up. Declaration public static readonly Interval Zero Field Value Type Description Interval Properties Direction Gets the direction of the interval represented by the current Interval . Declaration public IntervalDirection Direction { get; } Property Value Type Description IntervalDirection HalfSteps Gets signed half steps number which represents an interval of the current Interval . Declaration public int HalfSteps { get; } Property Value Type Description Int32 Size Gets the size of interval represented by the current Interval as a number of half steps away. Declaration public SevenBitNumber Size { get; } Property Value Type Description SevenBitNumber Methods CompareTo(Interval) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Interval other) Parameters Type Name Description Interval other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Down() Returns downward version of the current Interval . Declaration public Interval Down() Returns Type Description Interval A downward version of the current Interval . Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) FromDefinition(IntervalDefinition) Creates an instance of the Interval from IntervalDefinition . Declaration public static Interval FromDefinition(IntervalDefinition intervalDefinition) Parameters Type Name Description IntervalDefinition intervalDefinition Interval definition to create interval from. Returns Type Description Interval Interval created from intervalDefinition . Exceptions Type Condition ArgumentNullException intervalDefinition is null . FromHalfSteps(Int32) Returns an Interval by the specified signed number of half steps where negative one means downward interval. Declaration public static Interval FromHalfSteps(int halfSteps) Parameters Type Name Description Int32 halfSteps The number of half steps. Returns Type Description Interval An Interval represented by the halfSteps . Exceptions Type Condition ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). Get(SevenBitNumber, IntervalDirection) Returns an Interval by the specified half steps number and interval's direction. Declaration public static Interval Get(SevenBitNumber intervalSize, IntervalDirection direction) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. IntervalDirection direction The direction of an interval (up or down). Returns Type Description Interval An Interval with the specified interval and direction. Exceptions Type Condition InvalidEnumArgumentException direction specified an invalid value. Get(IntervalQuality, Int32) Gets an instance of the Interval by the specified interval quality and number. Declaration public static Interval Get(IntervalQuality intervalQuality, int intervalNumber) Parameters Type Name Description IntervalQuality intervalQuality Interval quality. Int32 intervalNumber Interval number. Returns Type Description Interval An instance of the Interval which represents intervalNumber along with intervalQuality . Exceptions Type Condition InvalidEnumArgumentException intervalQuality specified an invalid value. ArgumentOutOfRangeException intervalNumber is less than 1. ArgumentException intervalQuality is not applicable to intervalNumber . GetDown(SevenBitNumber) Returns a downward Interval by the specified half steps number. Declaration public static Interval GetDown(SevenBitNumber intervalSize) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. Returns Type Description Interval A downward Interval with the specified interval. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetIntervalDefinitions() Returns collection of definitions of the current Interval . Declaration public IReadOnlyCollection<IntervalDefinition> GetIntervalDefinitions() Returns Type Description IReadOnlyCollection < IntervalDefinition > Collection of definitions of the current Interval . GetUp(SevenBitNumber) Returns an upward Interval by the specified half steps number. Declaration public static Interval GetUp(SevenBitNumber intervalSize) Parameters Type Name Description SevenBitNumber intervalSize The size of an interval as a number of half steps away. Returns Type Description Interval An upward Interval with the specified interval. IsPerfect(Int32) Gets a value indicating whether the specified interval number (1 and greater) is perfect or not. Declaration public static bool IsPerfect(int intervalNumber) Parameters Type Name Description Int32 intervalNumber Interval number to determine whether it's perfect or not. Returns Type Description Boolean true if intervalNumber is perfect; otherwise, false . Exceptions Type Condition ArgumentOutOfRangeException intervalNumber is less than 1. IsQualityApplicable(IntervalQuality, Int32) Gets a value indicating whether quality is applicable to the specified interval number (1 and greater) or not. Declaration public static bool IsQualityApplicable(IntervalQuality intervalQuality, int intervalNumber) Parameters Type Name Description IntervalQuality intervalQuality Interval quality to check whether it's applicable to intervalNumber or not. Int32 intervalNumber Interval number to check whether intervalQuality is applicable to it or not. Returns Type Description Boolean true if intervalQuality is applicable to intervalNumber ; otherwise, false . Exceptions Type Condition InvalidEnumArgumentException intervalQuality specified an invalid value. ArgumentOutOfRangeException intervalNumber is less than 1. Parse(String) Converts the string representation of a musical interval to its Scale equivalent. Declaration public static Interval Parse(string input) Parameters Type Name Description String input A string containing an interval to convert. Returns Type Description Interval A Scale equivalent to the musical interval contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Interval) Converts the string representation of a musical interval to its Interval equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Interval interval) Parameters Type Name Description String input A string containing an interval to convert. Interval interval When this method returns, contains the Interval equivalent of the musical interval contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Up() Returns upward version of the current Interval . Declaration public Interval Up() Returns Type Description Interval An upward version of the current Interval . Operators Addition(Interval, Int32) Adds the specified number of half steps to an Interval . Declaration public static Interval operator +(Interval interval, int halfSteps) Parameters Type Name Description Interval interval The interval to add half steps to. Int32 halfSteps The number of half steps to add to the interval . Returns Type Description Interval The Interval which is the interval shifted by the halfSteps . Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). Division(Interval, Int32) Shrinks the specified Interval by dividing it by an integer number. Declaration public static Interval operator /(Interval interval, int divisor) Parameters Type Name Description Interval interval The interval to shrink. Int32 divisor The number to divide the interval by. Returns Type Description Interval The Interval which is the interval shrinked by the divisor . Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException divisor is zero. Equality(Interval, Interval) Determines if two Interval objects are equal. Declaration public static bool operator ==(Interval interval1, Interval interval2) Parameters Type Name Description Interval interval1 The first Interval to compare. Interval interval2 The second Interval to compare. Returns Type Description Boolean true if the intervals are equal, false otherwise. Implicit(SevenBitNumber to Interval) Converts the value of a SevenBitNumber to a Interval . Declaration public static implicit operator Interval(SevenBitNumber interval) Parameters Type Name Description SevenBitNumber interval SevenBitNumber object to convert to an Interval . Returns Type Description Interval interval represented as Interval . Implicit(Interval to Int32) Converts the value of a Interval to a Int32 . Declaration public static implicit operator int (Interval interval) Parameters Type Name Description Interval interval Interval object to convert to an Int32 . Returns Type Description Int32 interval represented as Int32 . Inequality(Interval, Interval) Determines if two Interval objects are not equal. Declaration public static bool operator !=(Interval interval1, Interval interval2) Parameters Type Name Description Interval interval1 The first Interval to compare. Interval interval2 The second Interval to compare. Returns Type Description Boolean false if the intervals are equal, true otherwise. Multiply(Interval, Int32) Stretches the specified Interval by multiplying it by an integer number. Declaration public static Interval operator *(Interval interval, int multiplier) Parameters Type Name Description Interval interval The interval to stretch. Int32 multiplier The number to multiply the interval by. Returns Type Description Interval The Interval which is the interval stretched by the multiplier . Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException multiplier is out of range (result interval is out of the [-127,127] range). Subtraction(Interval, Int32) Subtracts the specified number of half steps from an Interval . Declaration public static Interval operator -(Interval interval, int halfSteps) Parameters Type Name Description Interval interval The interval to subtract half steps from. Int32 halfSteps The number of half steps to subtract from the interval . Returns Type Description Interval The Interval which is the interval shifted by the halfSteps . Exceptions Type Condition ArgumentNullException interval is null . ArgumentOutOfRangeException halfSteps is out of range (result interval is out of the [-127,127] range). UnaryNegation(Interval) Returns downward version of the specified Interval . Declaration public static Interval operator -(Interval interval) Parameters Type Name Description Interval interval The Interval to get downward version of. Returns Type Description Interval A downward version of the interval . Remarks This operator produces the same result as the Down() method. Exceptions Type Condition ArgumentNullException interval is null . UnaryPlus(Interval) Returns upward version of the specified Interval . Declaration public static Interval operator +(Interval interval) Parameters Type Name Description Interval interval The Interval to get upward version of. Returns Type Description Interval An upward version of the interval . Remarks This operator produces the same result as the Up() method. Exceptions Type Condition ArgumentNullException interval is null . Implements System.IComparable<T>"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalDefinition.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalDefinition.html",
    "title": "Class IntervalDefinition | DryWetMIDI",
    "keywords": "Class IntervalDefinition Definition of a musical interval which is number and quality. Inheritance Object IntervalDefinition Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class IntervalDefinition Constructors IntervalDefinition(Int32, IntervalQuality) Initializes a new instance of the IntervalDefinition with the specified interval number and quality. Declaration public IntervalDefinition(int number, IntervalQuality quality) Parameters Type Name Description Int32 number Interval number. IntervalQuality quality Interval quality. Exceptions Type Condition ArgumentOutOfRangeException number is less than 1. InvalidEnumArgumentException quality specified an invalid value. Properties Number Gets the interval number. Declaration public int Number { get; } Property Value Type Description Int32 Quality Gets the interval quality. Declaration public IntervalQuality Quality { get; } Property Value Type Description IntervalQuality Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Operators Equality(IntervalDefinition, IntervalDefinition) Determines if two IntervalDefinition objects are equal. Declaration public static bool operator ==(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2) Parameters Type Name Description IntervalDefinition intervalDefinition1 The first IntervalDefinition to compare. IntervalDefinition intervalDefinition2 The second IntervalDefinition to compare. Returns Type Description Boolean true if the interval definitions are equal, false otherwise. Inequality(IntervalDefinition, IntervalDefinition) Determines if two IntervalDefinition objects are not equal. Declaration public static bool operator !=(IntervalDefinition intervalDefinition1, IntervalDefinition intervalDefinition2) Parameters Type Name Description IntervalDefinition intervalDefinition1 The first IntervalDefinition to compare. IntervalDefinition intervalDefinition2 The second IntervalDefinition to compare. Returns Type Description Boolean false if the interval definitions are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalDirection.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalDirection.html",
    "title": "Enum IntervalDirection | DryWetMIDI",
    "keywords": "Enum IntervalDirection Direction of a musical interval represented by the Interval . The default is Up . Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum IntervalDirection Fields Name Description Down Downward interval (for example, 5 half steps down). Up Upward interval (for example, 5 half steps up)."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.IntervalQuality.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.IntervalQuality.html",
    "title": "Enum IntervalQuality | DryWetMIDI",
    "keywords": "Enum IntervalQuality Represents an interval's quality. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum IntervalQuality Fields Name Description Augmented Augmented interval. Diminished Diminished interval. Major Major interval. Minor Minor interval. Perfect Perfect interval."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Note.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Note.html",
    "title": "Class Note | DryWetMIDI",
    "keywords": "Class Note Represents a note, i.e. note name and octave. Inheritance Object Note Implements IComparable < Note > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Note : IComparable<Note> Properties NoteName Gets the note name. Declaration public NoteName NoteName { get; } Property Value Type Description NoteName NoteNumber Gets the note number. Declaration public SevenBitNumber NoteNumber { get; } Property Value Type Description SevenBitNumber Octave Gets the octave number of a note. Declaration public int Octave { get; } Property Value Type Description Int32 Methods CompareTo(Note) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(Note other) Parameters Type Name Description Note other An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other . Greater than zero This instance follows other in the sort order. Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) Get(SevenBitNumber) Returns a Note for the specified note number. Declaration public static Note Get(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber The number of a note (60 is middle C). Returns Type Description Note A Note for the noteNumber . Get(NoteName, Int32) Returns a Note for the specified note name and octave number. Declaration public static Note Get(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName The name of a note. Int32 octave The octave number. Returns Type Description Note A Note for the noteName and octave . Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String) Converts the string representation of a musical note to its Note equivalent. Declaration public static Note Parse(string input) Parameters Type Name Description String input A string containing a note to convert. Returns Type Description Note A Note equivalent to the musical note contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Transpose(Interval) Returns the current Note transposed by the specified Interval . Declaration public Note Transpose(Interval interval) Parameters Type Name Description Interval interval The Interval to transpose the current Note by. Returns Type Description Note The current Note transposed by the interval . Exceptions Type Condition ArgumentOutOfRangeException Result note's number is out of valid range. TryParse(String, out Note) Converts the string representation of a musical note to its Note equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Note note) Parameters Type Name Description String input A string containing a note to convert. Note note When this method returns, contains the Note equivalent of the musical note contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Addition(Note, Int32) Transposes the specified Note . Declaration public static Note operator +(Note note, int halfSteps) Parameters Type Name Description Note note The Note to transpose. Int32 halfSteps The number of half steps to transpose the note by. Returns Type Description Note The Note which is the note transposed by the halfSteps . Exceptions Type Condition ArgumentNullException note is null . ArgumentOutOfRangeException Result note's number is out of valid range. Equality(Note, Note) Determines if two Note objects are equal. Declaration public static bool operator ==(Note note1, Note note2) Parameters Type Name Description Note note1 The first Note to compare. Note note2 The second Note to compare. Returns Type Description Boolean true if the notes are equal, false otherwise. Inequality(Note, Note) Determines if two Note objects are not equal. Declaration public static bool operator !=(Note note1, Note note2) Parameters Type Name Description Note note1 The first Note to compare. Note note2 The second Note to compare. Returns Type Description Boolean false if the notes are equal, true otherwise. Subtraction(Note, Int32) Transposes the specified Note . Declaration public static Note operator -(Note note, int halfSteps) Parameters Type Name Description Note note The Note to transpose. Int32 halfSteps The number of half steps to transpose the note by. Returns Type Description Note The Note which is the note transposed by the halfSteps . Exceptions Type Condition ArgumentNullException note is null . ArgumentOutOfRangeException Result note's number is out of valid range. Implements System.IComparable<T>"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.NoteName.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.NoteName.html",
    "title": "Enum NoteName | DryWetMIDI",
    "keywords": "Enum NoteName Name of a note of the 12-tone chromatic scale. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteName Fields Name Description A A (La) note. ASharp Half-stepped A (La) note. B B (Si) note. C C (Do) note. CSharp Half-stepped C (Do) note. D D (Re) note. DSharp Half-stepped D (Re) note. E E (Mi) note. F F (Fa) note. FSharp Half-stepped F (Fa) note. G G (Sol) note. GSharp Half-stepped G (Sol) note. Extension Methods NoteUtilities.Transpose(Interval)"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Notes.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Notes.html",
    "title": "Class Notes | DryWetMIDI",
    "keywords": "Class Notes Contains all available MIDI notes. Inheritance Object Notes Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class Notes Fields A0 A0 note. Declaration public static readonly Note A0 Field Value Type Description Note A1 A1 note. Declaration public static readonly Note A1 Field Value Type Description Note A2 A2 note. Declaration public static readonly Note A2 Field Value Type Description Note A3 A3 note. Declaration public static readonly Note A3 Field Value Type Description Note A4 A4 note. Declaration public static readonly Note A4 Field Value Type Description Note A5 A5 note. Declaration public static readonly Note A5 Field Value Type Description Note A6 A6 note. Declaration public static readonly Note A6 Field Value Type Description Note A7 A7 note. Declaration public static readonly Note A7 Field Value Type Description Note A8 A8 note. Declaration public static readonly Note A8 Field Value Type Description Note AMinus1 A-1 note. Declaration public static readonly Note AMinus1 Field Value Type Description Note ASharp0 A#0 note. Declaration public static readonly Note ASharp0 Field Value Type Description Note ASharp1 A#1 note. Declaration public static readonly Note ASharp1 Field Value Type Description Note ASharp2 A#2 note. Declaration public static readonly Note ASharp2 Field Value Type Description Note ASharp3 A#3 note. Declaration public static readonly Note ASharp3 Field Value Type Description Note ASharp4 A#4 note. Declaration public static readonly Note ASharp4 Field Value Type Description Note ASharp5 A#5 note. Declaration public static readonly Note ASharp5 Field Value Type Description Note ASharp6 A#6 note. Declaration public static readonly Note ASharp6 Field Value Type Description Note ASharp7 A#7 note. Declaration public static readonly Note ASharp7 Field Value Type Description Note ASharp8 A#8 note. Declaration public static readonly Note ASharp8 Field Value Type Description Note ASharpMinus1 A#-1 note. Declaration public static readonly Note ASharpMinus1 Field Value Type Description Note B0 B0 note. Declaration public static readonly Note B0 Field Value Type Description Note B1 B1 note. Declaration public static readonly Note B1 Field Value Type Description Note B2 B2 note. Declaration public static readonly Note B2 Field Value Type Description Note B3 B3 note. Declaration public static readonly Note B3 Field Value Type Description Note B4 B4 note. Declaration public static readonly Note B4 Field Value Type Description Note B5 B5 note. Declaration public static readonly Note B5 Field Value Type Description Note B6 B6 note. Declaration public static readonly Note B6 Field Value Type Description Note B7 B7 note. Declaration public static readonly Note B7 Field Value Type Description Note B8 B8 note. Declaration public static readonly Note B8 Field Value Type Description Note BMinus1 B-1 note. Declaration public static readonly Note BMinus1 Field Value Type Description Note C0 C0 note. Declaration public static readonly Note C0 Field Value Type Description Note C1 C1 note. Declaration public static readonly Note C1 Field Value Type Description Note C2 C2 note. Declaration public static readonly Note C2 Field Value Type Description Note C3 C3 note. Declaration public static readonly Note C3 Field Value Type Description Note C4 C4 note. Declaration public static readonly Note C4 Field Value Type Description Note C5 C5 note. Declaration public static readonly Note C5 Field Value Type Description Note C6 C6 note. Declaration public static readonly Note C6 Field Value Type Description Note C7 C7 note. Declaration public static readonly Note C7 Field Value Type Description Note C8 C8 note. Declaration public static readonly Note C8 Field Value Type Description Note C9 C9 note. Declaration public static readonly Note C9 Field Value Type Description Note CMinus1 C-1 note. Declaration public static readonly Note CMinus1 Field Value Type Description Note CSharp0 C#0 note. Declaration public static readonly Note CSharp0 Field Value Type Description Note CSharp1 C#1 note. Declaration public static readonly Note CSharp1 Field Value Type Description Note CSharp2 C#2 note. Declaration public static readonly Note CSharp2 Field Value Type Description Note CSharp3 C#3 note. Declaration public static readonly Note CSharp3 Field Value Type Description Note CSharp4 C#4 note. Declaration public static readonly Note CSharp4 Field Value Type Description Note CSharp5 C#5 note. Declaration public static readonly Note CSharp5 Field Value Type Description Note CSharp6 C#6 note. Declaration public static readonly Note CSharp6 Field Value Type Description Note CSharp7 C#7 note. Declaration public static readonly Note CSharp7 Field Value Type Description Note CSharp8 C#8 note. Declaration public static readonly Note CSharp8 Field Value Type Description Note CSharp9 C#9 note. Declaration public static readonly Note CSharp9 Field Value Type Description Note CSharpMinus1 C#-1 note. Declaration public static readonly Note CSharpMinus1 Field Value Type Description Note D0 D0 note. Declaration public static readonly Note D0 Field Value Type Description Note D1 D1 note. Declaration public static readonly Note D1 Field Value Type Description Note D2 D2 note. Declaration public static readonly Note D2 Field Value Type Description Note D3 D3 note. Declaration public static readonly Note D3 Field Value Type Description Note D4 D4 note. Declaration public static readonly Note D4 Field Value Type Description Note D5 D5 note. Declaration public static readonly Note D5 Field Value Type Description Note D6 D6 note. Declaration public static readonly Note D6 Field Value Type Description Note D7 D7 note. Declaration public static readonly Note D7 Field Value Type Description Note D8 D8 note. Declaration public static readonly Note D8 Field Value Type Description Note D9 D9 note. Declaration public static readonly Note D9 Field Value Type Description Note DMinus1 D-1 note. Declaration public static readonly Note DMinus1 Field Value Type Description Note DSharp0 D#0 note. Declaration public static readonly Note DSharp0 Field Value Type Description Note DSharp1 D#1 note. Declaration public static readonly Note DSharp1 Field Value Type Description Note DSharp2 D#2 note. Declaration public static readonly Note DSharp2 Field Value Type Description Note DSharp3 D#3 note. Declaration public static readonly Note DSharp3 Field Value Type Description Note DSharp4 D#4 note. Declaration public static readonly Note DSharp4 Field Value Type Description Note DSharp5 D#5 note. Declaration public static readonly Note DSharp5 Field Value Type Description Note DSharp6 D#6 note. Declaration public static readonly Note DSharp6 Field Value Type Description Note DSharp7 D#7 note. Declaration public static readonly Note DSharp7 Field Value Type Description Note DSharp8 D#8 note. Declaration public static readonly Note DSharp8 Field Value Type Description Note DSharp9 D#9 note. Declaration public static readonly Note DSharp9 Field Value Type Description Note DSharpMinus1 D#-1 note. Declaration public static readonly Note DSharpMinus1 Field Value Type Description Note E0 E0 note. Declaration public static readonly Note E0 Field Value Type Description Note E1 E1 note. Declaration public static readonly Note E1 Field Value Type Description Note E2 E2 note. Declaration public static readonly Note E2 Field Value Type Description Note E3 E3 note. Declaration public static readonly Note E3 Field Value Type Description Note E4 E4 note. Declaration public static readonly Note E4 Field Value Type Description Note E5 E5 note. Declaration public static readonly Note E5 Field Value Type Description Note E6 E6 note. Declaration public static readonly Note E6 Field Value Type Description Note E7 E7 note. Declaration public static readonly Note E7 Field Value Type Description Note E8 E8 note. Declaration public static readonly Note E8 Field Value Type Description Note E9 E9 note. Declaration public static readonly Note E9 Field Value Type Description Note EMinus1 E-1 note. Declaration public static readonly Note EMinus1 Field Value Type Description Note F0 F0 note. Declaration public static readonly Note F0 Field Value Type Description Note F1 F1 note. Declaration public static readonly Note F1 Field Value Type Description Note F2 F2 note. Declaration public static readonly Note F2 Field Value Type Description Note F3 F3 note. Declaration public static readonly Note F3 Field Value Type Description Note F4 F4 note. Declaration public static readonly Note F4 Field Value Type Description Note F5 F5 note. Declaration public static readonly Note F5 Field Value Type Description Note F6 F6 note. Declaration public static readonly Note F6 Field Value Type Description Note F7 F7 note. Declaration public static readonly Note F7 Field Value Type Description Note F8 F8 note. Declaration public static readonly Note F8 Field Value Type Description Note F9 F9 note. Declaration public static readonly Note F9 Field Value Type Description Note FMinus1 F-1 note. Declaration public static readonly Note FMinus1 Field Value Type Description Note FSharp0 F#0 note. Declaration public static readonly Note FSharp0 Field Value Type Description Note FSharp1 F#1 note. Declaration public static readonly Note FSharp1 Field Value Type Description Note FSharp2 F#2 note. Declaration public static readonly Note FSharp2 Field Value Type Description Note FSharp3 F#3 note. Declaration public static readonly Note FSharp3 Field Value Type Description Note FSharp4 F#4 note. Declaration public static readonly Note FSharp4 Field Value Type Description Note FSharp5 F#5 note. Declaration public static readonly Note FSharp5 Field Value Type Description Note FSharp6 F#6 note. Declaration public static readonly Note FSharp6 Field Value Type Description Note FSharp7 F#7 note. Declaration public static readonly Note FSharp7 Field Value Type Description Note FSharp8 F#8 note. Declaration public static readonly Note FSharp8 Field Value Type Description Note FSharp9 F#9 note. Declaration public static readonly Note FSharp9 Field Value Type Description Note FSharpMinus1 F#-1 note. Declaration public static readonly Note FSharpMinus1 Field Value Type Description Note G0 G0 note. Declaration public static readonly Note G0 Field Value Type Description Note G1 G1 note. Declaration public static readonly Note G1 Field Value Type Description Note G2 G2 note. Declaration public static readonly Note G2 Field Value Type Description Note G3 G3 note. Declaration public static readonly Note G3 Field Value Type Description Note G4 G4 note. Declaration public static readonly Note G4 Field Value Type Description Note G5 G5 note. Declaration public static readonly Note G5 Field Value Type Description Note G6 G6 note. Declaration public static readonly Note G6 Field Value Type Description Note G7 G7 note. Declaration public static readonly Note G7 Field Value Type Description Note G8 G8 note. Declaration public static readonly Note G8 Field Value Type Description Note G9 G9 note. Declaration public static readonly Note G9 Field Value Type Description Note GMinus1 G-1 note. Declaration public static readonly Note GMinus1 Field Value Type Description Note GSharp0 G#0 note. Declaration public static readonly Note GSharp0 Field Value Type Description Note GSharp1 G#1 note. Declaration public static readonly Note GSharp1 Field Value Type Description Note GSharp2 G#2 note. Declaration public static readonly Note GSharp2 Field Value Type Description Note GSharp3 G#3 note. Declaration public static readonly Note GSharp3 Field Value Type Description Note GSharp4 G#4 note. Declaration public static readonly Note GSharp4 Field Value Type Description Note GSharp5 G#5 note. Declaration public static readonly Note GSharp5 Field Value Type Description Note GSharp6 G#6 note. Declaration public static readonly Note GSharp6 Field Value Type Description Note GSharp7 G#7 note. Declaration public static readonly Note GSharp7 Field Value Type Description Note GSharp8 G#8 note. Declaration public static readonly Note GSharp8 Field Value Type Description Note GSharpMinus1 G#-1 note. Declaration public static readonly Note GSharpMinus1 Field Value Type Description Note"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.NoteUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.NoteUtilities.html",
    "title": "Class NoteUtilities | DryWetMIDI",
    "keywords": "Class NoteUtilities Provides utilities for working with the Note . Inheritance Object NoteUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class NoteUtilities Methods GetNoteName(SevenBitNumber) Gets name of the note presented by note number. Declaration public static NoteName GetNoteName(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Note number to get note name of. Returns Type Description NoteName Name of the note presented by noteNumber . GetNoteNumber(NoteName, Int32) Gets the note number for the specified note name and octave. Declaration public static SevenBitNumber GetNoteNumber(NoteName noteName, int octave) Parameters Type Name Description NoteName noteName Name of the note. Int32 octave Number of the octave in scientific pitch notation. Returns Type Description SevenBitNumber Number of the note represented by specified name and octave. Remarks Octave number is specified in scientific pitch notation which means that 4 must be passed to octave to get the number of the middle C. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentException Note number is out of range for the specified note name and octave. GetNoteOctave(SevenBitNumber) Gets octave number of the note presented by note number in scientific pitch notation. Declaration public static int GetNoteOctave(SevenBitNumber noteNumber) Parameters Type Name Description SevenBitNumber noteNumber Note number to get octave of. Returns Type Description Int32 Octave of the note presented by noteNumber . Remarks Octave number will be returned in scientific pitch notation which means that 4 will be returned for 60 note number. Transpose(NoteName, Interval) Transposes note name by the specified interval. Declaration public static NoteName Transpose(this NoteName noteName, Interval interval) Parameters Type Name Description NoteName noteName NoteName to transpose. Interval interval Interval to transpose by. Returns Type Description NoteName Note name which is noteName transposed by interval . Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. ArgumentNullException interval is null ."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Octave.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Octave.html",
    "title": "Class Octave | DryWetMIDI",
    "keywords": "Class Octave Represents an octave defined by its number. Inheritance Object Octave Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Octave Fields MaxOctaveNumber The largest possible value of an octave's number. Declaration public static readonly int MaxOctaveNumber Field Value Type Description Int32 Middle The octave which contains the middle C note (C4). Declaration public static readonly Octave Middle Field Value Type Description Octave MinOctaveNumber The smalles possible value of an octave's number. Declaration public static readonly int MinOctaveNumber Field Value Type Description Int32 OctaveSize The size of an octave, i.e. number of notes within an octave. Declaration public const int OctaveSize = 12 Field Value Type Description Int32 Properties A Gets the A note of an octave defined by the current Octave . Declaration public Note A { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. ASharp Gets the A# note of an octave defined by the current Octave . Declaration public Note ASharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. B Gets the B note of an octave defined by the current Octave . Declaration public Note B { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. C Gets the C note of an octave defined by the current Octave . Declaration public Note C { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. CSharp Gets the C# note of an octave defined by the current Octave . Declaration public Note CSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. D Gets the D note of an octave defined by the current Octave . Declaration public Note D { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. DSharp Gets the D# note of an octave defined by the current Octave . Declaration public Note DSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. E Gets the E note of an octave defined by the current Octave . Declaration public Note E { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. F Gets the F note of an octave defined by the current Octave . Declaration public Note F { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. FSharp Gets the F# note of an octave defined by the current Octave . Declaration public Note FSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. G Gets the G note of an octave defined by the current Octave . Declaration public Note G { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. GSharp Gets the G# note of an octave defined by the current Octave . Declaration public Note GSharp { get; } Property Value Type Description Note Exceptions Type Condition InvalidOperationException Unable to get a note. Number Gets the number of an octave represented by the current Octave . Declaration public int Number { get; } Property Value Type Description Int32 Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) Get(Int32) Gets an octave by the specified octave number. Declaration public static Octave Get(int octaveNumber) Parameters Type Name Description Int32 octaveNumber The number of an octave. Returns Type Description Octave An octave with the specified number. Exceptions Type Condition ArgumentOutOfRangeException octaveNumber is out of valid range. GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() GetNote(NoteName) Gets a note by the specified note name using current octave. Declaration public Note GetNote(NoteName noteName) Parameters Type Name Description NoteName noteName The name of a note. Returns Type Description Note Note with the specified note name and current octave. Exceptions Type Condition InvalidEnumArgumentException noteName specified an invalid value. InvalidOperationException Unable to get a note for the noteName . Parse(String) Converts the string representation of a musical octave to its Octave equivalent. Declaration public static Octave Parse(string input) Parameters Type Name Description String input A string containing an octave to convert. Returns Type Description Octave A Octave equivalent to the musical note contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Octave) Converts the string representation of a musical octave to its Octave equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Octave octave) Parameters Type Name Description String input A string containing an octave to convert. Octave octave When this method returns, contains the Octave equivalent of the musical octave contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Equality(Octave, Octave) Determines if two Octave objects are equal. Declaration public static bool operator ==(Octave octave1, Octave octave2) Parameters Type Name Description Octave octave1 The first Octave to compare. Octave octave2 The second Octave to compare. Returns Type Description Boolean true if the octaves are equal, false otherwise. Inequality(Octave, Octave) Determines if two Octave objects are not equal. Declaration public static bool operator !=(Octave octave1, Octave octave2) Parameters Type Name Description Octave octave1 The first Octave to compare. Octave octave2 The second Octave to compare. Returns Type Description Boolean false if the octaves are equal, true otherwise."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.Scale.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.Scale.html",
    "title": "Class Scale | DryWetMIDI",
    "keywords": "Class Scale Represents a musical scale. Inheritance Object Scale Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class Scale Constructors Scale(IEnumerable<Interval>, NoteName) Initializes a new instance of the Scale with the specified intervals and root note. Declaration public Scale(IEnumerable<Interval> intervals, NoteName rootNote) Parameters Type Name Description IEnumerable < Interval > intervals Intervals between adjacent notes of the scale. NoteName rootNote Root note (tonic) of the scale. Exceptions Type Condition ArgumentNullException intervals is null . InvalidEnumArgumentException rootNote specified an invalid value. Properties Intervals Gets inetrvals between adjacent notes of the current Scale . Declaration public IEnumerable<Interval> Intervals { get; } Property Value Type Description IEnumerable < Interval > RootNote Gets root note (tonic) of the current Scale . Declaration public NoteName RootNote { get; } Property Value Type Description NoteName Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false . Overrides Object.Equals(Object) GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() Parse(String) Converts the string representation of a musical scale to its Scale equivalent. Declaration public static Scale Parse(string input) Parameters Type Name Description String input A string containing a scale to convert. Returns Type Description Scale A Scale equivalent to the musical scale contained in input . Exceptions Type Condition ArgumentException input is null or contains white-spaces only. FormatException input has invalid format. ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() TryParse(String, out Scale) Converts the string representation of a musical scale to its Scale equivalent. A return value indicates whether the conversion succeeded. Declaration public static bool TryParse(string input, out Scale scale) Parameters Type Name Description String input A string containing a scale to convert. Scale scale When this method returns, contains the Scale equivalent of the musical scale contained in input , if the conversion succeeded, or null if the conversion failed. The conversion fails if the input is null or Empty , or is not of the correct format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if input was converted successfully; otherwise, false . Operators Equality(Scale, Scale) Determines if two Scale objects are equal. Declaration public static bool operator ==(Scale scale1, Scale scale2) Parameters Type Name Description Scale scale1 The first Scale to compare. Scale scale2 The second Scale to compare. Returns Type Description Boolean true if the scales are equal, false otherwise. Inequality(Scale, Scale) Determines if two Scale objects are not equal. Declaration public static bool operator !=(Scale scale1, Scale scale2) Parameters Type Name Description Scale scale1 The first Scale to compare. Scale scale2 The second Scale to compare. Returns Type Description Boolean false if the scales are equal, true otherwise. Extension Methods ScaleUtilities.GetDegree(Scale, ScaleDegree) ScaleUtilities.GetStep(Scale, Int32) ScaleUtilities.GetNotes(Scale) ScaleUtilities.GetNotesNames(Scale) ScaleUtilities.GetAscendingNotes(Scale, Note) ScaleUtilities.GetDescendingNotes(Scale, Note) ScaleUtilities.IsNoteInScale(Scale, Note) ScaleUtilities.GetNextNote(Scale, Note) ScaleUtilities.GetPreviousNote(Scale, Note)"
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleDegree.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleDegree.html",
    "title": "Enum ScaleDegree | DryWetMIDI",
    "keywords": "Enum ScaleDegree Represents specific note (degree) of a musical scale. Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public enum ScaleDegree Fields Name Description Dominant Dominant of a musical scale (5th degree). LeadingTone Leading tone of a musical scale (7th degree). Mediant Mediant of a musical scale (3rd degree). Subdominant Subdominant of a musical scale (4th degree). Submediant Submediant of a musical scale (6th degree). Supertonic Supertonic of a musical scale (2nd degree). Tonic Tonic of a musical scale (1st degree)."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleIntervals.html",
    "title": "Class ScaleIntervals | DryWetMIDI",
    "keywords": "Class ScaleIntervals Provides intervals sequences for known musical scales. Inheritance Object ScaleIntervals Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ScaleIntervals Fields Aeolian 'Aeolian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Aeolian Field Value Type Description IEnumerable < Interval > Altered 'Altered' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Altered Field Value Type Description IEnumerable < Interval > Arabian 'Arabian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Arabian Field Value Type Description IEnumerable < Interval > Augmented 'Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Augmented Field Value Type Description IEnumerable < Interval > AugmentedHeptatonic 'Augmented Heptatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> AugmentedHeptatonic Field Value Type Description IEnumerable < Interval > Balinese 'Balinese' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Balinese Field Value Type Description IEnumerable < Interval > Bebop 'Bebop' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Bebop Field Value Type Description IEnumerable < Interval > BebopDominant 'Bebop Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopDominant Field Value Type Description IEnumerable < Interval > BebopLocrian 'Bebop Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopLocrian Field Value Type Description IEnumerable < Interval > BebopMajor 'Bebop Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopMajor Field Value Type Description IEnumerable < Interval > BebopMinor 'Bebop Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> BebopMinor Field Value Type Description IEnumerable < Interval > Blues 'Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Blues Field Value Type Description IEnumerable < Interval > Chinese 'Chinese' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Chinese Field Value Type Description IEnumerable < Interval > Chromatic 'Chromatic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Chromatic Field Value Type Description IEnumerable < Interval > CompositeBlues 'Composite Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> CompositeBlues Field Value Type Description IEnumerable < Interval > Diminished 'Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Diminished Field Value Type Description IEnumerable < Interval > DiminishedWholeTone 'Diminished Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DiminishedWholeTone Field Value Type Description IEnumerable < Interval > Dominant 'Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dominant Field Value Type Description IEnumerable < Interval > Dorian 'Dorian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dorian Field Value Type Description IEnumerable < Interval > Dorian4 'Dorian #4' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Dorian4 Field Value Type Description IEnumerable < Interval > DorianB2 'Dorian b2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DorianB2 Field Value Type Description IEnumerable < Interval > DoubleHarmonicLydian 'Double Harmonic Lydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DoubleHarmonicLydian Field Value Type Description IEnumerable < Interval > DoubleHarmonicMajor 'Double Harmonic Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> DoubleHarmonicMajor Field Value Type Description IEnumerable < Interval > Egyptian 'Egyptian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Egyptian Field Value Type Description IEnumerable < Interval > Enigmatic 'Enigmatic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Enigmatic Field Value Type Description IEnumerable < Interval > Flamenco 'Flamenco' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Flamenco Field Value Type Description IEnumerable < Interval > FlatSixPentatonic 'Flat Six Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> FlatSixPentatonic Field Value Type Description IEnumerable < Interval > FlatThreePentatonic 'Flat Three Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> FlatThreePentatonic Field Value Type Description IEnumerable < Interval > Gypsy 'Gypsy' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Gypsy Field Value Type Description IEnumerable < Interval > HarmonicMajor 'Harmonic Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HarmonicMajor Field Value Type Description IEnumerable < Interval > HarmonicMinor 'Harmonic Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HarmonicMinor Field Value Type Description IEnumerable < Interval > Hindu 'Hindu' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Hindu Field Value Type Description IEnumerable < Interval > Hirajoshi 'Hirajoshi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Hirajoshi Field Value Type Description IEnumerable < Interval > HungarianMajor 'Hungarian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HungarianMajor Field Value Type Description IEnumerable < Interval > HungarianMinor 'Hungarian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> HungarianMinor Field Value Type Description IEnumerable < Interval > Ichikosucho 'Ichikosucho' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ichikosucho Field Value Type Description IEnumerable < Interval > Indian 'Indian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Indian Field Value Type Description IEnumerable < Interval > InSen 'In-Sen' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> InSen Field Value Type Description IEnumerable < Interval > Ionian 'Ionian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ionian Field Value Type Description IEnumerable < Interval > IonianAugmented 'Ionian Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> IonianAugmented Field Value Type Description IEnumerable < Interval > IonianPentatonic 'Ionian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> IonianPentatonic Field Value Type Description IEnumerable < Interval > Iwato 'Iwato' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Iwato Field Value Type Description IEnumerable < Interval > KafiRaga 'Kafi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> KafiRaga Field Value Type Description IEnumerable < Interval > Kumoi 'Kumoi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Kumoi Field Value Type Description IEnumerable < Interval > Kumoijoshi 'Kumoijoshi' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Kumoijoshi Field Value Type Description IEnumerable < Interval > LeadingWholeTone 'Leading Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LeadingWholeTone Field Value Type Description IEnumerable < Interval > Locrian 'Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Locrian Field Value Type Description IEnumerable < Interval > Locrian2 'Locrian #2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Locrian2 Field Value Type Description IEnumerable < Interval > LocrianMajor 'Locrian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LocrianMajor Field Value Type Description IEnumerable < Interval > LocrianPentatonic 'Locrian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LocrianPentatonic Field Value Type Description IEnumerable < Interval > Lydian 'Lydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian Field Value Type Description IEnumerable < Interval > Lydian5PPentatonic 'Lydian #5P Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian5PPentatonic Field Value Type Description IEnumerable < Interval > Lydian9 'Lydian #9' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Lydian9 Field Value Type Description IEnumerable < Interval > LydianAugmented 'Lydian Augmented' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianAugmented Field Value Type Description IEnumerable < Interval > LydianB7 'Lydian b7' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianB7 Field Value Type Description IEnumerable < Interval > LydianDiminished 'Lydian Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDiminished Field Value Type Description IEnumerable < Interval > LydianDominant 'Lydian Dominant' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDominant Field Value Type Description IEnumerable < Interval > LydianDominantPentatonic 'Lydian Dominant Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianDominantPentatonic Field Value Type Description IEnumerable < Interval > LydianMinor 'Lydian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianMinor Field Value Type Description IEnumerable < Interval > LydianPentatonic 'Lydian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> LydianPentatonic Field Value Type Description IEnumerable < Interval > Major 'Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Major Field Value Type Description IEnumerable < Interval > MajorBlues 'Major Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorBlues Field Value Type Description IEnumerable < Interval > MajorFlatTwoPentatonic 'Major Flat Two Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorFlatTwoPentatonic Field Value Type Description IEnumerable < Interval > MajorPentatonic 'Major Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MajorPentatonic Field Value Type Description IEnumerable < Interval > MalkosRaga 'Malkos Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MalkosRaga Field Value Type Description IEnumerable < Interval > MelodicMinor 'Melodic Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinor Field Value Type Description IEnumerable < Interval > MelodicMinorFifthMode 'Melodic Minor Fifth Mode' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinorFifthMode Field Value Type Description IEnumerable < Interval > MelodicMinorSecondMode 'Melodic Minor Second Mode' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MelodicMinorSecondMode Field Value Type Description IEnumerable < Interval > Minor 'Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Minor Field Value Type Description IEnumerable < Interval > Minor7MPentatonic 'Minor #7M Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Minor7MPentatonic Field Value Type Description IEnumerable < Interval > MinorBebop 'Minor Bebop' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorBebop Field Value Type Description IEnumerable < Interval > MinorBlues 'Minor Blues' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorBlues Field Value Type Description IEnumerable < Interval > MinorHexatonic 'Minor Hexatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorHexatonic Field Value Type Description IEnumerable < Interval > MinorPentatonic 'Minor Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorPentatonic Field Value Type Description IEnumerable < Interval > MinorSevenFlatFivePentatonic 'Minor Seven Flat Five Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSevenFlatFivePentatonic Field Value Type Description IEnumerable < Interval > MinorSixDiminished 'Minor Six Diminished' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSixDiminished Field Value Type Description IEnumerable < Interval > MinorSixPentatonic 'Minor Six Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MinorSixPentatonic Field Value Type Description IEnumerable < Interval > Mixolydian 'Mixolydian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Mixolydian Field Value Type Description IEnumerable < Interval > MixolydianB6M 'Mixolydian b6M' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MixolydianB6M Field Value Type Description IEnumerable < Interval > MixolydianPentatonic 'Mixolydian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> MixolydianPentatonic Field Value Type Description IEnumerable < Interval > Mystery1 'Mystery #1' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Mystery1 Field Value Type Description IEnumerable < Interval > Neopolitan 'Neopolitan' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Neopolitan Field Value Type Description IEnumerable < Interval > NeopolitanMajor 'Neopolitan Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMajor Field Value Type Description IEnumerable < Interval > NeopolitanMajorPentatonic 'Neopolitan Major Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMajorPentatonic Field Value Type Description IEnumerable < Interval > NeopolitanMinor 'Neopolitan Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> NeopolitanMinor Field Value Type Description IEnumerable < Interval > Oriental 'Oriental' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Oriental Field Value Type Description IEnumerable < Interval > Pelog 'Pelog' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pelog Field Value Type Description IEnumerable < Interval > Pentatonic 'Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pentatonic Field Value Type Description IEnumerable < Interval > Persian 'Persian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Persian Field Value Type Description IEnumerable < Interval > Phrygian 'Phrygian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Phrygian Field Value Type Description IEnumerable < Interval > PhrygianMajor 'Phrygian Major' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PhrygianMajor Field Value Type Description IEnumerable < Interval > Piongio 'Piongio' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Piongio Field Value Type Description IEnumerable < Interval > Pomeroy 'Pomeroy' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Pomeroy Field Value Type Description IEnumerable < Interval > Prometheus 'Prometheus' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Prometheus Field Value Type Description IEnumerable < Interval > PrometheusNeopolitan 'Prometheus Neopolitan' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PrometheusNeopolitan Field Value Type Description IEnumerable < Interval > PurviRaga 'Purvi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> PurviRaga Field Value Type Description IEnumerable < Interval > Ritusen 'Ritusen' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Ritusen Field Value Type Description IEnumerable < Interval > RomanianMinor 'Romanian Minor' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> RomanianMinor Field Value Type Description IEnumerable < Interval > Scriabin 'Scriabin' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Scriabin Field Value Type Description IEnumerable < Interval > SixToneSymmetric 'Six Tone Symmetric' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SixToneSymmetric Field Value Type Description IEnumerable < Interval > Spanish 'Spanish' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Spanish Field Value Type Description IEnumerable < Interval > SpanishHeptatonic 'Spanish Heptatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SpanishHeptatonic Field Value Type Description IEnumerable < Interval > SuperLocrian 'Super Locrian' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SuperLocrian Field Value Type Description IEnumerable < Interval > SuperLocrianPentatonic 'Super Locrian Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> SuperLocrianPentatonic Field Value Type Description IEnumerable < Interval > TodiRaga 'Todi Raga' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> TodiRaga Field Value Type Description IEnumerable < Interval > Vietnamese1 'Vietnamese 1' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Vietnamese1 Field Value Type Description IEnumerable < Interval > Vietnamese2 'Vietnamese 2' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> Vietnamese2 Field Value Type Description IEnumerable < Interval > WholeTone 'Whole Tone' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> WholeTone Field Value Type Description IEnumerable < Interval > WholeTonePentatonic 'Whole Tone Pentatonic' scale's intervals sequence. Declaration public static readonly IEnumerable<Interval> WholeTonePentatonic Field Value Type Description IEnumerable < Interval > Methods GetByName(String) Gets musical scale's intervals sequence by the scale's name. Declaration public static IEnumerable<Interval> GetByName(string name) Parameters Type Name Description String name The name of a scale. Returns Type Description IEnumerable < Interval > Intervals sequence for the scale with the name name ; or null if there is no a scale with this name. Exceptions Type Condition ArgumentException name is null or contains white-spaces only."
  },
  "api/Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.MusicTheory.ScaleUtilities.html",
    "title": "Class ScaleUtilities | DryWetMIDI",
    "keywords": "Class ScaleUtilities Provides useful utilities for working with Scale . Inheritance Object ScaleUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.MusicTheory Assembly : Melanchall.DryWetMidi.dll Syntax public static class ScaleUtilities Methods GetAscendingNotes(Scale, Note) Gets notes that belong to a musical scale in ascending order starting with the specified root note. Declaration public static IEnumerable<Note> GetAscendingNotes(this Scale scale, Note rootNote) Parameters Type Name Description Scale scale Scale to get notes of. Note rootNote Note to start a sequence of scale's notes with. Returns Type Description IEnumerable < Note > Notes that belong to the scale in ascending order starting with the rootNote . Exceptions Type Condition ArgumentNullException One of the following errors occured: scale is null . rootNote is null . GetDegree(Scale, ScaleDegree) Gets NoteName corresponding to the specified degree of a musical scale. Declaration public static NoteName GetDegree(this Scale scale, ScaleDegree degree) Parameters Type Name Description Scale scale Scale to get degree of. ScaleDegree degree ScaleDegree representing a degree of the scale . Returns Type Description NoteName NoteName which is the degree of the scale. Exceptions Type Condition ArgumentNullException scale is null . InvalidEnumArgumentException degree specified an invalid value. ArgumentOutOfRangeException degree is out of range for the scale . GetDescendingNotes(Scale, Note) Gets notes that belong to a musical scale in descending order starting with the specified root note. Declaration public static IEnumerable<Note> GetDescendingNotes(this Scale scale, Note rootNote) Parameters Type Name Description Scale scale Scale to get notes of. Note rootNote Note to start a sequence of scale's notes with. Returns Type Description IEnumerable < Note > Notes that belong to the scale in descending order starting with the rootNote . Exceptions Type Condition ArgumentNullException One of the following errors occured: scale is null . rootNote is null . GetNextNote(Scale, Note) Gets a note that belongs to a musical scale next to the specified note. Declaration public static Note GetNextNote(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to get the next note of. Note note Note to get a note next to. Returns Type Description Note A note next to the note that belongs to the scale . Exceptions Type Condition ArgumentNullException One of the following errors occured: scale is null . note is null . GetNotes(Scale) Gets all MIDI notes that belong to the specified scale. Declaration public static IEnumerable<Note> GetNotes(this Scale scale) Parameters Type Name Description Scale scale Scale to get notes of. Returns Type Description IEnumerable < Note > Notes that belong to the scale . Exceptions Type Condition ArgumentNullException scale is null . GetNotesNames(Scale) Returns infinite collection of note names that belong to the specified scale. Declaration public static IEnumerable<NoteName> GetNotesNames(this Scale scale) Parameters Type Name Description Scale scale Scale to get note names of. Returns Type Description IEnumerable < NoteName > Note names that belong to the scale . Exceptions Type Condition ArgumentNullException scale is null . GetPreviousNote(Scale, Note) Gets a note that belongs to a musical scale previous to the specified note. Declaration public static Note GetPreviousNote(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to get the previous note of. Note note Note to get a note previous to. Returns Type Description Note A note previous to the note that belongs to the scale . Exceptions Type Condition ArgumentNullException One of the following errors occured: scale is null . note is null . GetStep(Scale, Int32) Gets NoteName corresponding to the specified step of a musical scale. Declaration public static NoteName GetStep(this Scale scale, int step) Parameters Type Name Description Scale scale Scale to get step of. Int32 step Step of the scale. Returns Type Description NoteName NoteName which is the step of the scale. Exceptions Type Condition ArgumentNullException scale is null . ArgumentOutOfRangeException step is negative. IsNoteInScale(Scale, Note) Checks if the specified note belongs to a scale or not. Declaration public static bool IsNoteInScale(this Scale scale, Note note) Parameters Type Name Description Scale scale Scale to check the note. Note note Note to check if it belongs to the scale or not. Returns Type Description Boolean true if note belongs to the scale ; otherwise, false . Exceptions Type Condition ArgumentNullException One of the following errors occured: scale is null . note is null ."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi.html",
    "title": "Class GeneralMidi | DryWetMIDI",
    "keywords": "Class GeneralMidi The class which provides information about the General MIDI Level 1 standard. Inheritance Object GeneralMidi Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidi Fields PercussionChannel Channel reserved for percussion according to the General MIDI Level 1 standard. Declaration public static readonly FourBitNumber PercussionChannel Field Value Type Description FourBitNumber"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2AnalogPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2AnalogPercussion.html",
    "title": "Enum GeneralMidi2AnalogPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2AnalogPercussion General MIDI Level 2 'Analog' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2AnalogPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. AnalogBassDrum 'Analog Bass Drum' General MIDI 2 percussion note. AnalogClaves 'Analog Claves' General MIDI 2 percussion note. AnalogClosedHiHat1 'Analog Closed Hi-Hat 1' General MIDI 2 percussion note. AnalogClosedHiHat2 'Analog Closed Hi-Hat 2' General MIDI 2 percussion note. AnalogCowbell 'Analog Cowbell' General MIDI 2 percussion note. AnalogCymbal 'Analog Cymbal' General MIDI 2 percussion note. AnalogHighConga 'Analog High Conga' General MIDI 2 percussion note. AnalogHiTom1 'Analog Hi Tom 1' General MIDI 2 percussion note. AnalogHiTom2 'Analog Hi Tom 2' General MIDI 2 percussion note. AnalogLowConga 'Analog Low Conga' General MIDI 2 percussion note. AnalogLowTom1 'Analog Low Tom 1' General MIDI 2 percussion note. AnalogLowTom2 'Analog Low Tom 2' General MIDI 2 percussion note. AnalogMaracas 'Analog Maracas' General MIDI 2 percussion note. AnalogMidConga 'Analog Mid Conga' General MIDI 2 percussion note. AnalogMidTom1 'Analog Mid Tom 1' General MIDI 2 percussion note. AnalogMidTom2 'Analog Mid Tom 2' General MIDI 2 percussion note. AnalogOpenHiHat 'Analog Open Hi-Hat' General MIDI 2 percussion note. AnalogRimShot 'Analog Rim Shot' General MIDI 2 percussion note. AnalogSnare1 'Analog Snare 1' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2BrushPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2BrushPercussion.html",
    "title": "Enum GeneralMidi2BrushPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2BrushPercussion General MIDI Level 2 'Brush' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2BrushPercussion : byte Fields Name Description Belltree 'Belltree' General MIDI 2 percussion note. BrushSlap 'Brush Slap' General MIDI 2 percussion note. BrushSwirl 'Brush Swirl' General MIDI 2 percussion note. BrushTap 'Brush Tap' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighFloorTom 'High Floor Tom' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HighTom 'High Tom' General MIDI 2 percussion note. HiMidTom 'Hi Mid Tom' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JazzKick1 'Jazz Kick 1' General MIDI 2 percussion note. JazzKick2 'Jazz Kick 2' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowFloorTom 'Low Floor Tom' General MIDI 2 percussion note. LowMidTom 'Low Mid Tom' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowTom 'Low Tom' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2ElectronicPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2ElectronicPercussion.html",
    "title": "Enum GeneralMidi2ElectronicPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2ElectronicPercussion General MIDI Level 2 'Electronic' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2ElectronicPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricBassDrum 'Electric Bass Drum' General MIDI 2 percussion note. ElectricHiTom1 'Electric Hi Tom 1' General MIDI 2 percussion note. ElectricHiTom2 'Electric Hi Tom 2' General MIDI 2 percussion note. ElectricLowTom1 'Electric Low Tom 1' General MIDI 2 percussion note. ElectricLowTom2 'Electric Low Tom 2' General MIDI 2 percussion note. ElectricMidTom1 'Electric Mid Tom 1' General MIDI 2 percussion note. ElectricMidTom2 'Electric Mid Tom 2' General MIDI 2 percussion note. ElectricSnare1 'Electric Snare 1' General MIDI 2 percussion note. ElectricSnare2 'Electric Snare 2' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. ReverseCymbal 'Reverse Cymbal' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2JazzPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2JazzPercussion.html",
    "title": "Enum GeneralMidi2JazzPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2JazzPercussion General MIDI Level 2 'Jazz' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2JazzPercussion : byte Fields Name Description AcousticSnare 'Acoustic Snare' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighFloorTom 'High Floor Tom' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HighTom 'High Tom' General MIDI 2 percussion note. HiMidTom 'Hi Mid Tom' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JazzKick1 'Jazz Kick 1' General MIDI 2 percussion note. JazzKick2 'Jazz Kick 2' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowFloorTom 'Low Floor Tom' General MIDI 2 percussion note. LowMidTom 'Low Mid Tom' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowTom 'Low Tom' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2OrchestraPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2OrchestraPercussion.html",
    "title": "Enum GeneralMidi2OrchestraPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2OrchestraPercussion General MIDI Level 2 'Orchestra' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2OrchestraPercussion : byte Fields Name Description Applause 'Applause' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. Castanets2 'Castanets 2' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat2 'Closed Hi-Hat 2' General MIDI 2 percussion note. ConcertBassDrum1 'Concert Bass Drum 1' General MIDI 2 percussion note. ConcertBassDrum2 'Concert Bass Drum 2' General MIDI 2 percussion note. ConcertCymbal1 'Concert Cymbal 1' General MIDI 2 percussion note. ConcertCymbal2 'Concert Cymbal 2' General MIDI 2 percussion note. ConcertSnareDrum 'Concert Snare Drum' General MIDI 2 percussion note. ConcertSnareDrum2 'Concert Snare Drum 2' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat2 'Open Hi-Hat 2' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. TimpaniA 'Timpani A' General MIDI 2 percussion note. TimpaniASharp 'Timpani A#' General MIDI 2 percussion note. TimpaniB 'Timpani B' General MIDI 2 percussion note. TimpaniC 'Timpani C' General MIDI 2 percussion note. TimpaniCSharp 'Timpani C#' General MIDI 2 percussion note. TimpaniD 'Timpani D' General MIDI 2 percussion note. TimpaniDSharp 'Timpani D#' General MIDI 2 percussion note. TimpaniE 'Timpani E' General MIDI 2 percussion note. TimpaniF 'Timpani F' General MIDI 2 percussion note. TimpaniF2 'Timpani F 2' General MIDI 2 percussion note. TimpaniFSharp 'Timpani F#' General MIDI 2 percussion note. TimpaniG 'Timpani G' General MIDI 2 percussion note. TimpaniGSharp 'Timpani G#' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2PercussionSet.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2PercussionSet.html",
    "title": "Enum GeneralMidi2PercussionSet | DryWetMIDI",
    "keywords": "Enum GeneralMidi2PercussionSet General MIDI Level 2 percussion set. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2PercussionSet : byte Fields Name Description Analog 'Analog' percussion set. Brush 'Brush' percussion set. Electronic 'Electronic' percussion set. Jazz 'Jazz' percussion set. Orchestra 'Orchestra' percussion set. Power 'Power' percussion set. Room 'Room' percussion set. Sfx 'SFX' percussion set. Standard 'Standard' percussion set. Extension Methods GeneralMidi2Utilities.GetPercussionSetEvents(FourBitNumber) GeneralMidi2Utilities.GetProgramEvent(FourBitNumber) GeneralMidi2Utilities.AsSevenBitNumber()"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2PowerPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2PowerPercussion.html",
    "title": "Enum GeneralMidi2PowerPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2PowerPercussion General MIDI Level 2 'Power' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2PowerPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. PowerHiTom1 'Power Hi Tom 1' General MIDI 2 percussion note. PowerHiTom2 'Power Hi Tom 2' General MIDI 2 percussion note. PowerKickDrum 'Power Kick Drum' General MIDI 2 percussion note. PowerLowTom1 'Power Low Tom 1' General MIDI 2 percussion note. PowerLowTom2 'Power Low Tom 2' General MIDI 2 percussion note. PowerMidTom1 'Power Mid Tom 1' General MIDI 2 percussion note. PowerMidTom2 'Power Mid Tom 2' General MIDI 2 percussion note. PowerSnareDrum 'Power Snare Drum' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Program.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Program.html",
    "title": "Enum GeneralMidi2Program | DryWetMIDI",
    "keywords": "Enum GeneralMidi2Program General MIDI Level 2 program (patch). Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2Program Fields Name Description Accordion 'Accordion' General MIDI 2 program. Accordion2 'Accordion2' General MIDI 2 program. AcousticBass 'Acoustic Bass' General MIDI 2 program. AcousticBassStringSlap 'Acoustic Bass String Slap' General MIDI 2 program. AcousticGrandPiano 'Acoustic Grand Piano' General MIDI 2 program. AcousticGrandPianoDark 'Acoustic Grand Piano (dark)' General MIDI 2 program. AcousticGrandPianoWide 'Acoustic Grand Piano (wide)' General MIDI 2 program. AcousticGuitarNylon 'Acoustic Guitar (nylon)' General MIDI 2 program. AcousticGuitarNylon2 'Acoustic Guitar (nylon2)' General MIDI 2 program. AcousticGuitarNylonKeyOff 'Acoustic Guitar (nylon key off)' General MIDI 2 program. AcousticGuitarSteel 'Acoustic Guitar (steel)' General MIDI 2 program. Agogo 'Agogo' General MIDI 2 program. AltoSax 'Alto Sax' General MIDI 2 program. AnalogSynthBrass1 'Analog Synth Brass1' General MIDI 2 program. AnalogSynthBrass2 'Analog Synth Brass2' General MIDI 2 program. AnalogVoice 'Analog Voice' General MIDI 2 program. Applause 'Applause' General MIDI 2 program. AttackPulse 'Attack Pulse' General MIDI 2 program. BagPipe 'Bag Pipe' General MIDI 2 program. Banjo 'Banjo' General MIDI 2 program. BaritoneSax 'Baritone Sax' General MIDI 2 program. BassHitPlus 'Bass Hit Plus' General MIDI 2 program. Bassoon 'Bassoon' General MIDI 2 program. BirdTweet 'Bird Tweet' General MIDI 2 program. BirdTweet2 'Bird Tweet2' General MIDI 2 program. BlownBottle 'Blown Bottle' General MIDI 2 program. BrassSection 'Brass Section' General MIDI 2 program. BrassSection2OctaveMix 'Brass Section2 (octave mix)' General MIDI 2 program. BreathNoise 'Breath Noise' General MIDI 2 program. BrightAcousticPiano 'Bright Acoustic Piano' General MIDI 2 program. BrightAcousticPianoWide 'Bright Acoustic Piano (wide)' General MIDI 2 program. BrightTrombone 'Bright Trombone' General MIDI 2 program. Bubble 'Bubble' General MIDI 2 program. BurstNoise 'Burst Noise' General MIDI 2 program. CarCrash 'Car Crash' General MIDI 2 program. CarEngine 'Car Engine' General MIDI 2 program. Carillon 'Carillon' General MIDI 2 program. CarPass 'Car Pass' General MIDI 2 program. CarStop 'Car Stop' General MIDI 2 program. Castanets 'Castanets' General MIDI 2 program. Celesta 'Celesta' General MIDI 2 program. Cello 'Cello' General MIDI 2 program. ChoirAahs 'Choir Aahs' General MIDI 2 program. ChoirAahs2 'Choir Aahs2' General MIDI 2 program. ChurchBell 'Church Bell' General MIDI 2 program. ChurchOrgan 'Church Organ' General MIDI 2 program. ChurchOrganOctaveMix 'Church Organ (octave mix)' General MIDI 2 program. Clarinet 'Clarinet' General MIDI 2 program. Clavi 'Clavi' General MIDI 2 program. ClaviBass 'Clavi Bass' General MIDI 2 program. ConcertBassDrum 'Concert Bass Drum' General MIDI 2 program. Contrabass 'Contrabass' General MIDI 2 program. DarkTrumpetSoft 'Dark Trumpet Soft' General MIDI 2 program. DetunedChurchOrgan 'Detuned Church Organ' General MIDI 2 program. DetunedDrawbarOrgan 'Detuned Drawbar Organ' General MIDI 2 program. DetunedElectricPiano1 'Detuned Electric Piano1' General MIDI 2 program. DetunedElectricPiano2 'Detuned Electric Piano2' General MIDI 2 program. DetunedPercussiveOrgan 'Detuned Percussive Organ' General MIDI 2 program. DistortedRhythmGuitar 'Distorted Rhythm Guitar' General MIDI 2 program. DistortionGuitar 'Distortion Guitar' General MIDI 2 program. DistortionGuitarWithFeedback 'Distortion Guitar (with feedback)' General MIDI 2 program. Dog 'Dog' General MIDI 2 program. Door 'Door' General MIDI 2 program. DoorCreaking 'Door Creaking' General MIDI 2 program. DrawbarOrgan 'Drawbar Organ' General MIDI 2 program. DrawbarOrgan2 'Drawbar Organ2' General MIDI 2 program. Dulcimer 'Dulcimer' General MIDI 2 program. ElectricBassFinger 'Electric Bass (finger)' General MIDI 2 program. ElectricBassPick 'Electric Bass (pick)' General MIDI 2 program. ElectricDrum 'Electric Drum' General MIDI 2 program. ElectricGrandPiano 'Electric Grand Piano' General MIDI 2 program. ElectricGrandPianoWide 'Electric Grand Piano (wide)' General MIDI 2 program. ElectricGuitarClean 'Electric Guitar (clean)' General MIDI 2 program. ElectricGuitarDetunedClean 'Electric Guitar (detuned clean)' General MIDI 2 program. ElectricGuitarFunkyCutting 'Electric Guitar (funky cutting)' General MIDI 2 program. ElectricGuitarJazz 'Electric Guitar (jazz)' General MIDI 2 program. ElectricGuitarMuted 'Electric Guitar (muted)' General MIDI 2 program. ElectricGuitarMutedVeloSw 'Electric Guitar (muted velo sw)' General MIDI 2 program. ElectricGuitarPedalSteel 'Electric Guitar (pedal steel)' General MIDI 2 program. ElectricPiano1 'Electric Piano1' General MIDI 2 program. ElectricPiano1VelocityMix 'Electric Piano1 (velocity mix)' General MIDI 2 program. ElectricPiano2 'Electric Piano2' General MIDI 2 program. ElectricPiano2VelocityMix 'Electric Piano2 (velocity mix)' General MIDI 2 program. EnglishHorn 'English Horn' General MIDI 2 program. EpLegend 'Ep Legend' General MIDI 2 program. EpPhase 'Ep Phase' General MIDI 2 program. EuroHit 'Euro Hit' General MIDI 2 program. Explosion 'Explosion' General MIDI 2 program. Fiddle 'Fiddle' General MIDI 2 program. FingerSlapBass 'Finger Slap Bass' General MIDI 2 program. Flute 'Flute' General MIDI 2 program. FluteKeyClick 'Flute Key Click' General MIDI 2 program. Footsteps 'Footsteps' General MIDI 2 program. FrenchHorn 'French Horn' General MIDI 2 program. FrenchHorn2Warm 'French Horn2 (warm)' General MIDI 2 program. FretlessBass 'Fretless Bass' General MIDI 2 program. Fx1Rain 'Fx1 (rain)' General MIDI 2 program. Fx2Soundtrack 'Fx2 (soundtrack)' General MIDI 2 program. Fx3ASynthMallet 'Fx3 A (synth mallet)' General MIDI 2 program. Fx3Crystal 'Fx3 (crystal)' General MIDI 2 program. Fx4Atmosphere 'Fx4 (atmosphere)' General MIDI 2 program. Fx5Brightness 'Fx5 (brightness)' General MIDI 2 program. Fx6Goblins 'Fx6 (goblins)' General MIDI 2 program. Fx7AEchoBell 'Fx7 A (echo bell)' General MIDI 2 program. Fx7BEchoPan 'Fx7 B (echo pan)' General MIDI 2 program. Fx7Echoes 'Fx7 (echoes)' General MIDI 2 program. Fx8SciFi 'Fx8 (sci fi)' General MIDI 2 program. Glockenspiel 'Glockenspiel' General MIDI 2 program. GuitarCuttingNoise 'Guitar Cutting Noise' General MIDI 2 program. GuitarFeedback 'Guitar Feedback' General MIDI 2 program. GuitarFretNoise 'Guitar Fret Noise' General MIDI 2 program. GuitarHarmonics 'Guitar Harmonics' General MIDI 2 program. GuitarPinch 'Guitar Pinch' General MIDI 2 program. Gunshot 'Gunshot' General MIDI 2 program. Hammer 'Hammer' General MIDI 2 program. Harmonica 'Harmonica' General MIDI 2 program. Harpsichord 'Harpsichord' General MIDI 2 program. HarpsichordOctaveMix 'Harpsichord (octave mix)' General MIDI 2 program. HarpsichordWide 'Harpsichord (wide)' General MIDI 2 program. HarpsichordWithKeyOff 'Harpsichord (with key off)' General MIDI 2 program. HeartBeat 'Heart Beat' General MIDI 2 program. Helicopter 'Helicopter' General MIDI 2 program. HonkyTonkPiano 'Honky Tonk Piano' General MIDI 2 program. HonkyTonkPianoWide 'Honky Tonk Piano (wide)' General MIDI 2 program. HorseGallop 'Horse Gallop' General MIDI 2 program. Humming 'Humming' General MIDI 2 program. ItalianSixtiesOrgan 'Italian Sixties Organ' General MIDI 2 program. JazzMan 'Jazz Man' General MIDI 2 program. Jetplane 'Jetplane' General MIDI 2 program. JumpBrass 'Jump Brass' General MIDI 2 program. Kalimba 'Kalimba' General MIDI 2 program. Koto 'Koto' General MIDI 2 program. Lasergun 'Lasergun' General MIDI 2 program. Laughing 'Laughing' General MIDI 2 program. Lead1ASquare2 'Lead1 A (square2)' General MIDI 2 program. Lead1BSine 'Lead1 B (sine)' General MIDI 2 program. Lead1Square 'Lead1 (square)' General MIDI 2 program. Lead2ASawtooth2 'Lead2 A (sawtooth2)' General MIDI 2 program. Lead2BSawPulse 'Lead2 B (saw pulse)' General MIDI 2 program. Lead2CDoubleSawtooth 'Lead2 C (double sawtooth)' General MIDI 2 program. Lead2DSequencedAnalog 'Lead2 D (sequenced analog)' General MIDI 2 program. Lead2Sawtooth 'Lead2 (sawtooth)' General MIDI 2 program. Lead3Calliope 'Lead3 (calliope)' General MIDI 2 program. Lead4Chiff 'Lead4 (chiff)' General MIDI 2 program. Lead5AWireLead 'Lead5 A (wire lead)' General MIDI 2 program. Lead5Charang 'Lead5 (charang)' General MIDI 2 program. Lead6Voice 'Lead6 (voice)' General MIDI 2 program. Lead7Fifths 'Lead7 (fifths)' General MIDI 2 program. Lead8ASoftWrl 'Lead8 A (soft wrl)' General MIDI 2 program. Lead8BassLead 'Lead8 (bass lead)' General MIDI 2 program. MachineGun 'Machine Gun' General MIDI 2 program. Mandolin 'Mandolin' General MIDI 2 program. Marimba 'Marimba' General MIDI 2 program. MarimbaWide 'Marimba (wide)' General MIDI 2 program. MelodicTom 'Melodic Tom' General MIDI 2 program. MelodicTom2Power 'Melodic Tom2 (power)' General MIDI 2 program. MidToneGuitar 'Mid Tone Guitar' General MIDI 2 program. MusicBox 'Music Box' General MIDI 2 program. MutedTrumpet 'Muted Trumpet' General MIDI 2 program. MutedTrumpet2 'Muted Trumpet2' General MIDI 2 program. Oboe 'Oboe' General MIDI 2 program. Ocarina 'Ocarina' General MIDI 2 program. OrchestraHit 'Orchestra Hit' General MIDI 2 program. OrchestralHarp 'Orchestral Harp' General MIDI 2 program. OverdrivenGuitar 'Overdriven Guitar' General MIDI 2 program. Pad1NewAge 'Pad1 (new age)' General MIDI 2 program. Pad2ASinePad 'Pad2 A (sine pad)' General MIDI 2 program. Pad2Warm 'Pad2 (warm)' General MIDI 2 program. Pad3Polysynth 'Pad3 (polysynth)' General MIDI 2 program. Pad4AItopia 'Pad4 A (itopia)' General MIDI 2 program. Pad4Choir 'Pad4 (choir)' General MIDI 2 program. Pad5Bowed 'Pad5 (bowed)' General MIDI 2 program. Pad6Metallic 'Pad6 (metallic)' General MIDI 2 program. Pad7Halo 'Pad7 (halo)' General MIDI 2 program. Pad8Sweep 'Pad8 (sweep)' General MIDI 2 program. PanFlute 'Pan Flute' General MIDI 2 program. PercussiveOrgan 'Percussive Organ' General MIDI 2 program. PercussiveOrgan2 'Percussive Organ2' General MIDI 2 program. Piccolo 'Piccolo' General MIDI 2 program. PizzicatoStrings 'Pizzicato Strings' General MIDI 2 program. PuffOrgan 'Puff Organ' General MIDI 2 program. PulseClavi 'Pulse Clavi' General MIDI 2 program. Punch 'Punch' General MIDI 2 program. Rain 'Rain' General MIDI 2 program. Recorder 'Recorder' General MIDI 2 program. ReedOrgan 'Reed Organ' General MIDI 2 program. ReverseCymbal 'Reverse Cymbal' General MIDI 2 program. RhythmBoxTom 'Rhythm Box Tom' General MIDI 2 program. RockOrgan 'Rock Organ' General MIDI 2 program. Scratch 'Scratch' General MIDI 2 program. Screaming 'Screaming' General MIDI 2 program. Seashore 'Seashore' General MIDI 2 program. Shakuhachi 'Shakuhachi' General MIDI 2 program. Shamisen 'Shamisen' General MIDI 2 program. Shanai 'Shanai' General MIDI 2 program. Siren 'Siren' General MIDI 2 program. Sitar 'Sitar' General MIDI 2 program. Sitar2Bend 'Sitar2 (bend)' General MIDI 2 program. SixthHit 'Sixth Hit' General MIDI 2 program. SixtiesElectricPiano 'Sixties Electric Piano' General MIDI 2 program. SixtiesStrings 'Sixties Strings' General MIDI 2 program. SlapBass1 'Slap Bass1' General MIDI 2 program. SlapBass2 'Slap Bass2' General MIDI 2 program. SopranoSax 'Soprano Sax' General MIDI 2 program. Starship 'Starship' General MIDI 2 program. SteelDrums 'Steel Drums' General MIDI 2 program. SteelGuitarWithBodySound 'Steel Guitar With Body Sound' General MIDI 2 program. Stream 'Stream' General MIDI 2 program. StringEnsembles1 'String Ensembles1' General MIDI 2 program. StringEnsembles2 'String Ensembles2' General MIDI 2 program. StringsAndBrass 'Strings And Brass' General MIDI 2 program. SynthBass1 'Synth Bass1' General MIDI 2 program. SynthBass2 'Synth Bass2' General MIDI 2 program. SynthBass3Resonance 'Synth Bass3 (resonance)' General MIDI 2 program. SynthBass4Attack 'Synth Bass4 (attack)' General MIDI 2 program. SynthBassRubber 'Synth Bass (rubber)' General MIDI 2 program. SynthBassWarm 'Synth Bass (warm)' General MIDI 2 program. SynthBrass1 'Synth Brass1' General MIDI 2 program. SynthBrass2 'Synth Brass2' General MIDI 2 program. SynthBrass3 'Synth Brass3' General MIDI 2 program. SynthBrass4 'Synth Brass4' General MIDI 2 program. SynthDrum 'Synth Drum' General MIDI 2 program. SynthStrings1 'Synth Strings1' General MIDI 2 program. SynthStrings2 'Synth Strings2' General MIDI 2 program. SynthStrings3 'Synth Strings3' General MIDI 2 program. SynthVoice 'Synth Voice' General MIDI 2 program. TaikoDrum 'Taiko Drum' General MIDI 2 program. TaishoKoto 'Taisho Koto' General MIDI 2 program. TangoAccordion 'Tango Accordion' General MIDI 2 program. TelephoneRing 'Telephone Ring' General MIDI 2 program. TelephoneRing2 'Telephone Ring2' General MIDI 2 program. TenorSax 'Tenor Sax' General MIDI 2 program. Thunder 'Thunder' General MIDI 2 program. Timpani 'Timpani' General MIDI 2 program. TinkleBell 'Tinkle Bell' General MIDI 2 program. Train 'Train' General MIDI 2 program. TremoloStrings 'Tremolo Strings' General MIDI 2 program. Trombone 'Trombone' General MIDI 2 program. Trombone2 'Trombone2' General MIDI 2 program. Trumpet 'Trumpet' General MIDI 2 program. Tuba 'Tuba' General MIDI 2 program. TubularBells 'Tubular Bells' General MIDI 2 program. TwelveStringsGuitar 'Twelve Strings Guitar' General MIDI 2 program. Ukulele 'Ukulele' General MIDI 2 program. Vibraphone 'Vibraphone' General MIDI 2 program. VibraphoneWide 'Vibraphone (wide)' General MIDI 2 program. Viola 'Viola' General MIDI 2 program. Violin 'Violin' General MIDI 2 program. ViolinSlowAttack 'Violin (slow attack)' General MIDI 2 program. VoiceOohs 'Voice Oohs' General MIDI 2 program. Whistle 'Whistle' General MIDI 2 program. Wind 'Wind' General MIDI 2 program. WindChime 'Wind Chime' General MIDI 2 program. Woodblock 'Woodblock' General MIDI 2 program. Xylophone 'Xylophone' General MIDI 2 program. YangChin 'Yang Chin' General MIDI 2 program. Extension Methods GeneralMidi2Utilities.GetProgramEvents(FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2RoomPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2RoomPercussion.html",
    "title": "Enum GeneralMidi2RoomPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2RoomPercussion General MIDI Level 2 'Room' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2RoomPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. AcousticSnare 'Acoustic Snare' General MIDI 2 percussion note. BassDrum1 'Bass Drum 1' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. RoomHiTom1 'Room Hi Tom 1' General MIDI 2 percussion note. RoomHiTom2 'Room Hi Tom 2' General MIDI 2 percussion note. RoomLowTom1 'Room Low Tom 1' General MIDI 2 percussion note. RoomLowTom2 'Room Low Tom 2' General MIDI 2 percussion note. RoomMidTom1 'Room Mid Tom 1' General MIDI 2 percussion note. RoomMidTom2 'Room Mid Tom 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2SfxPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2SfxPercussion.html",
    "title": "Enum GeneralMidi2SfxPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2SfxPercussion General MIDI Level 2 'SFX' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2SfxPercussion : byte Fields Name Description Applause 'Applause' General MIDI 2 percussion note. Birds 'Birds' General MIDI 2 percussion note. Bubble 'Bubble' General MIDI 2 percussion note. CarCrash 'Car-Crash' General MIDI 2 percussion note. CarEngine 'Car-Engine' General MIDI 2 percussion note. CarPass 'Car-Pass' General MIDI 2 percussion note. CarStop 'Car-Stop' General MIDI 2 percussion note. Dog 'Dog' General MIDI 2 percussion note. Door 'Door' General MIDI 2 percussion note. DoorCreaking 'Door Creaking' General MIDI 2 percussion note. Explosion 'Explosion' General MIDI 2 percussion note. FlKeyClick 'Fl Key Click' General MIDI 2 percussion note. Footsteps1 'Footsteps 1' General MIDI 2 percussion note. Footsteps2 'Footsteps 2' General MIDI 2 percussion note. GuitarCuttingNoiseDown 'Guitar Cutting Noise Down' General MIDI 2 percussion note. GuitarCuttingNoiseUp 'Guitar Cutting Noise Up' General MIDI 2 percussion note. GuitarFretNoise 'Guitar Fret Noise' General MIDI 2 percussion note. GunShot 'Gun Shot' General MIDI 2 percussion note. HeartBeat 'Heart Beat' General MIDI 2 percussion note. Helicopter 'Helicopter' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HorseGallop 'Horse Gallop' General MIDI 2 percussion note. Jetplane 'Jetplane' General MIDI 2 percussion note. Lasergun 'Lasergun' General MIDI 2 percussion note. Laughing 'Laughing' General MIDI 2 percussion note. MachineGun 'Machine Gun' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. Punch 'Punch' General MIDI 2 percussion note. Rain 'Rain' General MIDI 2 percussion note. Scratch 'Scratch' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Scream 'Scream' General MIDI 2 percussion note. Seashore 'Seashore' General MIDI 2 percussion note. Siren 'Siren' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Starship 'Starship' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Stream 'Stream' General MIDI 2 percussion note. StringSlapOfDoubleBass 'String Slap Of Double Bass' General MIDI 2 percussion note. Thunder 'Thunder' General MIDI 2 percussion note. Train 'Train' General MIDI 2 percussion note. Wind 'Wind' General MIDI 2 percussion note. WindChimes 'Wind Chimes' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2StandardPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2StandardPercussion.html",
    "title": "Enum GeneralMidi2StandardPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidi2StandardPercussion General MIDI Level 2 'Standard' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidi2StandardPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI 2 percussion note. AcousticSnare 'Acoustic Snare' General MIDI 2 percussion note. BassDrum1 'Bass Drum 1' General MIDI 2 percussion note. Belltree 'Belltree' General MIDI 2 percussion note. Cabasa 'Cabasa' General MIDI 2 percussion note. Castanets 'Castanets' General MIDI 2 percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI 2 percussion note. Claves 'Claves' General MIDI 2 percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI 2 percussion note. Cowbell 'Cowbell' General MIDI 2 percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI 2 percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI 2 percussion note. ElectricSnare 'Electric Snare' General MIDI 2 percussion note. HandClap 'Hand Clap' General MIDI 2 percussion note. HiBongo 'Hi Bongo' General MIDI 2 percussion note. HighAgogo 'High Agogo' General MIDI 2 percussion note. HighFloorTom 'High Floor Tom' General MIDI 2 percussion note. HighQ 'High Q' General MIDI 2 percussion note. HighTimbale 'High Timbale' General MIDI 2 percussion note. HighTom 'High Tom' General MIDI 2 percussion note. HiMidTom 'Hi Mid Tom' General MIDI 2 percussion note. HiWoodBlock 'Hi Wood Block' General MIDI 2 percussion note. JingleBell 'Jingle Bell' General MIDI 2 percussion note. LongGuiro 'Long Guiro' General MIDI 2 percussion note. LongWhistle 'Long Whistle' General MIDI 2 percussion note. LowAgogo 'Low Agogo' General MIDI 2 percussion note. LowBongo 'Low Bongo' General MIDI 2 percussion note. LowConga 'Low Conga' General MIDI 2 percussion note. LowFloorTom 'Low Floor Tom' General MIDI 2 percussion note. LowMidTom 'Low Mid Tom' General MIDI 2 percussion note. LowTimbale 'Low Timbale' General MIDI 2 percussion note. LowTom 'Low Tom' General MIDI 2 percussion note. LowWoodBlock 'Low Wood Block' General MIDI 2 percussion note. Maracas 'Maracas' General MIDI 2 percussion note. MetronomeBell 'Metronome Bell' General MIDI 2 percussion note. MetronomeClick 'Metronome Click' General MIDI 2 percussion note. MuteCuica 'Mute Cuica' General MIDI 2 percussion note. MuteHiConga 'Mute Hi Conga' General MIDI 2 percussion note. MuteSurdo 'Mute Surdo' General MIDI 2 percussion note. MuteTriangle 'Mute Triangle' General MIDI 2 percussion note. OpenCuica 'Open Cuica' General MIDI 2 percussion note. OpenHiConga 'Open Hi Conga' General MIDI 2 percussion note. OpenHiHat 'Open Hi-Hat' General MIDI 2 percussion note. OpenSurdo 'Open Surdo' General MIDI 2 percussion note. OpenTriangle 'Open Triangle' General MIDI 2 percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI 2 percussion note. RideBell 'Ride Bell' General MIDI 2 percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI 2 percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI 2 percussion note. ScratchPull 'Scratch Pull' General MIDI 2 percussion note. ScratchPush 'Scratch Push' General MIDI 2 percussion note. Shaker 'Shaker' General MIDI 2 percussion note. ShortGuiro 'Short Guiro' General MIDI 2 percussion note. ShortWhistle 'Short Whistle' General MIDI 2 percussion note. SideStick 'Side Stick' General MIDI 2 percussion note. Slap 'Slap' General MIDI 2 percussion note. SplashCymbal 'Splash Cymbal' General MIDI 2 percussion note. SquareClick 'Square Click' General MIDI 2 percussion note. Sticks 'Sticks' General MIDI 2 percussion note. Tambourine 'Tambourine' General MIDI 2 percussion note. Vibraslap 'Vibraslap' General MIDI 2 percussion note. Extension Methods GeneralMidi2Utilities.AsSevenBitNumber() GeneralMidi2Utilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidi2Utilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidi2Utilities.html",
    "title": "Class GeneralMidi2Utilities | DryWetMIDI",
    "keywords": "Class GeneralMidi2Utilities Provides utilities for General MIDI Level 2. Inheritance Object GeneralMidi2Utilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidi2Utilities Methods AsSevenBitNumber(GeneralMidi2AnalogPercussion) Converts GeneralMidi2AnalogPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2AnalogPercussion percussion) Parameters Type Name Description GeneralMidi2AnalogPercussion percussion GeneralMidi2AnalogPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2BrushPercussion) Converts GeneralMidi2BrushPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2BrushPercussion percussion) Parameters Type Name Description GeneralMidi2BrushPercussion percussion GeneralMidi2BrushPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2ElectronicPercussion) Converts GeneralMidi2ElectronicPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2ElectronicPercussion percussion) Parameters Type Name Description GeneralMidi2ElectronicPercussion percussion GeneralMidi2ElectronicPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2JazzPercussion) Converts GeneralMidi2JazzPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2JazzPercussion percussion) Parameters Type Name Description GeneralMidi2JazzPercussion percussion GeneralMidi2JazzPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2OrchestraPercussion) Converts GeneralMidi2OrchestraPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2OrchestraPercussion percussion) Parameters Type Name Description GeneralMidi2OrchestraPercussion percussion GeneralMidi2OrchestraPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2PercussionSet) Converts GeneralMidi2PercussionSet to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2PercussionSet percussionSet) Parameters Type Name Description GeneralMidi2PercussionSet percussionSet GeneralMidi2PercussionSet to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value. AsSevenBitNumber(GeneralMidi2PowerPercussion) Converts GeneralMidi2PowerPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2PowerPercussion percussion) Parameters Type Name Description GeneralMidi2PowerPercussion percussion GeneralMidi2PowerPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2RoomPercussion) Converts GeneralMidi2RoomPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2RoomPercussion percussion) Parameters Type Name Description GeneralMidi2RoomPercussion percussion GeneralMidi2RoomPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2SfxPercussion) Converts GeneralMidi2SfxPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2SfxPercussion percussion) Parameters Type Name Description GeneralMidi2SfxPercussion percussion GeneralMidi2SfxPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidi2StandardPercussion) Converts GeneralMidi2StandardPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidi2StandardPercussion percussion) Parameters Type Name Description GeneralMidi2StandardPercussion percussion GeneralMidi2StandardPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2AnalogPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Analog' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2AnalogPercussion percussion GeneralMidi2AnalogPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2BrushPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Brush' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2BrushPercussion percussion GeneralMidi2BrushPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2ElectronicPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Electronic' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2ElectronicPercussion percussion GeneralMidi2ElectronicPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2JazzPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Jazz' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2JazzPercussion percussion GeneralMidi2JazzPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2OrchestraPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Orchestra' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2OrchestraPercussion percussion GeneralMidi2OrchestraPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2PowerPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Power' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2PowerPercussion percussion GeneralMidi2PowerPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2RoomPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Room' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2RoomPercussion percussion GeneralMidi2RoomPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2SfxPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'SFX' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2SfxPercussion percussion GeneralMidi2SfxPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralMidi2StandardPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 2 'Standard' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2StandardPercussion percussion GeneralMidi2StandardPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2AnalogPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Analog' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2AnalogPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2AnalogPercussion percussion GeneralMidi2AnalogPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2BrushPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Brush' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2BrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2BrushPercussion percussion GeneralMidi2BrushPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2ElectronicPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Electronic' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2ElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2ElectronicPercussion percussion GeneralMidi2ElectronicPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2JazzPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Jazz' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2JazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2JazzPercussion percussion GeneralMidi2JazzPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2OrchestraPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Orchestra' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2OrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2OrchestraPercussion percussion GeneralMidi2OrchestraPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2PowerPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Power' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2PowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2PowerPercussion percussion GeneralMidi2PowerPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2RoomPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Room' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2RoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2RoomPercussion percussion GeneralMidi2RoomPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2SfxPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'SFX' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2SfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2SfxPercussion percussion GeneralMidi2SfxPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidi2StandardPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 2 'Standard' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidi2StandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidi2StandardPercussion percussion GeneralMidi2StandardPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetPercussionSetEvents(GeneralMidi2PercussionSet, FourBitNumber) Gets MIDI events sequence to switch to the specified General MIDI Level 2 percussion set. Declaration public static IEnumerable<MidiEvent> GetPercussionSetEvents(this GeneralMidi2PercussionSet percussionSet, FourBitNumber channel) Parameters Type Name Description GeneralMidi2PercussionSet percussionSet GeneralMidi2PercussionSet to get events for. FourBitNumber channel Channel events should be created for. Returns Type Description IEnumerable < MidiEvent > MIDI events sequence to switch to the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value. GetProgramEvent(GeneralMidi2PercussionSet, FourBitNumber) Gets Program Change event corresponding to the specified General MIDI Level 2 percussion set. Declaration public static MidiEvent GetProgramEvent(this GeneralMidi2PercussionSet percussionSet, FourBitNumber channel) Parameters Type Name Description GeneralMidi2PercussionSet percussionSet GeneralMidi2PercussionSet to get event for. FourBitNumber channel Channel event should be created for. Returns Type Description MidiEvent Program Change event corresponding to the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value. GetProgramEvents(GeneralMidi2Program, FourBitNumber) Gets MIDI events sequence to switch to the specified General MIDI Level 2 program. Declaration public static IEnumerable<MidiEvent> GetProgramEvents(this GeneralMidi2Program program, FourBitNumber channel) Parameters Type Name Description GeneralMidi2Program program GeneralMidi2Program to get events for. FourBitNumber channel Channel events should be created for. Returns Type Description IEnumerable < MidiEvent > MIDI events sequence to switch to the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiPercussion.html",
    "title": "Enum GeneralMidiPercussion | DryWetMIDI",
    "keywords": "Enum GeneralMidiPercussion General MIDI Level 1 percussion notes. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidiPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General MIDI percussion note. AcousticSnare 'Acoustic Snare' General MIDI percussion note. BassDrum1 'Bass Drum 1' General MIDI percussion note. Cabasa 'Cabasa' General MIDI percussion note. ChineseCymbal 'Chinese Cymbal' General MIDI percussion note. Claves 'Claves' General MIDI percussion note. ClosedHiHat 'Closed Hi-Hat' General MIDI percussion note. Cowbell 'Cowbell' General MIDI percussion note. CrashCymbal1 'Crash Cymbal 1' General MIDI percussion note. CrashCymbal2 'Crash Cymbal 2' General MIDI percussion note. ElectricSnare 'Electric Snare' General MIDI percussion note. HandClap 'Hand Clap' General MIDI percussion note. HiBongo 'Hi Bongo' General MIDI percussion note. HighAgogo 'High Agogo' General MIDI percussion note. HighFloorTom 'High Floor Tom' General MIDI percussion note. HighTimbale 'High Timbale' General MIDI percussion note. HighTom 'High Tom' General MIDI percussion note. HiMidTom 'Hi-Mid Tom' General MIDI percussion note. HiWoodBlock 'Hi Wood Block' General MIDI percussion note. LongGuiro 'Long Guiro' General MIDI percussion note. LongWhistle 'Long Whistle' General MIDI percussion note. LowAgogo 'Low Agogo' General MIDI percussion note. LowBongo 'Low Bongo' General MIDI percussion note. LowConga 'Low Conga' General MIDI percussion note. LowFloorTom 'Low Floor Tom' General MIDI percussion note. LowMidTom 'Low-Mid Tom' General MIDI percussion note. LowTimbale 'Low Timbale' General MIDI percussion note. LowTom 'Low Tom' General MIDI percussion note. LowWoodBlock 'Low Wood Block' General MIDI percussion note. Maracas 'Maracas' General MIDI percussion note. MuteCuica 'Mute Cuica' General MIDI percussion note. MuteHiConga 'Mute Hi Conga' General MIDI percussion note. MuteTriangle 'Mute Triangle' General MIDI percussion note. OpenCuica 'Open Cuica' General MIDI percussion note. OpenHiConga 'Open Hi Conga' General MIDI percussion note. OpenHiHat 'Open Hi-Hat' General MIDI percussion note. OpenTriangle 'Open Triangle' General MIDI percussion note. PedalHiHat 'Pedal Hi-Hat' General MIDI percussion note. RideBell 'Ride Bell' General MIDI percussion note. RideCymbal1 'Ride Cymbal 1' General MIDI percussion note. RideCymbal2 'Ride Cymbal 2' General MIDI percussion note. ShortGuiro 'Short Guiro' General MIDI percussion note. ShortWhistle 'Short Whistle' General MIDI percussion note. SideStick 'Side Stick' General MIDI percussion note. SplashCymbal 'Splash Cymbal' General MIDI percussion note. Tambourine 'Tambourine' General MIDI percussion note. Vibraslap 'Vibraslap' General MIDI percussion note. Extension Methods GeneralMidiUtilities.AsSevenBitNumber() GeneralMidiUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralMidiUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiProgram.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiProgram.html",
    "title": "Enum GeneralMidiProgram | DryWetMIDI",
    "keywords": "Enum GeneralMidiProgram General MIDI Level 1 program (patch). Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralMidiProgram : byte Fields Name Description Accordion 'Accordion' General MIDI program. AcousticBass 'Acoustic Bass' General MIDI program. AcousticGrandPiano 'Acoustic Grand Piano' General MIDI program. AcousticGuitar1 'Acoustic Guitar (nylon)' General MIDI program. AcousticGuitar2 'Acoustic Guitar (steel)' General MIDI program. Agogo 'Agogo' General MIDI program. AltoSax 'Alto Sax' General MIDI program. Applause 'Applause' General MIDI program. BagPipe 'Bag pipe' General MIDI program. Banjo 'Banjo' General MIDI program. BaritoneSax 'Baritone Sax' General MIDI program. Bassoon 'Bassoon' General MIDI program. BirdTweet 'Bird Tweet' General MIDI program. BlownBottle 'Blown Bottle' General MIDI program. BrassSection 'Brass Section' General MIDI program. BreathNoise 'Breath Noise' General MIDI program. BrightAcousticPiano 'Bright Acoustic Piano' General MIDI program. Celesta 'Celesta' General MIDI program. Cello 'Cello' General MIDI program. ChoirAahs 'Choir Aahs' General MIDI program. ChurchOrgan 'Church Organ' General MIDI program. Clarinet 'Clarinet' General MIDI program. Clavi 'Clavi' General MIDI program. Contrabass 'Contrabass' General MIDI program. DistortionGuitar 'Distortion Guitar' General MIDI program. DrawbarOrgan 'Drawbar Organ' General MIDI program. Dulcimer 'Dulcimer' General MIDI program. ElectricBass1 'Electric Bass (finger)' General MIDI program. ElectricBass2 'Electric Bass (pick)' General MIDI program. ElectricGrandPiano 'Electric Grand Piano' General MIDI program. ElectricGuitar1 'Electric Guitar (jazz)' General MIDI program. ElectricGuitar2 'Electric Guitar (clean)' General MIDI program. ElectricGuitar3 'Electric Guitar (muted)' General MIDI program. ElectricPiano1 'Electric Piano 1' General MIDI program. ElectricPiano2 'Electric Piano 2' General MIDI program. EnglishHorn 'English Horn' General MIDI program. Fiddle 'Fiddle' General MIDI program. Flute 'Flute' General MIDI program. FrenchHorn 'French Horn' General MIDI program. FretlessBass 'Fretless Bass' General MIDI program. Fx1 'FX 1 (rain)' General MIDI program. Fx2 'FX 2 (soundtrack)' General MIDI program. Fx3 'FX 3 (crystal)' General MIDI program. Fx4 'FX 4 (atmosphere)' General MIDI program. Fx5 'FX 5 (brightness)' General MIDI program. Fx6 'FX 6 (goblins)' General MIDI program. Fx7 'FX 7 (echoes)' General MIDI program. Fx8 'FX 8 (sci-fi)' General MIDI program. Glockenspiel 'Glockenspiel' General MIDI program. GuitarFretNoise 'Guitar Fret Noise' General MIDI program. GuitarHarmonics 'Guitar harmonics' General MIDI program. Gunshot 'Gunshot' General MIDI program. Harmonica 'Harmonica' General MIDI program. Harpsichord 'Harpsichord' General MIDI program. Helicopter 'Helicopter' General MIDI program. HonkyTonkPiano 'Honky-tonk Piano' General MIDI program. Kalimba 'Kalimba' General MIDI program. Koto 'Koto' General MIDI program. Lead1 'Lead 1 (square)' General MIDI program. Lead2 'Lead 2 (sawtooth)' General MIDI program. Lead3 'Lead 3 (calliope)' General MIDI program. Lead4 'Lead 4 (chiff)' General MIDI program. Lead5 'Lead 5 (charang)' General MIDI program. Lead6 'Lead 6 (voice)' General MIDI program. Lead7 'Lead 7 (fifths)' General MIDI program. Lead8 'Lead 8 (bass + lead)' General MIDI program. Marimba 'Marimba' General MIDI program. MelodicTom 'Melodic Tom' General MIDI program. MusicBox 'Music Box' General MIDI program. MutedTrumpet 'Muted Trumpet' General MIDI program. Oboe 'Oboe' General MIDI program. Ocarina 'Ocarina' General MIDI program. OrchestraHit 'Orchestra Hit' General MIDI program. OrchestralHarp 'Orchestral Harp' General MIDI program. OverdrivenGuitar 'Overdriven Guitar' General MIDI program. Pad1 'Pad 1 (new age)' General MIDI program. Pad2 'Pad 2 (warm)' General MIDI program. Pad3 'Pad 3 (polysynth)' General MIDI program. Pad4 'Pad 4 (choir)' General MIDI program. Pad5 'Pad 5 (bowed)' General MIDI program. Pad6 'Pad 6 (metallic)' General MIDI program. Pad7 'Pad 7 (halo)' General MIDI program. Pad8 'Pad 8 (sweep)' General MIDI program. PanFlute 'Pan Flute' General MIDI program. PercussiveOrgan 'Percussive Organ' General MIDI program. Piccolo 'Piccolo' General MIDI program. PizzicatoStrings 'Pizzicato Strings' General MIDI program. Recorder 'Recorder' General MIDI program. ReedOrgan 'Reed Organ' General MIDI program. ReverseCymbal 'Reverse Cymbal' General MIDI program. RockOrgan 'Rock Organ' General MIDI program. Seashore 'Seashore' General MIDI program. Shakuhachi 'Shakuhachi' General MIDI program. Shamisen 'Shamisen' General MIDI program. Shanai 'Shanai' General MIDI program. Sitar 'Sitar' General MIDI program. SlapBass1 'Slap Bass 1' General MIDI program. SlapBass2 'Slap Bass 2' General MIDI program. SopranoSax 'Soprano Sax' General MIDI program. SteelDrums 'Steel Drums' General MIDI program. StringEnsemble1 'String Ensemble 1' General MIDI program. StringEnsemble2 'String Ensemble 2' General MIDI program. SynthBass1 'Synth Bass 1' General MIDI program. SynthBass2 'Synth Bass 2' General MIDI program. SynthBrass1 'SynthBrass 1' General MIDI program. SynthBrass2 'SynthBrass 2' General MIDI program. SynthDrum 'Synth Drum' General MIDI program. SynthStrings1 'SynthStrings 1' General MIDI program. SynthStrings2 'SynthStrings 2' General MIDI program. SynthVoice 'Synth Voice' General MIDI program. TaikoDrum 'Taiko Drum' General MIDI program. TangoAccordion 'Tango Accordion' General MIDI program. TelephoneRing 'Telephone Ring' General MIDI program. TenorSax 'Tenor Sax' General MIDI program. Timpani 'Timpani' General MIDI program. TinkleBell 'Tinkle Bell' General MIDI program. TremoloStrings 'Tremolo Strings' General MIDI program. Trombone 'Trombone' General MIDI program. Trumpet 'Trumpet' General MIDI program. Tuba 'Tuba' General MIDI program. TubularBells 'Tubular Bells' General MIDI program. Vibraphone 'Vibraphone' General MIDI program. Viola 'Viola' General MIDI program. Violin 'Violin' General MIDI program. VoiceOohs 'Voice Oohs' General MIDI program. Whistle 'Whistle' General MIDI program. Woodblock 'Woodblock' General MIDI program. Xylophone 'Xylophone' General MIDI program. Extension Methods GeneralMidiUtilities.AsSevenBitNumber() GeneralMidiUtilities.GetProgramEvent(FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralMidiUtilities.html",
    "title": "Class GeneralMidiUtilities | DryWetMIDI",
    "keywords": "Class GeneralMidiUtilities Provides utilities for General MIDI Level 1. Inheritance Object GeneralMidiUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralMidiUtilities Methods AsSevenBitNumber(GeneralMidiPercussion) Converts GeneralMidiPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidiPercussion percussion) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralMidiProgram) Converts GeneralMidiProgram to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralMidiProgram program) Parameters Type Name Description GeneralMidiProgram program GeneralMidiProgram to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value. GetNoteOffEvent(GeneralMidiPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General MIDI Level 1 percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralMidiPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General MIDI Level 1 percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralMidiPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralMidiPercussion percussion GeneralMidiPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetProgramEvent(GeneralMidiProgram, FourBitNumber) Gets an instance of the ProgramChangeEvent corresponding to the specified General MIDI Level 1 program. Declaration public static MidiEvent GetProgramEvent(this GeneralMidiProgram program, FourBitNumber channel) Parameters Type Name Description GeneralMidiProgram program GeneralMidiProgram to get an event for. FourBitNumber channel Channel an event should be created for. Returns Type Description MidiEvent An instance of the ProgramChangeEvent corresponding to the program . Exceptions Type Condition InvalidEnumArgumentException program specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundBrushPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundBrushPercussion.html",
    "title": "Enum GeneralSoundBrushPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundBrushPercussion General Sound 'Brush' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundBrushPercussion : byte Fields Name Description Belltree 'Belltree' General Sound percussion note. BrushSlap 'Brush Slap' General Sound percussion note. BrushSwirl 'Brush Swirl' General Sound percussion note. BrushTap 'Brush Tap' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. ChineseCymbal 'Chinese Cymbal' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighFloorTom 'High Floor Tom' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HighTom 'High Tom' General Sound percussion note. HiMidTom 'Hi Mid Tom' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JazzKick1 'Jazz Kick 1' General Sound percussion note. JazzKick2 'Jazz Kick 2' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowFloorTom 'Low Floor Tom' General Sound percussion note. LowMidTom 'Low Mid Tom' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowTom 'Low Tom' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundCm6432LPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundCm6432LPercussion.html",
    "title": "Enum GeneralSoundCm6432LPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundCm6432LPercussion General Sound 'CM-64/CM-32L' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundCm6432LPercussion : byte Fields Name Description AcousticBassDrum1 'Acoustic Bass Drum 1' General Sound percussion note. AcousticBassDrum2 'Acoustic Bass Drum 2' General Sound percussion note. AcousticHiTom1 'Acoustic Hi Tom 1' General Sound percussion note. AcousticHiTom2 'Acoustic Hi Tom 2' General Sound percussion note. AcousticLowTom1 'Acoustic Low Tom 1' General Sound percussion note. AcousticLowTom2 'Acoustic Low Tom 2' General Sound percussion note. AcousticMidTom1 'Acoustic Mid Tom 1' General Sound percussion note. AcousticMidTom2 'Acoustic Mid Tom 2' General Sound percussion note. AcousticSnareDrum 'Acoustic Snare Drum' General Sound percussion note. Applause 'Applause' General Sound percussion note. BirdsTweet 'Birds Tweet' General Sound percussion note. Bubble 'Bubble' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. CarBrakes 'Car Brakes' General Sound percussion note. CarCrash 'Car Crash' General Sound percussion note. CarEngine 'Car Engine' General Sound percussion note. CarPassing 'Car Passing' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal 'Crash Cymbal' General Sound percussion note. DogBark 'Dog Bark' General Sound percussion note. DoorClosing 'Door Closing' General Sound percussion note. DoorCreaking 'Door Creaking' General Sound percussion note. ElectronicSnareDrum 'Electronic Snare Drum' General Sound percussion note. Explosion 'Explosion' General Sound percussion note. Footsteps1 'Footsteps1' General Sound percussion note. Footsteps2 'Footsteps2' General Sound percussion note. GunShot 'Gun Shot' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. Heartbeat 'Heartbeat' General Sound percussion note. Helicopter 'Helicopter' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighBongo 'High Bongo' General Sound percussion note. HighConga 'High Conga' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HorseGallop 'Horse Gallop' General Sound percussion note. JetPlane 'Jet Plane' General Sound percussion note. LaserGun 'Laser Gun' General Sound percussion note. Laughing 'Laughing' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. MachineGun 'Machine Gun' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. OpenHiHat1 'Open Hi-Hat 1' General Sound percussion note. OpenHiHat2 'Open Hi-Hat 2' General Sound percussion note. Punch 'Punch' General Sound percussion note. Quijada 'Quijada' General Sound percussion note. Rain 'Rain' General Sound percussion note. RideCymbal 'Ride Cymbal' General Sound percussion note. RimShot 'Rim Shot' General Sound percussion note. Scratch 'Scratch' General Sound percussion note. Screaming 'Screaming' General Sound percussion note. Seashore 'Seashore' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. Siren 'Siren' General Sound percussion note. Starship 'Starship' General Sound percussion note. Stream 'Stream' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Thunder 'Thunder' General Sound percussion note. Train 'Train' General Sound percussion note. Wind 'Wind' General Sound percussion note. WindChimes 'Wind Chimes' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundElectronicPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundElectronicPercussion.html",
    "title": "Enum GeneralSoundElectronicPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundElectronicPercussion General Sound 'Electronic' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundElectronicPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. ElectricBassDrum 'Electric Bass Drum' General Sound percussion note. ElectricHiTom1 'Electric Hi Tom 1' General Sound percussion note. ElectricHiTom2 'Electric Hi Tom 2' General Sound percussion note. ElectricLowTom1 'Electric Low Tom 1' General Sound percussion note. ElectricLowTom2 'Electric Low Tom 2' General Sound percussion note. ElectricMidTom1 'Electric Mid Tom 1' General Sound percussion note. ElectricMidTom2 'Electric Mid Tom 2' General Sound percussion note. ElectricSnare1 'Electric Snare 1' General Sound percussion note. ElectricSnare2 'Electric Snare 2' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. ReverseCymbal 'Reverse Cymbal' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundJazzPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundJazzPercussion.html",
    "title": "Enum GeneralSoundJazzPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundJazzPercussion General Sound 'Jazz' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundJazzPercussion : byte Fields Name Description AcousticSnare 'Acoustic Snare' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. ChineseCymbal 'Chinese Cymbal' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. ElectricSnare 'Electric Snare' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighFloorTom 'High Floor Tom' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HighTom 'High Tom' General Sound percussion note. HiMidTom 'Hi Mid Tom' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JazzKick1 'Jazz Kick 1' General Sound percussion note. JazzKick2 'Jazz Kick 2' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowFloorTom 'Low Floor Tom' General Sound percussion note. LowMidTom 'Low Mid Tom' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowTom 'Low Tom' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundOrchestraPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundOrchestraPercussion.html",
    "title": "Enum GeneralSoundOrchestraPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundOrchestraPercussion General Sound 'Orchestra' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundOrchestraPercussion : byte Fields Name Description Applause 'Applause' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. Castanets2 'Castanets 2' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat2 'Closed Hi-Hat 2' General Sound percussion note. ConcertBassDrum1 'Concert Bass Drum 1' General Sound percussion note. ConcertBassDrum2 'Concert Bass Drum 2' General Sound percussion note. ConcertCymbal1 'Concert Cymbal 1' General Sound percussion note. ConcertCymbal2 'Concert Cymbal 2' General Sound percussion note. ConcertSnareDrum 'Concert Snare Drum' General Sound percussion note. ConcertSnareDrum2 'Concert Snare Drum 2' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat2 'Open Hi-Hat 2' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. TimpaniA 'Timpani A' General Sound percussion note. TimpaniASharp 'Timpani A#' General Sound percussion note. TimpaniB 'Timpani B' General Sound percussion note. TimpaniC 'Timpani C' General Sound percussion note. TimpaniCSharp 'Timpani C#' General Sound percussion note. TimpaniD 'Timpani D' General Sound percussion note. TimpaniDSharp 'Timpani D#' General Sound percussion note. TimpaniE 'Timpani E' General Sound percussion note. TimpaniF 'Timpani F' General Sound percussion note. TimpaniF2 'Timpani F 2' General Sound percussion note. TimpaniFSharp 'Timpani F#' General Sound percussion note. TimpaniG 'Timpani G' General Sound percussion note. TimpaniGSharp 'Timpani G#' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundPercussionSet.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundPercussionSet.html",
    "title": "Enum GeneralSoundPercussionSet | DryWetMIDI",
    "keywords": "Enum GeneralSoundPercussionSet General Sound percussion set. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundPercussionSet : byte Fields Name Description Brush 'Brush' percussion set. Cm6432L 'CM-64/CM-32L' percussion set. Electronic 'Electronic' percussion set. Jazz 'Jazz' percussion set. Orchestra 'Orchestra' percussion set. Power 'Power' percussion set. Room 'Room' percussion set. Sfx 'SFX' percussion set. Standard 'Standard' percussion set. Tr808 'TR-808' percussion set. Extension Methods GeneralSoundUtilities.GetPercussionSetEvents(FourBitNumber) GeneralSoundUtilities.GetProgramEvent(FourBitNumber) GeneralSoundUtilities.AsSevenBitNumber()"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundPowerPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundPowerPercussion.html",
    "title": "Enum GeneralSoundPowerPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundPowerPercussion General Sound 'Power' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundPowerPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. ChineseCymbal 'Chinese Cymbal' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. ElectricSnare 'Electric Snare' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. PowerHiTom1 'Power Hi Tom 1' General Sound percussion note. PowerHiTom2 'Power Hi Tom 2' General Sound percussion note. PowerKickDrum 'Power Kick Drum' General Sound percussion note. PowerLowTom1 'Power Low Tom 1' General Sound percussion note. PowerLowTom2 'Power Low Tom 2' General Sound percussion note. PowerMidTom1 'Power Mid Tom 1' General Sound percussion note. PowerMidTom2 'Power Mid Tom 2' General Sound percussion note. PowerSnareDrum 'Power Snare Drum' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundRoomPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundRoomPercussion.html",
    "title": "Enum GeneralSoundRoomPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundRoomPercussion General Sound 'Room' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundRoomPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General Sound percussion note. AcousticSnare 'Acoustic Snare' General Sound percussion note. BassDrum1 'Bass Drum 1' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. ChineseCymbal 'Chinese Cymbal' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. ElectricSnare 'Electric Snare' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. RoomHiTom1 'Room Hi Tom 1' General Sound percussion note. RoomHiTom2 'Room Hi Tom 2' General Sound percussion note. RoomLowTom1 'Room Low Tom 1' General Sound percussion note. RoomLowTom2 'Room Low Tom 2' General Sound percussion note. RoomMidTom1 'Room Mid Tom 1' General Sound percussion note. RoomMidTom2 'Room Mid Tom 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundSfxPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundSfxPercussion.html",
    "title": "Enum GeneralSoundSfxPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundSfxPercussion General Sound 'SFX' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundSfxPercussion : byte Fields Name Description Applause 'Applause' General Sound percussion note. Birds 'Birds' General Sound percussion note. Bubble 'Bubble' General Sound percussion note. CarCrash 'Car-Crash' General Sound percussion note. CarEngine 'Car-Engine' General Sound percussion note. CarPass 'Car-Pass' General Sound percussion note. CarStop 'Car-Stop' General Sound percussion note. Dog 'Dog' General Sound percussion note. Door 'Door' General Sound percussion note. DoorCreaking 'Door Creaking' General Sound percussion note. Explosion 'Explosion' General Sound percussion note. FlKeyClick 'Fl Key Click' General Sound percussion note. Footsteps1 'Footsteps 1' General Sound percussion note. Footsteps2 'Footsteps 2' General Sound percussion note. GuitarCuttingNoiseDown 'Guitar Cutting Noise Down' General Sound percussion note. GuitarCuttingNoiseUp 'Guitar Cutting Noise Up' General Sound percussion note. GuitarFretNoise 'Guitar Fret Noise' General Sound percussion note. GunShot 'Gun Shot' General Sound percussion note. HeartBeat 'Heart Beat' General Sound percussion note. Helicopter 'Helicopter' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HorseGallop 'Horse Gallop' General Sound percussion note. Jetplane 'Jetplane' General Sound percussion note. Lasergun 'Lasergun' General Sound percussion note. Laughing 'Laughing' General Sound percussion note. MachineGun 'Machine Gun' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. Punch 'Punch' General Sound percussion note. Rain 'Rain' General Sound percussion note. Scratch 'Scratch' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Scream 'Scream' General Sound percussion note. Seashore 'Seashore' General Sound percussion note. Siren 'Siren' General Sound percussion note. Slap 'Slap' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Starship 'Starship' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Stream 'Stream' General Sound percussion note. StringSlapOfDoubleBass 'String Slap Of Double Bass' General Sound percussion note. Thunder 'Thunder' General Sound percussion note. Train 'Train' General Sound percussion note. Wind 'Wind' General Sound percussion note. WindChimes 'Wind Chimes' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundStandardPercussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundStandardPercussion.html",
    "title": "Enum GeneralSoundStandardPercussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundStandardPercussion General Sound 'Standard' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundStandardPercussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General Sound percussion note. AcousticSnare 'Acoustic Snare' General Sound percussion note. BassDrum1 'Bass Drum 1' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. ChineseCymbal 'Chinese Cymbal' General Sound percussion note. Claves 'Claves' General Sound percussion note. ClosedHiHat 'Closed Hi-Hat' General Sound percussion note. Cowbell 'Cowbell' General Sound percussion note. CrashCymbal1 'Crash Cymbal 1' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. ElectricSnare 'Electric Snare' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighFloorTom 'High Floor Tom' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HighTom 'High Tom' General Sound percussion note. HiMidTom 'Hi Mid Tom' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowConga 'Low Conga' General Sound percussion note. LowFloorTom 'Low Floor Tom' General Sound percussion note. LowMidTom 'Low Mid Tom' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowTom 'Low Tom' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. Maracas 'Maracas' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteHiConga 'Mute Hi Conga' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenHiConga 'Open Hi Conga' General Sound percussion note. OpenHiHat 'Open Hi-Hat' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. PedalHiHat 'Pedal Hi-Hat' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. SideStick 'Side Stick' General Sound percussion note. Slap 'Slap' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundTr808Percussion.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundTr808Percussion.html",
    "title": "Enum GeneralSoundTr808Percussion | DryWetMIDI",
    "keywords": "Enum GeneralSoundTr808Percussion General Sound 'TR-808' percussion. Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public enum GeneralSoundTr808Percussion : byte Fields Name Description AcousticBassDrum 'Acoustic Bass Drum' General Sound percussion note. Belltree 'Belltree' General Sound percussion note. Cabasa 'Cabasa' General Sound percussion note. Castanets 'Castanets' General Sound percussion note. CrashCymbal2 'Crash Cymbal 2' General Sound percussion note. HandClap 'Hand Clap' General Sound percussion note. HiBongo 'Hi Bongo' General Sound percussion note. HighAgogo 'High Agogo' General Sound percussion note. HighQ 'High Q' General Sound percussion note. HighTimbale 'High Timbale' General Sound percussion note. HiWoodBlock 'Hi Wood Block' General Sound percussion note. JingleBell 'Jingle Bell' General Sound percussion note. LongGuiro 'Long Guiro' General Sound percussion note. LongWhistle 'Long Whistle' General Sound percussion note. LowAgogo 'Low Agogo' General Sound percussion note. LowBongo 'Low Bongo' General Sound percussion note. LowTimbale 'Low Timbale' General Sound percussion note. LowWoodBlock 'Low Wood Block' General Sound percussion note. MetronomeBell 'Metronome Bell' General Sound percussion note. MetronomeClick 'Metronome Click' General Sound percussion note. MuteCuica 'Mute Cuica' General Sound percussion note. MuteSurdo 'Mute Surdo' General Sound percussion note. MuteTriangle 'Mute Triangle' General Sound percussion note. OpenCuica 'Open Cuica' General Sound percussion note. OpenSurdo 'Open Surdo' General Sound percussion note. OpenTriangle 'Open Triangle' General Sound percussion note. ReverseCymbal 'Reverse Cymbal' General Sound percussion note. RideBell 'Ride Bell' General Sound percussion note. RideCymbal1 'Ride Cymbal 1' General Sound percussion note. RideCymbal2 'Ride Cymbal 2' General Sound percussion note. ScratchPull 'Scratch Pull' General Sound percussion note. ScratchPush 'Scratch Push' General Sound percussion note. Shaker 'Shaker' General Sound percussion note. ShortGuiro 'Short Guiro' General Sound percussion note. ShortWhistle 'Short Whistle' General Sound percussion note. Slap 'Slap' General Sound percussion note. SnaeDrum2 'Electric Snare 2' General Sound percussion note. SplashCymbal 'Splash Cymbal' General Sound percussion note. SquareClick 'Square Click' General Sound percussion note. Sticks 'Sticks' General Sound percussion note. Tambourine 'Tambourine' General Sound percussion note. Tr808BassDrum 'TR-808 Bass Drum' General Sound percussion note. Tr808Claves 'TR-808 Claves' General Sound percussion note. Tr808ClosedHiHat 'TR-808 Closed Hi-Hat' General Sound percussion note. Tr808Cowbell 'TR-808 Cowbell' General Sound percussion note. Tr808Cymbal 'TR-808 Cymbal' General Sound percussion note. Tr808HiConga 'TR-808 Hi Conga' General Sound percussion note. Tr808HiTom1 'TR-808 Hi Tom 1' General Sound percussion note. Tr808HiTom2 'TR-808 Hi Tom 2' General Sound percussion note. Tr808LowConga 'TR-808 Low Conga' General Sound percussion note. Tr808LowTom1 'TR-808 Low Tom 1' General Sound percussion note. Tr808LowTom2 'TR-808 Low Tom 2' General Sound percussion note. Tr808Maracas 'TR-808 Maracas' General Sound percussion note. Tr808MidConga 'TR-808 Mid Conga' General Sound percussion note. Tr808MidTom1 'TR-808 Mid Tom 1' General Sound percussion note. Tr808MidTom2 'TR-808 Mid Tom 2' General Sound percussion note. Tr808OpenHiHat 'TR-808 Open Hi-Hat' General Sound percussion note. Tr808PedalHiHat 'TR-808 Pedal Hi-Hat' General Sound percussion note. Tr808RimShot 'TR-808 Rim Shot' General Sound percussion note. Tr808SnareDrum 'TR-808 Snare Drum' General Sound percussion note. Vibraslap 'Vibraslap' General Sound percussion note. Extension Methods GeneralSoundUtilities.AsSevenBitNumber() GeneralSoundUtilities.GetNoteOnEvent(SevenBitNumber, FourBitNumber) GeneralSoundUtilities.GetNoteOffEvent(SevenBitNumber, FourBitNumber)"
  },
  "api/Melanchall.DryWetMidi.Standards.GeneralSoundUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.GeneralSoundUtilities.html",
    "title": "Class GeneralSoundUtilities | DryWetMIDI",
    "keywords": "Class GeneralSoundUtilities Provides utilities for General Sound. Inheritance Object GeneralSoundUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Standards Assembly : Melanchall.DryWetMidi.dll Syntax public static class GeneralSoundUtilities Methods AsSevenBitNumber(GeneralSoundBrushPercussion) Converts GeneralSoundBrushPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundBrushPercussion percussion) Parameters Type Name Description GeneralSoundBrushPercussion percussion GeneralSoundBrushPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundCm6432LPercussion) Converts GeneralSoundCm6432LPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundCm6432LPercussion percussion) Parameters Type Name Description GeneralSoundCm6432LPercussion percussion GeneralSoundCm6432LPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundElectronicPercussion) Converts GeneralSoundElectronicPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundElectronicPercussion percussion) Parameters Type Name Description GeneralSoundElectronicPercussion percussion GeneralSoundElectronicPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundJazzPercussion) Converts GeneralSoundJazzPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundJazzPercussion percussion) Parameters Type Name Description GeneralSoundJazzPercussion percussion GeneralSoundJazzPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundOrchestraPercussion) Converts GeneralSoundOrchestraPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundOrchestraPercussion percussion) Parameters Type Name Description GeneralSoundOrchestraPercussion percussion GeneralSoundOrchestraPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundPercussionSet) Converts GeneralSoundPercussionSet to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundPercussionSet percussionSet) Parameters Type Name Description GeneralSoundPercussionSet percussionSet GeneralSoundPercussionSet to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value. AsSevenBitNumber(GeneralSoundPowerPercussion) Converts GeneralSoundPowerPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundPowerPercussion percussion) Parameters Type Name Description GeneralSoundPowerPercussion percussion GeneralSoundPowerPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundRoomPercussion) Converts GeneralSoundRoomPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundRoomPercussion percussion) Parameters Type Name Description GeneralSoundRoomPercussion percussion GeneralSoundRoomPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundSfxPercussion) Converts GeneralSoundSfxPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundSfxPercussion percussion) Parameters Type Name Description GeneralSoundSfxPercussion percussion GeneralSoundSfxPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundStandardPercussion) Converts GeneralSoundStandardPercussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundStandardPercussion percussion) Parameters Type Name Description GeneralSoundStandardPercussion percussion GeneralSoundStandardPercussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. AsSevenBitNumber(GeneralSoundTr808Percussion) Converts GeneralSoundTr808Percussion to the corresponding value of the SevenBitNumber type. Declaration public static SevenBitNumber AsSevenBitNumber(this GeneralSoundTr808Percussion percussion) Parameters Type Name Description GeneralSoundTr808Percussion percussion GeneralSoundTr808Percussion to convert to SevenBitNumber . Returns Type Description SevenBitNumber SevenBitNumber representing the percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundBrushPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Brush' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundBrushPercussion percussion GeneralSoundBrushPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundCm6432LPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'CM-64/CM-32L' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundCm6432LPercussion percussion GeneralSoundCm6432LPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundElectronicPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Electronic' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundElectronicPercussion percussion GeneralSoundElectronicPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundJazzPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Jazz' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundJazzPercussion percussion GeneralSoundJazzPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundOrchestraPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Orchestra' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundOrchestraPercussion percussion GeneralSoundOrchestraPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundPowerPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Power' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundPowerPercussion percussion GeneralSoundPowerPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundRoomPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Room' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundRoomPercussion percussion GeneralSoundRoomPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundSfxPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'SFX' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundSfxPercussion percussion GeneralSoundSfxPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundStandardPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'Standard' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundStandardPercussion percussion GeneralSoundStandardPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOffEvent(GeneralSoundTr808Percussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOffEvent corresponding to the specified General Sound 'TR-808' percussion. Declaration public static NoteOffEvent GetNoteOffEvent(this GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundTr808Percussion percussion GeneralSoundTr808Percussion to get an event for. SevenBitNumber velocity Velocity of the NoteOffEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOffEvent An instance of the NoteOffEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundBrushPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Brush' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundBrushPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundBrushPercussion percussion GeneralSoundBrushPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundCm6432LPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'CM-64/CM-32L' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundCm6432LPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundCm6432LPercussion percussion GeneralSoundCm6432LPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundElectronicPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Electronic' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundElectronicPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundElectronicPercussion percussion GeneralSoundElectronicPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundJazzPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Jazz' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundJazzPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundJazzPercussion percussion GeneralSoundJazzPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundOrchestraPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Orchestra' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundOrchestraPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundOrchestraPercussion percussion GeneralSoundOrchestraPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundPowerPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Power' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundPowerPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundPowerPercussion percussion GeneralSoundPowerPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundRoomPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Room' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundRoomPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundRoomPercussion percussion GeneralSoundRoomPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundSfxPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'SFX' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundSfxPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundSfxPercussion percussion GeneralSoundSfxPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundStandardPercussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'Standard' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundStandardPercussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundStandardPercussion percussion GeneralSoundStandardPercussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetNoteOnEvent(GeneralSoundTr808Percussion, SevenBitNumber, FourBitNumber) Gets an instance of the NoteOnEvent corresponding to the specified General Sound 'TR-808' percussion. Declaration public static NoteOnEvent GetNoteOnEvent(this GeneralSoundTr808Percussion percussion, SevenBitNumber velocity, FourBitNumber channel) Parameters Type Name Description GeneralSoundTr808Percussion percussion GeneralSoundTr808Percussion to get an event for. SevenBitNumber velocity Velocity of the NoteOnEvent . FourBitNumber channel Channel an event should be created for. Returns Type Description NoteOnEvent An instance of the NoteOnEvent corresponding to the specified percussion . Exceptions Type Condition InvalidEnumArgumentException percussion specified an invalid value. GetPercussionSetEvents(GeneralSoundPercussionSet, FourBitNumber) Gets MIDI events sequence to switch to the specified General Sound percussion set. Declaration public static IEnumerable<MidiEvent> GetPercussionSetEvents(this GeneralSoundPercussionSet percussionSet, FourBitNumber channel) Parameters Type Name Description GeneralSoundPercussionSet percussionSet GeneralSoundPercussionSet to get events for. FourBitNumber channel Channel events should be created for. Returns Type Description IEnumerable < MidiEvent > MIDI events sequence to switch to the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value. GetProgramEvent(GeneralSoundPercussionSet, FourBitNumber) Gets Program Change event corresponding to the specified General Sound percussion set. Declaration public static MidiEvent GetProgramEvent(this GeneralSoundPercussionSet percussionSet, FourBitNumber channel) Parameters Type Name Description GeneralSoundPercussionSet percussionSet GeneralSoundPercussionSet to get event for. FourBitNumber channel Channel event should be created for. Returns Type Description MidiEvent Program Change event corresponding to the percussionSet . Exceptions Type Condition InvalidEnumArgumentException percussionSet specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Standards.html": {
    "href": "api/Melanchall.DryWetMidi.Standards.html",
    "title": "Namespace Melanchall.DryWetMidi.Standards | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Standards Classes GeneralMidi The class which provides information about the General MIDI Level 1 standard. GeneralMidi2Utilities Provides utilities for General MIDI Level 2. GeneralMidiUtilities Provides utilities for General MIDI Level 1. GeneralSoundUtilities Provides utilities for General Sound. Enums GeneralMidi2AnalogPercussion General MIDI Level 2 'Analog' percussion. GeneralMidi2BrushPercussion General MIDI Level 2 'Brush' percussion. GeneralMidi2ElectronicPercussion General MIDI Level 2 'Electronic' percussion. GeneralMidi2JazzPercussion General MIDI Level 2 'Jazz' percussion. GeneralMidi2OrchestraPercussion General MIDI Level 2 'Orchestra' percussion. GeneralMidi2PercussionSet General MIDI Level 2 percussion set. GeneralMidi2PowerPercussion General MIDI Level 2 'Power' percussion. GeneralMidi2Program General MIDI Level 2 program (patch). GeneralMidi2RoomPercussion General MIDI Level 2 'Room' percussion. GeneralMidi2SfxPercussion General MIDI Level 2 'SFX' percussion. GeneralMidi2StandardPercussion General MIDI Level 2 'Standard' percussion. GeneralMidiPercussion General MIDI Level 1 percussion notes. GeneralMidiProgram General MIDI Level 1 program (patch). GeneralSoundBrushPercussion General Sound 'Brush' percussion. GeneralSoundCm6432LPercussion General Sound 'CM-64/CM-32L' percussion. GeneralSoundElectronicPercussion General Sound 'Electronic' percussion. GeneralSoundJazzPercussion General Sound 'Jazz' percussion. GeneralSoundOrchestraPercussion General Sound 'Orchestra' percussion. GeneralSoundPercussionSet General Sound percussion set. GeneralSoundPowerPercussion General Sound 'Power' percussion. GeneralSoundRoomPercussion General Sound 'Room' percussion. GeneralSoundSfxPercussion General Sound 'SFX' percussion. GeneralSoundStandardPercussion General Sound 'Standard' percussion. GeneralSoundTr808Percussion General Sound 'TR-808' percussion."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsQuantizerUtilities.html",
    "title": "Class ChordsQuantizerUtilities | DryWetMIDI",
    "keywords": "Class ChordsQuantizerUtilities Provides methods to quantize chords time. Inheritance Object ChordsQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static class ChordsQuantizerUtilities Methods QuantizeChords(MidiFile, IGrid, ChordsQuantizingSettings) Quantizes chords contained in the specified MidiFile . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeChords(this MidiFile midiFile, IGrid grid, ChordsQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize chords in. IGrid grid Grid to quantize objects by. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . InvalidOperationException One of the following errors occured: Chord is going to be moved beyond zero. Chord's end is going to be moved beyond the chord's fixed end. QuantizeChords(TrackChunk, IGrid, TempoMap, ChordsQuantizingSettings) Quantizes chords contained in the specified TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeChords(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize chords in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . InvalidOperationException One of the following errors occured: Chord is going to be moved beyond zero. Chord's end is going to be moved beyond the chord's fixed end. QuantizeChords(IEnumerable<TrackChunk>, IGrid, TempoMap, ChordsQuantizingSettings) Quantizes chords contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeChords(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordsQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize chords in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. ChordsQuantizingSettings settings Settings according to which chords should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . InvalidOperationException One of the following errors occured: Chord is going to be moved beyond zero. Chord's end is going to be moved beyond the chord's fixed end."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsQuantizingSettings.html",
    "title": "Class ChordsQuantizingSettings | DryWetMIDI",
    "keywords": "Class ChordsQuantizingSettings Settings according to which chords should be quantized. Inheritance Object QuantizingSettings < Chord > LengthedObjectsQuantizingSettings < Chord > ChordsQuantizingSettings Inherited Members LengthedObjectsQuantizingSettings<Chord>.LengthType LengthedObjectsQuantizingSettings<Chord>.QuantizingTarget LengthedObjectsQuantizingSettings<Chord>.QuantizingBeyondZeroPolicy LengthedObjectsQuantizingSettings<Chord>.QuantizingBeyondFixedEndPolicy LengthedObjectsQuantizingSettings<Chord>.FixOppositeEnd QuantizingSettings<Chord>.DistanceCalculationType QuantizingSettings<Chord>.QuantizingLevel QuantizingSettings<Chord>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public class ChordsQuantizingSettings : LengthedObjectsQuantizingSettings<Chord> Properties ChordDetectionSettings Gets or sets settings which define how chords should be detected and built. Declaration public ChordDetectionSettings ChordDetectionSettings { get; set; } Property Value Type Description ChordDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizer.html",
    "title": "Class ChordsRandomizer | DryWetMIDI",
    "keywords": "Class ChordsRandomizer Provides methods to randomize chords time. Inheritance Object Randomizer < Chord , ChordsRandomizingSettings > LengthedObjectsRandomizer < Chord , ChordsRandomizingSettings > ChordsRandomizer Inherited Members LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.Randomize(IEnumerable<Chord>, IBounds, TempoMap, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.GetObjectTime(Chord, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.SetObjectTime(Chord, Int64, ChordsRandomizingSettings) LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>.OnObjectRandomizing(Chord, Int64, ChordsRandomizingSettings) Randomizer<Chord, ChordsRandomizingSettings>.RandomizeInternal(IEnumerable<Chord>, IBounds, TempoMap, ChordsRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class ChordsRandomizer : LengthedObjectsRandomizer<Chord, ChordsRandomizingSettings>"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizerUtilities.html",
    "title": "Class ChordsRandomizerUtilities | DryWetMIDI",
    "keywords": "Class ChordsRandomizerUtilities Provides methods to randomize chords time. Inheritance Object ChordsRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static class ChordsRandomizerUtilities Methods RandomizeChords(MidiFile, IBounds, ChordsRandomizingSettings) Randomizes chords contained in the specified MidiFile . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeChords(this MidiFile midiFile, IBounds bounds, ChordsRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize chords in. IBounds bounds Bounds to randomize time within. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . bounds is null . RandomizeChords(TrackChunk, IBounds, TempoMap, ChordsRandomizingSettings) Randomizes chords contained in the specified TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeChords(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize chords in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . bounds is null . tempoMap is null . RandomizeChords(IEnumerable<TrackChunk>, IBounds, TempoMap, ChordsRandomizingSettings) Randomizes chords contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeChords(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, ChordsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize chords in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. ChordsRandomizingSettings settings Settings according to which chords should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . bounds is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsRandomizingSettings.html",
    "title": "Class ChordsRandomizingSettings | DryWetMIDI",
    "keywords": "Class ChordsRandomizingSettings Settings according to which chords should be randomized. Inheritance Object RandomizingSettings < Chord > LengthedObjectsRandomizingSettings < Chord > ChordsRandomizingSettings Inherited Members LengthedObjectsRandomizingSettings<Chord>.RandomizingTarget LengthedObjectsRandomizingSettings<Chord>.FixOppositeEnd RandomizingSettings<Chord>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class ChordsRandomizingSettings : LengthedObjectsRandomizingSettings<Chord> Properties ChordDetectionSettings Gets or sets settings which define how chords should be detected and built. Declaration public ChordDetectionSettings ChordDetectionSettings { get; set; } Property Value Type Description ChordDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsSplitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsSplitter.html",
    "title": "Class ChordsSplitter | DryWetMIDI",
    "keywords": "Class ChordsSplitter Provides methods for splitting chords. Inheritance Object LengthedObjectsSplitter < Chord > ChordsSplitter Inherited Members LengthedObjectsSplitter<Chord>.SplitByStep(IEnumerable<Chord>, ITimeSpan, TempoMap) LengthedObjectsSplitter<Chord>.SplitByPartsNumber(IEnumerable<Chord>, Int32, TimeSpanType, TempoMap) LengthedObjectsSplitter<Chord>.SplitByGrid(IEnumerable<Chord>, IGrid, TempoMap) LengthedObjectsSplitter<Chord>.SplitAtDistance(IEnumerable<Chord>, ITimeSpan, LengthedObjectTarget, TempoMap) LengthedObjectsSplitter<Chord>.SplitAtDistance(IEnumerable<Chord>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public sealed class ChordsSplitter : LengthedObjectsSplitter<Chord>"
  },
  "api/Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ChordsSplitterUtilities.html",
    "title": "Class ChordsSplitterUtilities | DryWetMIDI",
    "keywords": "Class ChordsSplitterUtilities Provides methods for splitting chords. Inheritance Object ChordsSplitterUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static class ChordsSplitterUtilities Methods SplitChordsAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, ChordDetectionSettings) Splits chords contained in the specified MidiFile at the specified distance from a chord's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . distance is null . InvalidEnumArgumentException from specified an invalid value. SplitChordsAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, ChordDetectionSettings) Splits chords contained in the specified MidiFile by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitChordsAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, ChordDetectionSettings) Splits chords contained in the specified TrackChunk at the specified distance from a chord's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitChordsAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ChordDetectionSettings) Splits chords contained in the specified TrackChunk by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitChordsAtDistance(IEnumerable<TrackChunk>, ITimeSpan, LengthedObjectTarget, TempoMap, ChordDetectionSettings) Splits chords contained in the specified collection of TrackChunk at the specified distance from a chord's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. ITimeSpan distance Distance to split chords at. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitChordsAtDistance(IEnumerable<TrackChunk>, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ChordDetectionSettings) Splits chords contained in the specified collection of TrackChunk by the specified ratio of a chord's length measuring it from the chord's start or end. For example, 0.5 means splitting at the center of a chord. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsAtDistance(this IEnumerable<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. Double ratio Ratio of a chord's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a chord's length should be processed according to. LengthedObjectTarget from Point of a chord distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitChordsByGrid(MidiFile, IGrid, ChordDetectionSettings) Splits chords contained in the specified MidiFile by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByGrid(this MidiFile midiFile, IGrid grid, ChordDetectionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. IGrid grid Grid to split chords by. ChordDetectionSettings settings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException grid is null . SplitChordsByGrid(TrackChunk, IGrid, TempoMap, ChordDetectionSettings) Splits chords contained in the specified TrackChunk by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByGrid(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. IGrid grid Grid to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . SplitChordsByGrid(IEnumerable<TrackChunk>, IGrid, TempoMap, ChordDetectionSettings) Splits chords contained in the specified collection of TrackChunk by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByGrid(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. IGrid grid Grid to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . SplitChordsByPartsNumber(MidiFile, Int32, TimeSpanType, ChordDetectionSettings) Splits chords contained in the specified MidiFile into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByPartsNumber(this MidiFile midiFile, int partsNumber, TimeSpanType lengthType, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks If a chord has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, ChordDetectionSettings) Splits chords contained in the specified TrackChunk into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByPartsNumber(this TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks If a chord has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByPartsNumber(IEnumerable<TrackChunk>, Int32, TimeSpanType, TempoMap, ChordDetectionSettings) Splits chords contained in the specified collection of TrackChunk into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByPartsNumber(this IEnumerable<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. Int32 partsNumber The number of parts to split chords into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks If a chord has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitChordsByStep(MidiFile, ITimeSpan, ChordDetectionSettings) Splits chords contained in the specified MidiFile by the specified step so every chord will be split at points equally distanced from each other starting from the chord's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByStep(this MidiFile midiFile, ITimeSpan step, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split chords in. ITimeSpan step Step to split chords by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks Chords with zero length and chords with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . step is null . SplitChordsByStep(TrackChunk, ITimeSpan, TempoMap, ChordDetectionSettings) Splits chords contained in the specified TrackChunk by the specified step so every chord will be split at points equally distanced from each other starting from the chord's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByStep(this TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split chords in. ITimeSpan step Step to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks Chords with zero length and chords with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . step is null . tempoMap is null . SplitChordsByStep(IEnumerable<TrackChunk>, ITimeSpan, TempoMap, ChordDetectionSettings) Splits chords contained in the specified collection of TrackChunk by the specified step so every chord will be split at points equally distanced from each other starting from the chord's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitChordsByStep(this IEnumerable<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, ChordDetectionSettings chordDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split chords in. ITimeSpan step Step to split chords by. TempoMap tempoMap Tempo map used to calculate times to split by. ChordDetectionSettings chordDetectionSettings Settings accoridng to which chords should be detected and built. Remarks Chords with zero length and chords with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . step is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.ConstantBounds.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ConstantBounds.html",
    "title": "Class ConstantBounds | DryWetMIDI",
    "keywords": "Class ConstantBounds Time range which is constant for each object to be processed. Inheritance Object ConstantBounds Implements IBounds Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ConstantBounds : IBounds Constructors ConstantBounds(ITimeSpan) Initializes a new instance of the ConstantBounds with the specified size so time range will span for equal length to the left and to the right from time to calculate bounds relative to. Declaration public ConstantBounds(ITimeSpan size) Parameters Type Name Description ITimeSpan size Size of the time range. The length of time range will be 2 * size . Exceptions Type Condition ArgumentNullException size is null . ConstantBounds(ITimeSpan, ITimeSpan) Initializes a new instance of the ConstantBounds with the specified size of left and right parts so time range will span for different length to the left and to the right from time to calculate bounds relative to. Declaration public ConstantBounds(ITimeSpan leftSize, ITimeSpan rightSize) Parameters Type Name Description ITimeSpan leftSize Left part's size of the time range. ITimeSpan rightSize Right part's size of the time range. Exceptions Type Condition ArgumentNullException One of the following errors occured: leftSize is null . rightSize is null . Properties LeftSize Gets the size of left part of the time range represented by the current ConstantBounds . Declaration public ITimeSpan LeftSize { get; } Property Value Type Description ITimeSpan RightSize Gets the size of right part of the time range represented by the current ConstantBounds . Declaration public ITimeSpan RightSize { get; } Property Value Type Description ITimeSpan Methods GetBounds(Int64, TempoMap) Gets minimum and maximum times in MIDI ticks for the current time range. Declaration public Tuple<long, long> GetBounds(long time, TempoMap tempoMap) Parameters Type Name Description Int64 time Time bounds should be calculated relative to. TempoMap tempoMap Tempo map used to calculate bounds. Returns Type Description Tuple < Int64 , Int64 > Pair where first item is minimum time and the second one is maximum time. Implements IBounds"
  },
  "api/Melanchall.DryWetMidi.Tools.CsvConverter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.CsvConverter.html",
    "title": "Class CsvConverter | DryWetMIDI",
    "keywords": "Class CsvConverter Provides methods to convert MIDI objects to CSV representation and vice versa. Inheritance Object CsvConverter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CsvConverter Methods ConvertCsvToMidiFile(Stream, MidiFileCsvConversionSettings) Converts CSV representation of a MIDI file to MidiFile reading CSV data from a stream. Declaration public MidiFile ConvertCsvToMidiFile(Stream stream, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description Stream stream Stream to read MIDI file from. MidiFileCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file written in CSV format. Exceptions Type Condition ArgumentNullException stream is null . ArgumentException stream doesn't support reading. IOException An I/O error occurred while reading from the stream. ObjectDisposedException stream is disposed. ConvertCsvToMidiFile(String, MidiFileCsvConversionSettings) Converts CSV representation of a MIDI file to MidiFile reading CSV data from a file. Declaration public MidiFile ConvertCsvToMidiFile(string filePath, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description String filePath Path of the file with CSV representation of a MIDI file. MidiFileCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description MidiFile An instance of the MidiFile representing a MIDI file written in CSV format. Remarks Note that CSV representation of a MIDI file can be different. You can specify expected CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null . PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission. ConvertCsvToNotes(Stream, TempoMap, NoteCsvConversionSettings) Converts CSV representation of notes to collection of MidiFile reading CSV data from a stream. Declaration public IEnumerable<Note> ConvertCsvToNotes(Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description Stream stream Stream to read notes from. TempoMap tempoMap Tempo map used to convert notes from CSV. NoteCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description IEnumerable < Note > Collection of Note representing notes written in CSV format. Exceptions Type Condition ArgumentNullException One of the following errors occured: stream is null . tempoMap is null . ArgumentException stream doesn't support reading. IOException An I/O error occurred while reading from the stream. ObjectDisposedException stream is disposed. ConvertCsvToNotes(String, TempoMap, NoteCsvConversionSettings) Converts CSV representation of notes to collection of Note reading CSV data from a file. Declaration public IEnumerable<Note> ConvertCsvToNotes(string filePath, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description String filePath Path of the file with CSV representation of notes. TempoMap tempoMap Tempo map used to convert notes from CSV. NoteCsvConversionSettings settings Settings according to which CSV data must be converted. Pass null to use default settings. Returns Type Description IEnumerable < Note > Collection of Note representing notes written in CSV format. Exceptions Type Condition ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException One of the following errors occured: filePath is null . tempoMap is null . PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while reading the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission. ConvertMidiFileToCsv(MidiFile, Stream, MidiFileCsvConversionSettings) Converts the specified MidiFile to CSV represenattion and writes it to a stream. Declaration public void ConvertMidiFileToCsv(MidiFile midiFile, Stream stream, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to convert to CSV. Stream stream Stream to write CSV representation to. MidiFileCsvConversionSettings settings Settings according to which midiFile must be converted. Pass null to use default settings. Remarks Note that MidiFile can be converted to different CSV representations. You can specify desired CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . stream is null . ArgumentException stream doesn't support writing. IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. ConvertMidiFileToCsv(MidiFile, String, Boolean, MidiFileCsvConversionSettings) Converts the specified MidiFile to CSV represenattion and writes it to a file. Declaration public void ConvertMidiFileToCsv(MidiFile midiFile, string filePath, bool overwriteFile = false, MidiFileCsvConversionSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to convert to CSV. String filePath Path of the output CSV file. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists, exception will be thrown. MidiFileCsvConversionSettings settings Settings according to which midiFile must be converted. Pass null to use default settings. Remarks Note that MidiFile can be converted to different CSV representations. You can specify desired CSV layout via settings using CsvLayout property. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null . PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission. ConvertNotesToCsv(IEnumerable<Note>, Stream, TempoMap, NoteCsvConversionSettings) Converts the specified collection of Note to CSV represenattion and writes it to a stream. Declaration public void ConvertNotesToCsv(IEnumerable<Note> notes, Stream stream, TempoMap tempoMap, NoteCsvConversionSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of Note to convert to CSV. Stream stream Stream to write CSV representation to. TempoMap tempoMap Tempo map used to convert notes to CSV. NoteCsvConversionSettings settings Settings according to which notes must be converted. Pass null to use default settings. Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . stream is null . tempoMap is null . ArgumentException stream doesn't support writing. IOException An I/O error occurred while writing to the stream. ObjectDisposedException stream is disposed. ConvertNotesToCsv(IEnumerable<Note>, String, TempoMap, Boolean, NoteCsvConversionSettings) Converts the specified collection of Note to CSV represenattion and writes it to a file. Declaration public void ConvertNotesToCsv(IEnumerable<Note> notes, string filePath, TempoMap tempoMap, bool overwriteFile = false, NoteCsvConversionSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of Note to convert to CSV. String filePath Path of the output CSV file. TempoMap tempoMap Tempo map used to convert notes to CSV. Boolean overwriteFile If true and file specified by filePath already exists it will be overwritten; if false and the file exists, exception will be thrown. NoteCsvConversionSettings settings Settings according to which notes must be converted. Pass null to use default settings. Exceptions Type Condition ArgumentNullException One of the following errors occured: notes is null . tempoMap is null . ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars . ArgumentNullException filePath is null . PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). IOException An I/O error occurred while writing the file. NotSupportedException filePath is in an invalid format. UnauthorizedAccessException One of the following errors occured: This operation is not supported on the current platform. filePath specified a directory. The caller does not have the required permission."
  },
  "api/Melanchall.DryWetMidi.Tools.CsvSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.CsvSettings.html",
    "title": "Class CsvSettings | DryWetMIDI",
    "keywords": "Class CsvSettings Common CSV reading/writing settings. Inheritance Object CsvSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class CsvSettings Properties CsvDelimiter Gets or sets delimiter used to separate values in CSV representation. The default value is comma. Declaration public char CsvDelimiter { get; set; } Property Value Type Description Char IoBufferSize Gets or sets the size of buffer used to read/write CSV data. Declaration public int IoBufferSize { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException Value is zero or negative."
  },
  "api/Melanchall.DryWetMidi.Tools.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.html",
    "title": "Namespace Melanchall.DryWetMidi.Tools | DryWetMIDI",
    "keywords": "Namespace Melanchall.DryWetMidi.Tools Classes ChordsQuantizerUtilities Provides methods to quantize chords time. ChordsQuantizingSettings Settings according to which chords should be quantized. ChordsRandomizer Provides methods to randomize chords time. ChordsRandomizerUtilities Provides methods to randomize chords time. ChordsRandomizingSettings Settings according to which chords should be randomized. ChordsSplitter Provides methods for splitting chords. ChordsSplitterUtilities Provides methods for splitting chords. ConstantBounds Time range which is constant for each object to be processed. CsvConverter Provides methods to convert MIDI objects to CSV representation and vice versa. CsvSettings Common CSV reading/writing settings. LengthedObjectsQuantizingSettings<TObject> Settings according to which lengthed objects should be quantized. LengthedObjectsRandomizer<TObject, TSettings> Provides methods to randomize lengthed objects time. LengthedObjectsRandomizingSettings<TObject> Settings according to which lengthed objects should be randomized. LengthedObjectsSplitter<TObject> Provides methods for splitting lengthed objects. Merger Provides methods to merge nearby objects. More info in the Merger article. MidiFileCsvConversionSettings Settings according to which MidiFile must be read from or written to CSV representation. NoteCsvConversionSettings Settings according to which instances of the Note must be read from or written to CSV representation. NotesMerger Provides methods to merge nearby notes. NotesMergerUtilities Provides methods to merge nearby notes. NotesMergingSettings Settings according to which nearby notes should be merged. NotesQuantizerUtilities Provides methods to quantize notes time. NotesQuantizingSettings Settings according to which notes should be quantized. NotesRandomizer Provides methods to randomize notes time. NotesRandomizerUtilities Provides methods to randomize notes time. NotesRandomizingSettings Settings according to which notes should be randomized. NotesSplitter Provides methods for splitting notes. NotesSplitterUtilities Provides methods for splitting notes. ObjectsGroupResizingSettings Defines how an objects group should be resized. More info in the Resizer article. ObjectsMerger Provides merging logic for group of objects. More info in the Merger article. ObjectsMergingSettings Settings according to which merging should be performed by the Merger . More info in the Merger article. PartProcessingContext Holds all the required data to process a part by the Repeater . More info in the Repeater: Custom repeater article. QuantizedTime Holds information about new time for an object that was calculated during quantizing. Quantizer Performs quantizing of objects. The process can be adjusted in many ways by QuantizingSettings . More info in the Quantizer article. QuantizerUtilities Provides utilities to quantize objects of different types. More info in the Quantizer article. QuantizingSettings Settings according to which quantizing should be performed by the Quantizer . More info in the Quantizer article. QuantizingSettings<TObject> Settings according to which quantizing should be performed. Randomizer<TObject, TSettings> Provides methods to randomize objects time. RandomizingSettings Settings according to which randomizing should be performed by the Quantizer . RandomizingSettings<TObject> Settings according to which objects should be randomized. Repeater Provides a way to repeat MIDI data using different options. More info in the Repeater article. RepeaterUtilities Provides methods to repeat MIDI data using different options. More info in the Repeater article. RepeatingSettings Provides settings for Repeater tool. More info in the Repeater article. Resizer Provides methods to resize MIDI data in many different ways. More info in the Resizer article. SliceMidiFileMarkers Provides factory methods to create events to mark parts of split file. SliceMidiFileSettings Settings according to which a MidiFile should be split by vertical split methods. SplitByObjectsSettings Defines how a MIDI file should be split by objects using SplitByObjects(MidiFile, ObjectType, SplitByObjectsSettings, ObjectDetectionSettings) method. More info in the MIDI file splitting: SplitByObjects article. SplitFileByChannelSettings Defines how a MIDI file should be split by channel using SplitByChannel(MidiFile, SplitFileByChannelSettings) method. SplitFileByChunksSettings Defines how a MIDI file should be split by chunks using SplitByChunks(MidiFile, SplitFileByChunksSettings) method. SplitFileByNotesSettings Defines how a MIDI file should be split by notes using SplitByNotes(MidiFile, SplitFileByNotesSettings) method. Splitter Provides methods to split MIDI data in many different ways. More info in the Splitter article. TimedEventsQuantizerUtilities Provides methods to quantize timed events time. TimedEventsQuantizingSettings Settings according to which timed events should be quantized. TimedEventsRandomizer Provides methods to randomize timed events time. TimedEventsRandomizerUtilities Provides methods to randomize timed events time. TimedEventsRandomizingSettings Settings according to which timed events should be randomized. TimeProcessingInstruction Holds the new time that will be set to an object is being processed and action indicating whether quantizing should be cancelled or not. Interfaces IBounds Represents time range used in time processing tools. Enums LengthedObjectTarget Target of an object that should be processed by a tool. MidiFileCsvLayout Layout (format) of CSV data representing a MIDI file. The default value is DryWetMidi . NoteFormat The format which should be used to write notes to or read them from CSV. NoteNumberFormat Defines how a note's number is presented in CSV representation: either a number or a letter (for example, A#5). QuantizerTarget An object's target (start, end, both ends) to quantize. QuantizingBeyondFixedEndPolicy Policy which defines how a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . QuantizingBeyondZeroPolicy Policy which defines how a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . ShiftPolicy Specifies how shift for Repeater should be calculated. More info in the Repeater article. TimeProcessingAction Indicates whether an object is being processed should be skipped or not. The default value is Apply . VelocityMergingPolicy Determines how velocities should be merged during notes merging. The default value is First ."
  },
  "api/Melanchall.DryWetMidi.Tools.IBounds.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.IBounds.html",
    "title": "Interface IBounds | DryWetMIDI",
    "keywords": "Interface IBounds Represents time range used in time processing tools. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public interface IBounds Methods GetBounds(Int64, TempoMap) Gets minimum and maximum times in MIDI ticks for the current time range. Declaration Tuple<long, long> GetBounds(long time, TempoMap tempoMap) Parameters Type Name Description Int64 time Time bounds should be calculated relative to. TempoMap tempoMap Tempo map used to calculate bounds. Returns Type Description Tuple < Int64 , Int64 > Pair where first item is minimum time and the second one is maximum time."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsQuantizingSettings-1.html",
    "title": "Class LengthedObjectsQuantizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsQuantizingSettings<TObject> Settings according to which lengthed objects should be quantized. Inheritance Object QuantizingSettings <TObject> LengthedObjectsQuantizingSettings<TObject> ChordsQuantizingSettings NotesQuantizingSettings Inherited Members QuantizingSettings<TObject>.DistanceCalculationType QuantizingSettings<TObject>.QuantizingLevel QuantizingSettings<TObject>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public abstract class LengthedObjectsQuantizingSettings<TObject> : QuantizingSettings<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject Properties FixOppositeEnd Gets or sets a value indicating whether an opposite side of an object should be fixed or not. The default value is false . Declaration public bool FixOppositeEnd { get; set; } Property Value Type Description Boolean Remarks When an object's side is fixed the length can be changed during quantizing. LengthType Gets or sets the type of an object's length that should be kept in case the opposite side is not fixed. The default value is Midi . Declaration public TimeSpanType LengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondFixedEndPolicy Gets or sets policy according to which a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . Declaration public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy { get; set; } Property Value Type Description QuantizingBeyondFixedEndPolicy Remarks When one end of an object is fixed, there is a chance that the object's opposite end will be quantized in a such way that the object will be reversed resulting to negative length. This policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondZeroPolicy Gets or sets policy according to which a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . Declaration public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy { get; set; } Property Value Type Description QuantizingBeyondZeroPolicy Remarks When the start time of an object is not fixed, there is a chance that the object's end time will be quantized in a such way that the start time will be negative due to the object is moved to the left. Negative time is invalid so this policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingTarget Gets or sets the side of an object that should be quantized. The default value is Start . Declaration public LengthedObjectTarget QuantizingTarget { get; set; } Property Value Type Description LengthedObjectTarget Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizer-2.html",
    "title": "Class LengthedObjectsRandomizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class LengthedObjectsRandomizer<TObject, TSettings> Provides methods to randomize lengthed objects time. Inheritance Object Randomizer <TObject, TSettings> LengthedObjectsRandomizer<TObject, TSettings> ChordsRandomizer NotesRandomizer Inherited Members Randomizer<TObject, TSettings>.RandomizeInternal(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) Randomizer<TObject, TSettings>.SetObjectTime(TObject, Int64, TSettings) Randomizer<TObject, TSettings>.OnObjectRandomizing(TObject, Int64, TSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public abstract class LengthedObjectsRandomizer<TObject, TSettings> : Randomizer<TObject, TSettings> where TObject : ILengthedObject where TSettings : LengthedObjectsRandomizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be randomized. Declaration protected sealed override long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.GetObjectTime(TObject, TSettings) OnObjectRandomizing(TObject, Int64, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.OnObjectRandomizing(TObject, System.Int64, TSettings) Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. Randomize(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizes objects time using the specified bounds and settings. Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public void Randomize(IEnumerable<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings = null) Parameters Type Name Description IEnumerable <TObject> objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TSettings settings Settings according to which objects should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . bounds is null . tempoMap is null . SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected sealed override void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after randomizing. TSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Randomizer<TObject, TSettings>.SetObjectTime(TObject, System.Int64, TSettings)"
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsRandomizingSettings-1.html",
    "title": "Class LengthedObjectsRandomizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsRandomizingSettings<TObject> Settings according to which lengthed objects should be randomized. Inheritance Object RandomizingSettings <TObject> LengthedObjectsRandomizingSettings<TObject> ChordsRandomizingSettings NotesRandomizingSettings Inherited Members RandomizingSettings<TObject>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public abstract class LengthedObjectsRandomizingSettings<TObject> : RandomizingSettings<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject Properties FixOppositeEnd Gets or sets a value indicating whether an opposite side of an object should be fixed or not. The default value is false . Declaration public bool FixOppositeEnd { get; set; } Property Value Type Description Boolean Remarks When an object's side is fixed the length can be changed during randomizing. RandomizingTarget Gets or sets the side of an object that should be randomized. The default value is Start . Declaration public LengthedObjectTarget RandomizingTarget { get; set; } Property Value Type Description LengthedObjectTarget Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectsSplitter-1.html",
    "title": "Class LengthedObjectsSplitter<TObject> | DryWetMIDI",
    "keywords": "Class LengthedObjectsSplitter<TObject> Provides methods for splitting lengthed objects. Inheritance Object LengthedObjectsSplitter<TObject> ChordsSplitter NotesSplitter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public abstract class LengthedObjectsSplitter<TObject> where TObject : ILengthedObject Type Parameters Name Description TObject The type of objects to split. Methods SplitAtDistance(IEnumerable<TObject>, ITimeSpan, LengthedObjectTarget, TempoMap) Splits objects at the specified distance from an object's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public IEnumerable<TObject> SplitAtDistance(IEnumerable<TObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitAtDistance(IEnumerable<TObject>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Splits objects by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public IEnumerable<TObject> SplitAtDistance(IEnumerable<TObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitByGrid(IEnumerable<TObject>, IGrid, TempoMap) Splits objects by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public IEnumerable<TObject> SplitByGrid(IEnumerable<TObject> objects, IGrid grid, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. IGrid grid Grid to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be split and will be returned as null s. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . grid is null . tempoMap is null . SplitByPartsNumber(IEnumerable<TObject>, Int32, TimeSpanType, TempoMap) Splits objects into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public IEnumerable<TObject> SplitByPartsNumber(IEnumerable<TObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be split and will be returned as null s. If an object has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitByStep(IEnumerable<TObject>, ITimeSpan, TempoMap) Splits objects by the specified step so every object will be split at points equally distanced from each other starting from the object's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public IEnumerable<TObject> SplitByStep(IEnumerable<TObject> objects, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description IEnumerable <TObject> objects Objects to split. ITimeSpan step Step to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable <TObject> Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls, objects with zero length and objects with length smaller than step will not be split and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException One of the following errors occurred: objects is null . step is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.LengthedObjectTarget.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.LengthedObjectTarget.html",
    "title": "Enum LengthedObjectTarget | DryWetMIDI",
    "keywords": "Enum LengthedObjectTarget Target of an object that should be processed by a tool. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum LengthedObjectTarget Fields Name Description End End time of a lengthed object. Start Start time of a lengthed object."
  },
  "api/Melanchall.DryWetMidi.Tools.Merger.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Merger.html",
    "title": "Class Merger | DryWetMIDI",
    "keywords": "Class Merger Provides methods to merge nearby objects. More info in the Merger article. Inheritance Object Merger Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class Merger Methods MergeObjects(MidiFile, ObjectType, ObjectsMergingSettings, ObjectDetectionSettings) Merges nearby objects within the specified MidiFile . Declaration public static void MergeObjects(this MidiFile midiFile, ObjectType objectType, ObjectsMergingSettings settings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to merge objects within. ObjectType objectType Combination of desired types of objects to merge. ObjectsMergingSettings settings Settings according to which merging process should be done. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException midiFile is null . MergeObjects(TrackChunk, ObjectType, TempoMap, ObjectsMergingSettings, ObjectDetectionSettings) Merges nearby objects within the specified TrackChunk . Declaration public static void MergeObjects(this TrackChunk trackChunk, ObjectType objectType, TempoMap tempoMap, ObjectsMergingSettings settings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to merge objects within. ObjectType objectType Combination of desired types of objects to merge. TempoMap tempoMap Tempo map used to calculate distances between objects. ObjectsMergingSettings settings Settings according to which merging process should be done. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . MergeObjects(IEnumerable<TrackChunk>, ObjectType, TempoMap, ObjectsMergingSettings, ObjectDetectionSettings) Merges nearby objects within the specified collection of TrackChunk . Declaration public static void MergeObjects(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, TempoMap tempoMap, ObjectsMergingSettings settings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to merge objects within. ObjectType objectType Combination of desired types of objects to merge. TempoMap tempoMap Tempo map used to calculate distances between objects. ObjectsMergingSettings settings Settings according to which merging process should be done. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . MergeObjects(IEnumerable<ITimedObject>, TempoMap, ObjectsMergingSettings) Merges nearby objects. Declaration public static IEnumerable<ITimedObject> MergeObjects(this IEnumerable<ITimedObject> objects, TempoMap tempoMap, ObjectsMergingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects that should be merged. TempoMap tempoMap Tempo map used to calculate distances between objects. ObjectsMergingSettings settings Settings according to which merging process should be done. Returns Type Description IEnumerable < ITimedObject > Collection of new objects that are result of merging of objects . Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.MidiFileCsvConversionSettings.html",
    "title": "Class MidiFileCsvConversionSettings | DryWetMIDI",
    "keywords": "Class MidiFileCsvConversionSettings Settings according to which MidiFile must be read from or written to CSV representation. Inheritance Object MidiFileCsvConversionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class MidiFileCsvConversionSettings Properties CsvLayout Gets or sets layout of CSV representation of MidiFile . The default value is DryWetMidi . Declaration public MidiFileCsvLayout CsvLayout { get; set; } Property Value Type Description MidiFileCsvLayout Remarks At now there are two layouts: DryWetMidi and MidiCsv which produces slightly different CSV representations. The default value is DryWetMidi that gives more compact and more human readable CSV data. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. CsvSettings Gets common CSV settings. Declaration public CsvSettings CsvSettings { get; } Property Value Type Description CsvSettings NoteFormat Gets or sets the format which should be used to write notes to or read them from CSV. The default value is Events . Declaration public NoteFormat NoteFormat { get; set; } Property Value Type Description NoteFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteLengthType Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to write to or read from CSV. The default value is Midi . Declaration public TimeSpanType NoteLengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteNumberFormat Gets or sets the format which should be used to write a note's number to or read it from CSV. The default value is NoteNumber . Declaration public NoteNumberFormat NoteNumberFormat { get; set; } Property Value Type Description NoteNumberFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TimeType Gets or sets format of timestamps inside CSV representation. The default value is Midi Declaration public TimeSpanType TimeType { get; set; } Property Value Type Description TimeSpanType Remarks Note that it is recommended to use Midi if you use MidiCsv CSV layout to ensure produced CSV data can be read by other readers that supports format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.MidiFileCsvLayout.html",
    "title": "Enum MidiFileCsvLayout | DryWetMIDI",
    "keywords": "Enum MidiFileCsvLayout Layout (format) of CSV data representing a MIDI file. The default value is DryWetMidi . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum MidiFileCsvLayout Fields Name Description DryWetMidi Format used by DryWetMIDI which gives more compact and human readable CSV representation. MidiCsv Format used by midicsv (http://www.fourmilab.ch/webtools/midicsv/) program."
  },
  "api/Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteCsvConversionSettings.html",
    "title": "Class NoteCsvConversionSettings | DryWetMIDI",
    "keywords": "Class NoteCsvConversionSettings Settings according to which instances of the Note must be read from or written to CSV representation. Inheritance Object NoteCsvConversionSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class NoteCsvConversionSettings Properties CsvSettings Gets common CSV settings. Declaration public CsvSettings CsvSettings { get; } Property Value Type Description CsvSettings NoteLengthType Gets or sets the type of a note length (metric, bar/beat and so on) which should be used to write to or read from CSV. The default value is Midi . Declaration public TimeSpanType NoteLengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. NoteNumberFormat Gets or sets the format which should be used to write a note's number to or read it from CSV. The default value is NoteNumber . Declaration public NoteNumberFormat NoteNumberFormat { get; set; } Property Value Type Description NoteNumberFormat Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. TimeType Gets or sets format of timestamps inside CSV representation. The default value is Midi Declaration public TimeSpanType TimeType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.NoteFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteFormat.html",
    "title": "Enum NoteFormat | DryWetMIDI",
    "keywords": "Enum NoteFormat The format which should be used to write notes to or read them from CSV. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteFormat Fields Name Description Events Notes are presented in CSV as Note On/Note Off events. Note Notes are presented in CSV as note objects."
  },
  "api/Melanchall.DryWetMidi.Tools.NoteNumberFormat.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NoteNumberFormat.html",
    "title": "Enum NoteNumberFormat | DryWetMIDI",
    "keywords": "Enum NoteNumberFormat Defines how a note's number is presented in CSV representation: either a number or a letter (for example, A#5). Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum NoteNumberFormat Fields Name Description Letter A note's number is presented as a letter. NoteNumber A note's number is presented as just a number."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMerger.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMerger.html",
    "title": "Class NotesMerger | DryWetMIDI",
    "keywords": "Class NotesMerger Provides methods to merge nearby notes. Inheritance Object NotesMerger Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public sealed class NotesMerger Methods Merge(IEnumerable<Note>, TempoMap, NotesMergingSettings) Merges nearby notes in the specified collection of notes. Declaration public IEnumerable<Note> Merge(IEnumerable<Note> notes, TempoMap tempoMap, NotesMergingSettings settings = null) Parameters Type Name Description IEnumerable < Note > notes Collection of notes to merge notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Returns Type Description IEnumerable < Note > Collection of notes which produced from the input one by merging nearby notes. Exceptions Type Condition ArgumentNullException notes is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMergerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMergerUtilities.html",
    "title": "Class NotesMergerUtilities | DryWetMIDI",
    "keywords": "Class NotesMergerUtilities Provides methods to merge nearby notes. Inheritance Object NotesMergerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public static class NotesMergerUtilities Methods MergeNotes(MidiFile, NotesMergingSettings) Merges nearby notes in the specified MidiFile . Declaration [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public static void MergeNotes(this MidiFile midiFile, NotesMergingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to merge nearby notes in. NotesMergingSettings settings Settings according to which notes should be merged. Exceptions Type Condition ArgumentNullException midiFile is null . MergeNotes(TrackChunk, TempoMap, NotesMergingSettings) Merges nearby notes in the specified TrackChunk . Declaration [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public static void MergeNotes(this TrackChunk trackChunk, TempoMap tempoMap, NotesMergingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to merge nearby notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . MergeNotes(IEnumerable<TrackChunk>, TempoMap, NotesMergingSettings) Merges nearby notes in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public static void MergeNotes(this IEnumerable<TrackChunk> trackChunks, TempoMap tempoMap, NotesMergingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to merge nearby notes in. TempoMap tempoMap Tempo map used to calculate distances between notes. NotesMergingSettings settings Settings according to which notes should be merged. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesMergingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesMergingSettings.html",
    "title": "Class NotesMergingSettings | DryWetMIDI",
    "keywords": "Class NotesMergingSettings Settings according to which nearby notes should be merged. Inheritance Object NotesMergingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS17: Use Merger class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs17.\")] public sealed class NotesMergingSettings Properties Filter Gets or sets a predicate to filter notes out. If predicate returns true , a note will be processed; if false - it won't. If the property set to null , all notes will be processed. Declaration public Predicate<Note> Filter { get; set; } Property Value Type Description Predicate < Note > NoteDetectionSettings Gets or sets settings which define how notes should be detected and built. You can set it to null to use default settings. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings OffVelocityMergingPolicy Gets or sets a policy which determines how OffVelocity of notes should be merged. The default value is Last . Declaration public VelocityMergingPolicy OffVelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Tolerance Gets or sets maximum distance between two notes to consider them as nearby. The default value is time span of zero length. Declaration public ITimeSpan Tolerance { get; set; } Property Value Type Description ITimeSpan Exceptions Type Condition ArgumentNullException value is null . VelocityMergingPolicy Gets or sets a policy which determines how Velocity of notes should be merged. The default value is First . Declaration public VelocityMergingPolicy VelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesQuantizerUtilities.html",
    "title": "Class NotesQuantizerUtilities | DryWetMIDI",
    "keywords": "Class NotesQuantizerUtilities Provides methods to quantize notes time. Inheritance Object NotesQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class NotesQuantizerUtilities Methods QuantizeNotes(MidiFile, IGrid, NotesQuantizingSettings) Quantizes notes contained in the specified MidiFile . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeNotes(this MidiFile midiFile, IGrid grid, NotesQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize notes in. IGrid grid Grid to quantize objects by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . InvalidOperationException One of the following errors occured: Note is going to be moved beyond zero. Note's end is going to be moved beyond the note's fixed end. QuantizeNotes(TrackChunk, IGrid, TempoMap, NotesQuantizingSettings) Quantizes notes contained in the specified TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeNotes(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize notes in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . InvalidOperationException One of the following errors occured: Note is going to be moved beyond zero. Note's end is going to be moved beyond the note's fixed end. QuantizeNotes(IEnumerable<TrackChunk>, IGrid, TempoMap, NotesQuantizingSettings) Quantizes notes contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeNotes(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NotesQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize notes in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. NotesQuantizingSettings settings Settings according to which notes should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . InvalidOperationException One of the following errors occured: Note is going to be moved beyond zero. Note's end is going to be moved beyond the note's fixed end."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesQuantizingSettings.html",
    "title": "Class NotesQuantizingSettings | DryWetMIDI",
    "keywords": "Class NotesQuantizingSettings Settings according to which notes should be quantized. Inheritance Object QuantizingSettings < Note > LengthedObjectsQuantizingSettings < Note > NotesQuantizingSettings Inherited Members LengthedObjectsQuantizingSettings<Note>.LengthType LengthedObjectsQuantizingSettings<Note>.QuantizingTarget LengthedObjectsQuantizingSettings<Note>.QuantizingBeyondZeroPolicy LengthedObjectsQuantizingSettings<Note>.QuantizingBeyondFixedEndPolicy LengthedObjectsQuantizingSettings<Note>.FixOppositeEnd QuantizingSettings<Note>.DistanceCalculationType QuantizingSettings<Note>.QuantizingLevel QuantizingSettings<Note>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public class NotesQuantizingSettings : LengthedObjectsQuantizingSettings<Note> Properties NoteDetectionSettings Gets or sets settings which define how notes should be detected and built. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizer.html",
    "title": "Class NotesRandomizer | DryWetMIDI",
    "keywords": "Class NotesRandomizer Provides methods to randomize notes time. Inheritance Object Randomizer < Note , NotesRandomizingSettings > LengthedObjectsRandomizer < Note , NotesRandomizingSettings > NotesRandomizer Inherited Members LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.Randomize(IEnumerable<Note>, IBounds, TempoMap, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.GetObjectTime(Note, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.SetObjectTime(Note, Int64, NotesRandomizingSettings) LengthedObjectsRandomizer<Note, NotesRandomizingSettings>.OnObjectRandomizing(Note, Int64, NotesRandomizingSettings) Randomizer<Note, NotesRandomizingSettings>.RandomizeInternal(IEnumerable<Note>, IBounds, TempoMap, NotesRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class NotesRandomizer : LengthedObjectsRandomizer<Note, NotesRandomizingSettings>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizerUtilities.html",
    "title": "Class NotesRandomizerUtilities | DryWetMIDI",
    "keywords": "Class NotesRandomizerUtilities Provides methods to randomize notes time. Inheritance Object NotesRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static class NotesRandomizerUtilities Methods RandomizeNotes(MidiFile, IBounds, NotesRandomizingSettings) Randomizes notes contained in the specified MidiFile . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeNotes(this MidiFile midiFile, IBounds bounds, NotesRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize notes in. IBounds bounds Bounds to randomize time within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . bounds is null . RandomizeNotes(TrackChunk, IBounds, TempoMap, NotesRandomizingSettings) Randomizes notes contained in the specified TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeNotes(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize notes in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . bounds is null . tempoMap is null . RandomizeNotes(IEnumerable<TrackChunk>, IBounds, TempoMap, NotesRandomizingSettings) Randomizes notes contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeNotes(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, NotesRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize notes in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. NotesRandomizingSettings settings Settings according to which notes should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . bounds is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.NotesRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesRandomizingSettings.html",
    "title": "Class NotesRandomizingSettings | DryWetMIDI",
    "keywords": "Class NotesRandomizingSettings Settings according to which notes should be randomized. Inheritance Object RandomizingSettings < Note > LengthedObjectsRandomizingSettings < Note > NotesRandomizingSettings Inherited Members LengthedObjectsRandomizingSettings<Note>.RandomizingTarget LengthedObjectsRandomizingSettings<Note>.FixOppositeEnd RandomizingSettings<Note>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class NotesRandomizingSettings : LengthedObjectsRandomizingSettings<Note> Properties NoteDetectionSettings Gets or sets settings which define how notes should be detected and built. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesSplitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesSplitter.html",
    "title": "Class NotesSplitter | DryWetMIDI",
    "keywords": "Class NotesSplitter Provides methods for splitting notes. Inheritance Object LengthedObjectsSplitter < Note > NotesSplitter Inherited Members LengthedObjectsSplitter<Note>.SplitByStep(IEnumerable<Note>, ITimeSpan, TempoMap) LengthedObjectsSplitter<Note>.SplitByPartsNumber(IEnumerable<Note>, Int32, TimeSpanType, TempoMap) LengthedObjectsSplitter<Note>.SplitByGrid(IEnumerable<Note>, IGrid, TempoMap) LengthedObjectsSplitter<Note>.SplitAtDistance(IEnumerable<Note>, ITimeSpan, LengthedObjectTarget, TempoMap) LengthedObjectsSplitter<Note>.SplitAtDistance(IEnumerable<Note>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public sealed class NotesSplitter : LengthedObjectsSplitter<Note>"
  },
  "api/Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.NotesSplitterUtilities.html",
    "title": "Class NotesSplitterUtilities | DryWetMIDI",
    "keywords": "Class NotesSplitterUtilities Provides methods for splitting notes. Inheritance Object NotesSplitterUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static class NotesSplitterUtilities Methods SplitNotesAtDistance(MidiFile, ITimeSpan, LengthedObjectTarget, NoteDetectionSettings) Splits notes contained in the specified MidiFile at the specified distance from a note's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this MidiFile midiFile, ITimeSpan distance, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . distance is null . InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(MidiFile, Double, TimeSpanType, LengthedObjectTarget, NoteDetectionSettings) Splits notes contained in the specified MidiFile by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this MidiFile midiFile, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitNotesAtDistance(TrackChunk, ITimeSpan, LengthedObjectTarget, TempoMap, NoteDetectionSettings) Splits notes contained in the specified TrackChunk at the specified distance from a note's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this TrackChunk trackChunk, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(TrackChunk, Double, TimeSpanType, LengthedObjectTarget, TempoMap, NoteDetectionSettings) Splits notes contained in the specified TrackChunk by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this TrackChunk trackChunk, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitNotesAtDistance(IEnumerable<TrackChunk>, ITimeSpan, LengthedObjectTarget, TempoMap, NoteDetectionSettings) Splits notes contained in the specified collection of TrackChunk at the specified distance from a note's start or end. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this IEnumerable<TrackChunk> trackChunks, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. ITimeSpan distance Distance to split notes at. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitNotesAtDistance(IEnumerable<TrackChunk>, Double, TimeSpanType, LengthedObjectTarget, TempoMap, NoteDetectionSettings) Splits notes contained in the specified collection of TrackChunk by the specified ratio of a note's length measuring it from the note's start or end. For example, 0.5 means splitting at the center of a note. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesAtDistance(this IEnumerable<TrackChunk> trackChunks, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. Double ratio Ratio of a note's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type a note's length should be processed according to. LengthedObjectTarget from Point of a note distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitNotesByGrid(MidiFile, IGrid, NoteDetectionSettings) Splits notes contained in the specified MidiFile by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByGrid(this MidiFile midiFile, IGrid grid, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. IGrid grid Grid to split notes by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException grid is null . SplitNotesByGrid(TrackChunk, IGrid, TempoMap, NoteDetectionSettings) Splits notes contained in the specified TrackChunk by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByGrid(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. IGrid grid Grid to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . SplitNotesByGrid(IEnumerable<TrackChunk>, IGrid, TempoMap, NoteDetectionSettings) Splits notes contained in the specified collection of TrackChunk by the specified grid. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByGrid(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. IGrid grid Grid to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . SplitNotesByPartsNumber(MidiFile, Int32, TimeSpanType, NoteDetectionSettings) Splits notes contained in the specified MidiFile into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByPartsNumber(this MidiFile midiFile, int partsNumber, TimeSpanType lengthType, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks If a note has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByPartsNumber(TrackChunk, Int32, TimeSpanType, TempoMap, NoteDetectionSettings) Splits notes contained in the specified TrackChunk into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByPartsNumber(this TrackChunk trackChunk, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks If a note has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByPartsNumber(IEnumerable<TrackChunk>, Int32, TimeSpanType, TempoMap, NoteDetectionSettings) Splits notes contained in the specified collection of TrackChunk into the specified number of parts of the equal length. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByPartsNumber(this IEnumerable<TrackChunk> trackChunks, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. Int32 partsNumber The number of parts to split notes into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks If a note has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitNotesByStep(MidiFile, ITimeSpan, NoteDetectionSettings) Splits notes contained in the specified MidiFile by the specified step so every note will be split at points equally distanced from each other starting from the note's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByStep(this MidiFile midiFile, ITimeSpan step, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split notes in. ITimeSpan step Step to split notes by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks Notes with zero length and notes with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . step is null . SplitNotesByStep(TrackChunk, ITimeSpan, TempoMap, NoteDetectionSettings) Splits notes contained in the specified TrackChunk by the specified step so every note will be split at points equally distanced from each other starting from the note's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByStep(this TrackChunk trackChunk, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split notes in. ITimeSpan step Step to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks Notes with zero length and notes with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . step is null . tempoMap is null . SplitNotesByStep(IEnumerable<TrackChunk>, ITimeSpan, TempoMap, NoteDetectionSettings) Splits notes contained in the specified collection of TrackChunk by the specified step so every note will be split at points equally distanced from each other starting from the note's start time. Declaration [Obsolete(\"OBS12: Use Splitter class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs12.\")] public static void SplitNotesByStep(this IEnumerable<TrackChunk> trackChunks, ITimeSpan step, TempoMap tempoMap, NoteDetectionSettings noteDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to split notes in. ITimeSpan step Step to split notes by. TempoMap tempoMap Tempo map used to calculate times to split by. NoteDetectionSettings noteDetectionSettings Settings accoridng to which notes should be detected and built. Remarks Notes with zero length and notes with length smaller than step will not be split. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . step is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.ObjectsGroupResizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ObjectsGroupResizingSettings.html",
    "title": "Class ObjectsGroupResizingSettings | DryWetMIDI",
    "keywords": "Class ObjectsGroupResizingSettings Defines how an objects group should be resized. More info in the Resizer article. Inheritance Object ObjectsGroupResizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class ObjectsGroupResizingSettings Properties DistanceCalculationType Gets or sets the type of distance calculations. The default value is Midi . Declaration public TimeSpanType DistanceCalculationType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. See Also Resizer"
  },
  "api/Melanchall.DryWetMidi.Tools.ObjectsMerger.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ObjectsMerger.html",
    "title": "Class ObjectsMerger | DryWetMIDI",
    "keywords": "Class ObjectsMerger Provides merging logic for group of objects. More info in the Merger article. Inheritance Object ObjectsMerger Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class ObjectsMerger Constructors ObjectsMerger(ILengthedObject) Initializes a new instance of the ObjectsMerger with the specified first object. Declaration public ObjectsMerger(ILengthedObject obj) Parameters Type Name Description ILengthedObject obj First object of the current group of objects that should be merged. Fields _objects Collection of objects that should be merged. Declaration protected readonly List<ILengthedObject> _objects Field Value Type Description List < ILengthedObject > _objectsType The type of objects in the current group. Declaration protected readonly ObjectType _objectsType Field Value Type Description ObjectType Properties EndTime Gets the end time of the last object in the current group. Declaration public long EndTime { get; } Property Value Type Description Int64 Methods AddObject(ILengthedObject) Adds the specified object to the current group. Declaration public void AddObject(ILengthedObject obj) Parameters Type Name Description ILengthedObject obj Object to add to the current group CanAddObject(ILengthedObject, TempoMap, ObjectsMergingSettings) Returns a value indicating whether the specified object can be added to the current group or not. In other words, the method determines if the object should be merged with the group. Declaration public virtual bool CanAddObject(ILengthedObject obj, TempoMap tempoMap, ObjectsMergingSettings settings) Parameters Type Name Description ILengthedObject obj Object to check. TempoMap tempoMap Tempo map used for merging. ObjectsMergingSettings settings Settings according to which merging process should be done. Returns Type Description Boolean true if the obj should be added to the current group; otherwise, false . MergeObjects(ObjectsMergingSettings) Merges objects within the current group into single object. Declaration public virtual ILengthedObject MergeObjects(ObjectsMergingSettings settings) Parameters Type Name Description ObjectsMergingSettings settings Settings according to which merging process should be done. Returns Type Description ILengthedObject A new object that is result of merging objects within the current group."
  },
  "api/Melanchall.DryWetMidi.Tools.ObjectsMergingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ObjectsMergingSettings.html",
    "title": "Class ObjectsMergingSettings | DryWetMIDI",
    "keywords": "Class ObjectsMergingSettings Settings according to which merging should be performed by the Merger . More info in the Merger article. Inheritance Object ObjectsMergingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class ObjectsMergingSettings Properties Filter Gets or sets a predicate to filter objects out. If predicate returns true , an object will be processed; if false - it won't. If the property set to null , (default value) all objects will be processed. Declaration public Predicate<ITimedObject> Filter { get; set; } Property Value Type Description Predicate < ITimedObject > ObjectsMergerFactory Gets or sets a factory method to create objects merger (see ObjectsMerger ) to implement custom merging logic. Declaration public Func<ILengthedObject, ObjectsMerger> ObjectsMergerFactory { get; set; } Property Value Type Description Func < ILengthedObject , ObjectsMerger > OffVelocityMergingPolicy Gets or sets a policy which determines how OffVelocity of notes should be merged. The default value is Last . Declaration public VelocityMergingPolicy OffVelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. Tolerance Gets or sets maximum distance between two objects to consider them as nearby. The default value is time span of zero length. Declaration public ITimeSpan Tolerance { get; set; } Property Value Type Description ITimeSpan Exceptions Type Condition ArgumentNullException value is null . VelocityMergingPolicy Gets or sets a policy which determines how Velocity of notes should be merged. The default value is First . Declaration public VelocityMergingPolicy VelocityMergingPolicy { get; set; } Property Value Type Description VelocityMergingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. See Also Merger"
  },
  "api/Melanchall.DryWetMidi.Tools.PartProcessingContext.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.PartProcessingContext.html",
    "title": "Class PartProcessingContext | DryWetMIDI",
    "keywords": "Class PartProcessingContext Holds all the required data to process a part by the Repeater . More info in the Repeater: Custom repeater article. Inheritance Object PartProcessingContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class PartProcessingContext Properties PartIndex Gets the index of a part (zero means first new part). Declaration public int PartIndex { get; } Property Value Type Description Int32 PartObjects Gets the objects of a new part that should be appended to the previous ones. Declaration public IList<ITimedObject> PartObjects { get; } Property Value Type Description IList < ITimedObject > Settings Gets the settings used to perform the process. Declaration public RepeatingSettings Settings { get; } Property Value Type Description RepeatingSettings Shift Gets calculated shift value to apply to a part. Declaration public long Shift { get; } Property Value Type Description Int64 SourceObjects Gets source objects that should be repeated. Declaration public IEnumerable<ITimedObject> SourceObjects { get; } Property Value Type Description IEnumerable < ITimedObject > SourceTempoMap Gets the source tempo map. Declaration public TempoMap SourceTempoMap { get; } Property Value Type Description TempoMap"
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizedTime.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizedTime.html",
    "title": "Class QuantizedTime | DryWetMIDI",
    "keywords": "Class QuantizedTime Holds information about new time for an object that was calculated during quantizing. Inheritance Object QuantizedTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class QuantizedTime Properties ConvertedDistanceToGridTime Gets the distance between an object's current time and the nearest grid time as time span of the type specified by DistanceCalculationType . Declaration public ITimeSpan ConvertedDistanceToGridTime { get; } Property Value Type Description ITimeSpan DistanceToGridTime Gets the distance between an object's current time and the nearest grid time. Declaration public long DistanceToGridTime { get; } Property Value Type Description Int64 GridTime Gets a grid time that was selected for an object as the nearest one. Declaration public long GridTime { get; } Property Value Type Description Int64 NewTime Gets the new time of an object. Declaration public long NewTime { get; } Property Value Type Description Int64 Shift Gets the distance an object is going to be moved toward the new time. Declaration public ITimeSpan Shift { get; } Property Value Type Description ITimeSpan"
  },
  "api/Melanchall.DryWetMidi.Tools.Quantizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Quantizer.html",
    "title": "Class Quantizer | DryWetMIDI",
    "keywords": "Class Quantizer Performs quantizing of objects. The process can be adjusted in many ways by QuantizingSettings . More info in the Quantizer article. Inheritance Object Quantizer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class Quantizer Methods OnObjectQuantizing(ITimedObject, QuantizedTime, IGrid, LengthedObjectTarget, TempoMap, QuantizingSettings) Performs additional actions before the new time will be set to an object after search for nearest grid time. Declaration protected virtual TimeProcessingInstruction OnObjectQuantizing(ITimedObject obj, QuantizedTime quantizedTime, IGrid grid, LengthedObjectTarget target, TempoMap tempoMap, QuantizingSettings settings) Parameters Type Name Description ITimedObject obj Object to set new time for. QuantizedTime quantizedTime Holds information about new time for obj . IGrid grid Grid to quantize obj by. LengthedObjectTarget target Target time (start or end) to update. TempoMap tempoMap Tempo map used to quantize obj . QuantizingSettings settings Settings according to which quantizing performed. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. OnObjectRandomizing(ITimedObject, Int64, LengthedObjectTarget, TempoMap, QuantizingSettings) Performs additional actions before the new time will be set to an object after search for random time within bounds defined by Bounds . Declaration protected virtual TimeProcessingInstruction OnObjectRandomizing(ITimedObject obj, long time, LengthedObjectTarget target, TempoMap tempoMap, QuantizingSettings settings) Parameters Type Name Description ITimedObject obj Object to set new time for. Int64 time New time for obj . LengthedObjectTarget target Target time (start or end) to update. TempoMap tempoMap Tempo map used to quantize obj . QuantizingSettings settings Settings according to which quantizing performed. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Quantize(IEnumerable<ITimedObject>, IGrid, TempoMap, QuantizingSettings) Quantizes objects using the specified grid. Declaration public void Quantize(IEnumerable<ITimedObject> objects, IGrid grid, TempoMap tempoMap, QuantizingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to quantize. IGrid grid Grid to use for quantizing. TempoMap tempoMap Tempo map used to perform time and length conversions. QuantizingSettings settings Settings according to which objects should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . grid is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizerTarget.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizerTarget.html",
    "title": "Enum QuantizerTarget | DryWetMIDI",
    "keywords": "Enum QuantizerTarget An object's target (start, end, both ends) to quantize. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Flags] public enum QuantizerTarget Fields Name Description End End time of an object. Start Start time of an object."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizerUtilities.html",
    "title": "Class QuantizerUtilities | DryWetMIDI",
    "keywords": "Class QuantizerUtilities Provides utilities to quantize objects of different types. More info in the Quantizer article. Inheritance Object QuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class QuantizerUtilities Methods QuantizeObjects(MidiFile, ObjectType, IGrid, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a MidiFile using the specified grid and default quantizer. Declaration public static void QuantizeObjects(this MidiFile midiFile, ObjectType objectType, IGrid grid, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize objects within. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . QuantizeObjects(MidiFile, Quantizer, ObjectType, IGrid, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a MidiFile using the specified grid and custom quantizer (see Quantizer: Custom quantizing article). Declaration public static void QuantizeObjects(this MidiFile midiFile, Quantizer quantizer, ObjectType objectType, IGrid grid, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize objects within. Quantizer quantizer Quantizer to quantize objects with. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . quantizer is null . grid is null . QuantizeObjects(TrackChunk, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a TrackChunk using the specified grid and default quantizer. Declaration public static void QuantizeObjects(this TrackChunk trackChunk, ObjectType objectType, IGrid grid, TempoMap tempoMap, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize objects within. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. TempoMap tempoMap Tempo map used to perform time and length conversions. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . QuantizeObjects(TrackChunk, Quantizer, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a TrackChunk using the specified grid and custom quantizer (see Quantizer: Custom quantizing article). Declaration public static void QuantizeObjects(this TrackChunk trackChunk, Quantizer quantizer, ObjectType objectType, IGrid grid, TempoMap tempoMap, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize objects within. Quantizer quantizer Quantizer to quantize objects with. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. TempoMap tempoMap Tempo map used to perform time and length conversions. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . quantizer is null . grid is null . tempoMap is null . QuantizeObjects(IEnumerable<TrackChunk>, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a collection of TrackChunk using the specified grid and default quantizer. Declaration public static void QuantizeObjects(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, IGrid grid, TempoMap tempoMap, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize objects within. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. TempoMap tempoMap Tempo map used to perform time and length conversions. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . QuantizeObjects(IEnumerable<TrackChunk>, Quantizer, ObjectType, IGrid, TempoMap, QuantizingSettings, ObjectDetectionSettings) Quantizes objects within a collection of TrackChunk using the specified grid and custom quantizer (see Quantizer: Custom quantizing article). Declaration public static void QuantizeObjects(this IEnumerable<TrackChunk> trackChunks, Quantizer quantizer, ObjectType objectType, IGrid grid, TempoMap tempoMap, QuantizingSettings quantizerSettings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize objects within. Quantizer quantizer Quantizer to quantize objects with. ObjectType objectType The type of objects to quantize. IGrid grid Grid to use for quantizing. TempoMap tempoMap Tempo map used to perform time and length conversions. QuantizingSettings quantizerSettings Settings according to which objects should be quantized. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . quantizer is null . grid is null . tempoMap is null . See Also Quantizer"
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondFixedEndPolicy.html",
    "title": "Enum QuantizingBeyondFixedEndPolicy | DryWetMIDI",
    "keywords": "Enum QuantizingBeyondFixedEndPolicy Policy which defines how a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum QuantizingBeyondFixedEndPolicy Fields Name Description Abort Throw an exception aborting quantizing. CollapseAndFix Object will be collapsed and fixed at fixed end's time. CollapseAndMove Object will be collapsed and moved to the new time calculated by a quantizer. Skip Object will be skipped so quantizing will not be applied to it. SwapEnds Ends of an object will be swapped."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingBeyondZeroPolicy.html",
    "title": "Enum QuantizingBeyondZeroPolicy | DryWetMIDI",
    "keywords": "Enum QuantizingBeyondZeroPolicy Policy which defines how a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum QuantizingBeyondZeroPolicy Fields Name Description Abort Throw an exception aborting quantizing. FixAtZero Object will be shrinked due to end time quantizing and fixed at zero. Skip Object will be skipped so quantizing will not be applied to it."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingSettings.html",
    "title": "Class QuantizingSettings | DryWetMIDI",
    "keywords": "Class QuantizingSettings Settings according to which quantizing should be performed by the Quantizer . More info in the Quantizer article. Inheritance Object QuantizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class QuantizingSettings Properties DistanceCalculationType Gets or sets the type of distance calculation used to find a time to snap an object to. The default value is Midi . Declaration public TimeSpanType DistanceCalculationType { get; set; } Property Value Type Description TimeSpanType Filter Gets or sets a predicate to filter objects that should be quantized. Use null if all objects should be processed. Declaration public Predicate<ITimedObject> Filter { get; set; } Property Value Type Description Predicate < ITimedObject > FixOppositeEnd Gets or sets a value indicating whether an opposite side of an object should be fixed or not. The default value is false . Declaration public bool FixOppositeEnd { get; set; } Property Value Type Description Boolean Remarks When an object's side is fixed the length can be changed during quantizing. LengthType Gets or sets the type of an object's length that should be kept in case the opposite side is not fixed. The default value is Midi . Declaration public TimeSpanType LengthType { get; set; } Property Value Type Description TimeSpanType Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondFixedEndPolicy Gets or sets policy according to which a quantizer should act in case of object's side is going to be moved beyond an opposite one that is fixed. The default value is CollapseAndFix . Declaration public QuantizingBeyondFixedEndPolicy QuantizingBeyondFixedEndPolicy { get; set; } Property Value Type Description QuantizingBeyondFixedEndPolicy Remarks When one end of an object is fixed, there is a chance that the object's opposite end will be quantized in a such way that the object will be reversed resulting to negative length. This policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingBeyondZeroPolicy Gets or sets policy according to which a quantizer should act in case of an object is going to be moved beyond zero. The default value is FixAtZero . Declaration public QuantizingBeyondZeroPolicy QuantizingBeyondZeroPolicy { get; set; } Property Value Type Description QuantizingBeyondZeroPolicy Remarks When the start time of an object is not fixed, there is a chance that the object's end time will be quantized in a such way that the start time will be negative due to the object is moved to the left. Negative time is invalid so this policy provides options to prevent this situation. Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. QuantizingLevel Gets or sets the level of quantizing from 0.0 (no quantizing) to 1.0 (full quantizng). Declaration public double QuantizingLevel { get; set; } Property Value Type Description Double Remarks This setting specifies how close an object should be moved to nearest grid time. For example, 0.5 will lead to an object will be moved half the distance between its time and the nearest grid time. Exceptions Type Condition ArgumentOutOfRangeException value is out of valid range. RandomizingSettings Gets or sets settings according to which randomizing should be performed. Declaration public RandomizingSettings RandomizingSettings { get; set; } Property Value Type Description RandomizingSettings Target Gets or sets the side of an object that should be quantized. The default value is Start . Declaration public QuantizerTarget Target { get; set; } Property Value Type Description QuantizerTarget Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value."
  },
  "api/Melanchall.DryWetMidi.Tools.QuantizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.QuantizingSettings-1.html",
    "title": "Class QuantizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class QuantizingSettings<TObject> Settings according to which quantizing should be performed. Inheritance Object QuantizingSettings<TObject> LengthedObjectsQuantizingSettings<TObject> TimedEventsQuantizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public abstract class QuantizingSettings<TObject> Type Parameters Name Description TObject Properties DistanceCalculationType Gets or sets the type of distance calculation used to find a time to snap an object to. The default value is Midi . Declaration public TimeSpanType DistanceCalculationType { get; set; } Property Value Type Description TimeSpanType Filter Gets or sets a predicate to filter objects that should be quantized. Use null if all objects should be processed. Declaration public Predicate<TObject> Filter { get; set; } Property Value Type Description Predicate <TObject> QuantizingLevel Gets or sets the level of quantizing from 0.0 (no quantizing) to 1.0 (full quantizng). Declaration public double QuantizingLevel { get; set; } Property Value Type Description Double Remarks This setting specifies how close an object should be moved to nearest grid time. For example, 0.5 will lead to an object will be moved half the distance between its time and the nearest grid time. Exceptions Type Condition ArgumentOutOfRangeException value is out of valid range."
  },
  "api/Melanchall.DryWetMidi.Tools.Randomizer-2.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Randomizer-2.html",
    "title": "Class Randomizer<TObject, TSettings> | DryWetMIDI",
    "keywords": "Class Randomizer<TObject, TSettings> Provides methods to randomize objects time. Inheritance Object Randomizer<TObject, TSettings> LengthedObjectsRandomizer<TObject, TSettings> TimedEventsRandomizer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public abstract class Randomizer<TObject, TSettings> where TSettings : RandomizingSettings<TObject>, new() Type Parameters Name Description TObject The type of objects to quantize. TSettings The type of quantizer's settings. Methods GetObjectTime(TObject, TSettings) Gets the time of an object that should be randomized. Declaration protected abstract long GetObjectTime(TObject obj, TSettings settings) Parameters Type Name Description TObject obj Object to get time of. TSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. OnObjectRandomizing(TObject, Int64, TSettings) Performs additional actions before the new time will be set to an object. Declaration protected abstract TimeProcessingInstruction OnObjectRandomizing(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. RandomizeInternal(IEnumerable<TObject>, IBounds, TempoMap, TSettings) Randomizes objects time using the specified bounds and settings. Declaration protected void RandomizeInternal(IEnumerable<TObject> objects, IBounds bounds, TempoMap tempoMap, TSettings settings) Parameters Type Name Description IEnumerable <TObject> objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TSettings settings Settings according to which objects should be randomized. SetObjectTime(TObject, Int64, TSettings) Sets the new time of an object. Declaration protected abstract void SetObjectTime(TObject obj, long time, TSettings settings) Parameters Type Name Description TObject obj Object to set time for. Int64 time New time after randomizing. TSettings settings Settings according to which the object's time should be set."
  },
  "api/Melanchall.DryWetMidi.Tools.RandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.RandomizingSettings.html",
    "title": "Class RandomizingSettings | DryWetMIDI",
    "keywords": "Class RandomizingSettings Settings according to which randomizing should be performed by the Quantizer . Inheritance Object RandomizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RandomizingSettings Properties Bounds Gets or sets bounds to randomize an object's time within. Declaration public IBounds Bounds { get; set; } Property Value Type Description IBounds Filter Gets or sets a predicate to filter objects that should be randomized. Use null if all objects should be processed. Declaration public Predicate<ITimedObject> Filter { get; set; } Property Value Type Description Predicate < ITimedObject >"
  },
  "api/Melanchall.DryWetMidi.Tools.RandomizingSettings-1.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.RandomizingSettings-1.html",
    "title": "Class RandomizingSettings<TObject> | DryWetMIDI",
    "keywords": "Class RandomizingSettings<TObject> Settings according to which objects should be randomized. Inheritance Object RandomizingSettings<TObject> LengthedObjectsRandomizingSettings<TObject> TimedEventsRandomizingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public abstract class RandomizingSettings<TObject> Type Parameters Name Description TObject Properties Filter Gets or sets a predicate to filter objects that should be randomized. Use null if all objects should be processed. Declaration public Predicate<TObject> Filter { get; set; } Property Value Type Description Predicate <TObject>"
  },
  "api/Melanchall.DryWetMidi.Tools.Repeater.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Repeater.html",
    "title": "Class Repeater | DryWetMIDI",
    "keywords": "Class Repeater Provides a way to repeat MIDI data using different options. More info in the Repeater article. Inheritance Object Repeater Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public class Repeater Methods ProcessPart(PartProcessingContext) Processes a new part that will be appended to the previous ones. Declaration protected virtual void ProcessPart(PartProcessingContext context) Parameters Type Name Description PartProcessingContext context An object holding all the required data to process a part. Remarks By default the method shifts the data and inserts tempo map events if PreserveTempoMap set to true in settings used for the processing. Repeat(MidiFile, Int32, RepeatingSettings) Repeats a MIDI file specified number of times. Declaration public MidiFile Repeat(MidiFile midiFile, int repeatsNumber, RepeatingSettings settings = null) Parameters Type Name Description MidiFile midiFile The file to repeat. Int32 repeatsNumber Number of times the midiFile should be repeated. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description MidiFile A new instance of the MidiFile which is the midiFile repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(TrackChunk, Int32, TempoMap, RepeatingSettings) Repeats a TrackChunk specified number of times. Declaration public TrackChunk Repeat(TrackChunk trackChunk, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk The TrackChunk to repeat. Int32 repeatsNumber Number of times the trackChunk should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description TrackChunk A new instance of the TrackChunk which is the trackChunk repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(IEnumerable<TrackChunk>, Int32, TempoMap, RepeatingSettings) Repeats a collection of TrackChunk specified number of times. Declaration public ICollection<TrackChunk> Repeat(IEnumerable<TrackChunk> trackChunks, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks The collection of TrackChunk to repeat. Int32 repeatsNumber Number of times the trackChunks should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description ICollection < TrackChunk > A collection of new TrackChunk instances which are the trackChunks repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(IEnumerable<ITimedObject>, Int32, TempoMap, RepeatingSettings) Repeats a collection of timed objects specified number of times. Declaration public ICollection<ITimedObject> Repeat(IEnumerable<ITimedObject> timedObjects, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects The collection of timed objects to repeat. Int32 repeatsNumber Number of times the timedObjects should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description ICollection < ITimedObject > A collection of new TrackChunk instances which are the timedObjects repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: timedObjects is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift."
  },
  "api/Melanchall.DryWetMidi.Tools.RepeaterUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.RepeaterUtilities.html",
    "title": "Class RepeaterUtilities | DryWetMIDI",
    "keywords": "Class RepeaterUtilities Provides methods to repeat MIDI data using different options. More info in the Repeater article. Inheritance Object RepeaterUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class RepeaterUtilities Methods Repeat(MidiFile, Int32, RepeatingSettings) Repeats a MIDI file specified number of times. More info in the Repeater article. Declaration public static MidiFile Repeat(this MidiFile midiFile, int repeatsNumber, RepeatingSettings settings = null) Parameters Type Name Description MidiFile midiFile The file to repeat. Int32 repeatsNumber Number of times the midiFile should be repeated. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description MidiFile A new instance of the MidiFile which is the midiFile repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(TrackChunk, Int32, TempoMap, RepeatingSettings) Repeats a TrackChunk specified number of times. More info in the Repeater article. Declaration public static TrackChunk Repeat(this TrackChunk trackChunk, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk The TrackChunk to repeat. Int32 repeatsNumber Number of times the trackChunk should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description TrackChunk A new instance of the TrackChunk which is the trackChunk repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(IEnumerable<TrackChunk>, Int32, TempoMap, RepeatingSettings) Repeats a collection of TrackChunk specified number of times. More info in the Repeater article. Declaration public static ICollection<TrackChunk> Repeat(this IEnumerable<TrackChunk> trackChunks, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks The collection of TrackChunk to repeat. Int32 repeatsNumber Number of times the trackChunks should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description ICollection < TrackChunk > A collection of new TrackChunk instances which are the trackChunks repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift. Repeat(IEnumerable<ITimedObject>, Int32, TempoMap, RepeatingSettings) Repeats a collection of timed objects specified number of times. More info in the Repeater article. Declaration public static ICollection<ITimedObject> Repeat(this IEnumerable<ITimedObject> timedObjects, int repeatsNumber, TempoMap tempoMap, RepeatingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > timedObjects The collection of timed objects to repeat. Int32 repeatsNumber Number of times the timedObjects should be repeated. TempoMap tempoMap Tempo map used to perform time spans calculations. RepeatingSettings settings Settings according to which the operation should be done. Returns Type Description ICollection < ITimedObject > A collection of new TrackChunk instances which are the timedObjects repeated repeatsNumber times using settings . Exceptions Type Condition ArgumentNullException One of the following errors occured: timedObjects is null . tempoMap is null . ArgumentOutOfRangeException repeatsNumber is zero or negative. ArgumentException Shift of the settings is null for fixed-value shift."
  },
  "api/Melanchall.DryWetMidi.Tools.RepeatingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.RepeatingSettings.html",
    "title": "Class RepeatingSettings | DryWetMIDI",
    "keywords": "Class RepeatingSettings Provides settings for Repeater tool. More info in the Repeater article. Inheritance Object RepeatingSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class RepeatingSettings Properties PreserveTempoMap Gets or sets a value indicating whether original tempo map should be preserved or not. The default value is true . Declaration public bool PreserveTempoMap { get; set; } Property Value Type Description Boolean Shift Gets or sets fixed shift that will be used in case of ShiftPolicy set to ShiftByFixedValue . Declaration public ITimeSpan Shift { get; set; } Property Value Type Description ITimeSpan ShiftPolicy Gets or sets a value indicating how shift should be calculated. The default value is ShiftByMaxTime . Declaration public ShiftPolicy ShiftPolicy { get; set; } Property Value Type Description ShiftPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ShiftRoundingPolicy Gets or sets a way of rounding final shift value. The default value is NoRounding . Declaration public TimeSpanRoundingPolicy ShiftRoundingPolicy { get; set; } Property Value Type Description TimeSpanRoundingPolicy Exceptions Type Condition InvalidEnumArgumentException value specified an invalid value. ShiftRoundingStep Gets or sets a step that should be used to round final shift in case of ShiftRoundingPolicy set to a value other than NoRounding . Declaration public ITimeSpan ShiftRoundingStep { get; set; } Property Value Type Description ITimeSpan"
  },
  "api/Melanchall.DryWetMidi.Tools.Resizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Resizer.html",
    "title": "Class Resizer | DryWetMIDI",
    "keywords": "Class Resizer Provides methods to resize MIDI data in many different ways. More info in the Resizer article. Inheritance Object Resizer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class Resizer Methods Resize(MidiFile, ITimeSpan) Resizes MidiFile to the specified length. More info in the Resizer article. Declaration public static void Resize(this MidiFile midiFile, ITimeSpan length) Parameters Type Name Description MidiFile midiFile MidiFile to resize. ITimeSpan length New length of the midiFile . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . length is null . Resize(MidiFile, Double) Resizes MidiFile by the specified ratio. More info in the Resizer article. Declaration public static void Resize(this MidiFile midiFile, double ratio) Parameters Type Name Description MidiFile midiFile MidiFile to resize. Double ratio Ratio to resize midiFile by. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException ratio is negative. Resize(TrackChunk, ITimeSpan, TempoMap) Resizes TrackChunk to the specified length. More info in the Resizer article. Declaration public static void Resize(this TrackChunk trackChunk, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description TrackChunk trackChunk TrackChunk to resize. ITimeSpan length New length of the trackChunk . TempoMap tempoMap Tempo map used to calculate length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . length is null . tempoMap is null . Resize(TrackChunk, Double) Resizes TrackChunk by the specified ratio. More info in the Resizer article. Declaration public static void Resize(this TrackChunk trackChunk, double ratio) Parameters Type Name Description TrackChunk trackChunk TrackChunk to resize. Double ratio Ratio to resize trackChunk by. Exceptions Type Condition ArgumentNullException trackChunk is null . ArgumentOutOfRangeException ratio is negative. Resize(IEnumerable<TrackChunk>, ITimeSpan, TempoMap) Resizes collection of TrackChunk to the specified length. More info in the Resizer article. Declaration public static void Resize(this IEnumerable<TrackChunk> trackChunks, ITimeSpan length, TempoMap tempoMap) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to resize. ITimeSpan length New length of the trackChunks . TempoMap tempoMap Tempo map used to calculate length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . length is null . tempoMap is null . Resize(IEnumerable<TrackChunk>, Double) Resizes collection of TrackChunk by the specified ratio. More info in the Resizer article. Declaration public static void Resize(this IEnumerable<TrackChunk> trackChunks, double ratio) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to resize. Double ratio Ratio to resize trackChunks by. Exceptions Type Condition ArgumentNullException trackChunks is null . ArgumentOutOfRangeException ratio is negative. ResizeObjectsGroup(IEnumerable<ITimedObject>, ITimeSpan, TempoMap, ObjectsGroupResizingSettings) Resizes group of objects to the specified length treating all objects as a single one. More info in the Resizer article. Declaration public static void ResizeObjectsGroup(this IEnumerable<ITimedObject> objects, ITimeSpan length, TempoMap tempoMap, ObjectsGroupResizingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to resize. ITimeSpan length New length of the objects collection. TempoMap tempoMap Tempo map used to calculate length. ObjectsGroupResizingSettings settings Settings according to which objects should be resized. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . length is null . tempoMap is null . ArgumentException BarBeatTicks or BarBeatFraction is used for DistanceCalculationType of the settings which is unsupported. ResizeObjectsGroup(IEnumerable<ITimedObject>, Double, TempoMap, ObjectsGroupResizingSettings) Resizes group of objects by the specified ratio treating all objects as a single object. More info in the Resizer article. Declaration public static void ResizeObjectsGroup(this IEnumerable<ITimedObject> objects, double ratio, TempoMap tempoMap, ObjectsGroupResizingSettings settings = null) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to resize. Double ratio Ratio to resize objects by. TempoMap tempoMap Tempo map used to calculate length. ObjectsGroupResizingSettings settings Settings according to which objects should be resized. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . ArgumentOutOfRangeException ratio is negative. ArgumentException BarBeatTicks or BarBeatFraction is used for DistanceCalculationType of the settings which is unsupported."
  },
  "api/Melanchall.DryWetMidi.Tools.ShiftPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.ShiftPolicy.html",
    "title": "Enum ShiftPolicy | DryWetMIDI",
    "keywords": "Enum ShiftPolicy Specifies how shift for Repeater should be calculated. More info in the Repeater article. Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum ShiftPolicy Fields Name Description None Don't shift each next part (can be useful for custom processing). ShiftByFixedValue Use fixed shift value from Shift . ShiftByMaxTime Find max time within an input data and use it to shift each next part."
  },
  "api/Melanchall.DryWetMidi.Tools.SliceMidiFileMarkers.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SliceMidiFileMarkers.html",
    "title": "Class SliceMidiFileMarkers | DryWetMIDI",
    "keywords": "Class SliceMidiFileMarkers Provides factory methods to create events to mark parts of split file. Inheritance Object SliceMidiFileMarkers Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SliceMidiFileMarkers Properties EmptyPartMarkerEventFactory Gets or sets a factory method to create event that will be placed in a split MIDI file part if it's empty. Declaration public Func<MidiEvent> EmptyPartMarkerEventFactory { get; set; } Property Value Type Description Func < MidiEvent > PartEndMarkerEventFactory Gets or sets a factory method to create event that will be placed at the end of a split MIDI file part. Declaration public Func<MidiEvent> PartEndMarkerEventFactory { get; set; } Property Value Type Description Func < MidiEvent > PartStartMarkerEventFactory Gets or sets a factory method to create event that will be placed at the start of a split MIDI file part. Declaration public Func<MidiEvent> PartStartMarkerEventFactory { get; set; } Property Value Type Description Func < MidiEvent >"
  },
  "api/Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SliceMidiFileSettings.html",
    "title": "Class SliceMidiFileSettings | DryWetMIDI",
    "keywords": "Class SliceMidiFileSettings Settings according to which a MidiFile should be split by vertical split methods. Inheritance Object SliceMidiFileSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SliceMidiFileSettings Properties Markers Gets or sets SliceMidiFileMarkers that holds factory methods to create events to mark parts of split file. Declaration public SliceMidiFileMarkers Markers { get; set; } Property Value Type Description SliceMidiFileMarkers NoteDetectionSettings Gets or sets settings which define how notes should be detected and built. You can set it to null to use default settings. Declaration public NoteDetectionSettings NoteDetectionSettings { get; set; } Property Value Type Description NoteDetectionSettings PreserveTimes Gets or sets a value indicating whether original times of events should be saved or not. The default value is false . More info in the MIDI file splitting: PreserveTimes article. Declaration public bool PreserveTimes { get; set; } Property Value Type Description Boolean PreserveTrackChunks Gets or sets a value indicating whether track chunks in new files should correspond to those in the input file or not, so empty track chunks can be presented in new files. The default value is false . Declaration public bool PreserveTrackChunks { get; set; } Property Value Type Description Boolean SplitNotes Gets or sets a value indicating whether notes should be split in points of grid intersection or not. The default value is true . More info in the MIDI file splitting: SplitNotes article. Declaration public bool SplitNotes { get; set; } Property Value Type Description Boolean See Also Splitter"
  },
  "api/Melanchall.DryWetMidi.Tools.SplitByObjectsSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SplitByObjectsSettings.html",
    "title": "Class SplitByObjectsSettings | DryWetMIDI",
    "keywords": "Class SplitByObjectsSettings Defines how a MIDI file should be split by objects using SplitByObjects(MidiFile, ObjectType, SplitByObjectsSettings, ObjectDetectionSettings) method. More info in the MIDI file splitting: SplitByObjects article. Inheritance Object SplitByObjectsSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplitByObjectsSettings Properties AllFilesObjectsFilter Gets or sets a predicate to filter out objects that should be copied to each new file (i.e. for those objects WriteToAllFilesPredicate returnes true for). The default value is null which means no filter applied. Declaration public Predicate<ITimedObject> AllFilesObjectsFilter { get; set; } Property Value Type Description Predicate < ITimedObject > Filter Gets or sets a predicate to filter objects out. The default value is null which means no filter applied. Declaration public Predicate<ITimedObject> Filter { get; set; } Property Value Type Description Predicate < ITimedObject > KeySelector Gets or sets a method to get the ID (key) of an object. The default value is null which means the default key selector will be used. You can use the property to implement custom key selection (please see ObjectIdUtilities ). Declaration public Func<ITimedObject, IObjectId> KeySelector { get; set; } Property Value Type Description Func < ITimedObject , IObjectId > WriteToAllFilesPredicate Gets or sets a predicate to determine whether an object should be copied to each new file or not. The default value is null which means no one object will be copied to each file. Declaration public Predicate<ITimedObject> WriteToAllFilesPredicate { get; set; } Property Value Type Description Predicate < ITimedObject > See Also Splitter"
  },
  "api/Melanchall.DryWetMidi.Tools.SplitFileByChannelSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SplitFileByChannelSettings.html",
    "title": "Class SplitFileByChannelSettings | DryWetMIDI",
    "keywords": "Class SplitFileByChannelSettings Defines how a MIDI file should be split by channel using SplitByChannel(MidiFile, SplitFileByChannelSettings) method. Inheritance Object SplitFileByChannelSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplitFileByChannelSettings Properties CopyNonChannelEventsToEachFile Gets or sets a value indicating whether to copy all meta and system exclusive events to all the new files or throw them away. The default value is true >. Declaration public bool CopyNonChannelEventsToEachFile { get; set; } Property Value Type Description Boolean Filter Gets or sets a predicate to filter events out before processing. If predicate returns true , an event will be processed; if false - it won't. If the property set to null (default value), all MIDI events will be processed. Declaration public Predicate<TimedEvent> Filter { get; set; } Property Value Type Description Predicate < TimedEvent > See Also Splitter"
  },
  "api/Melanchall.DryWetMidi.Tools.SplitFileByChunksSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SplitFileByChunksSettings.html",
    "title": "Class SplitFileByChunksSettings | DryWetMIDI",
    "keywords": "Class SplitFileByChunksSettings Defines how a MIDI file should be split by chunks using SplitByChunks(MidiFile, SplitFileByChunksSettings) method. Inheritance Object SplitFileByChunksSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplitFileByChunksSettings Properties Filter Gets or sets a predicate to filter chunks out before processing. If predicate returns true , a chunk will be processed; if false - it won't. If the property set to null (default value), all MIDI chunks will be processed. Declaration public Predicate<MidiChunk> Filter { get; set; } Property Value Type Description Predicate < MidiChunk > PreserveTempoMap Gets or sets a value indicating whether a tempo map shuold be preserved or not in new files. The default value is true . Declaration public bool PreserveTempoMap { get; set; } Property Value Type Description Boolean See Also Splitter"
  },
  "api/Melanchall.DryWetMidi.Tools.SplitFileByNotesSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.SplitFileByNotesSettings.html",
    "title": "Class SplitFileByNotesSettings | DryWetMIDI",
    "keywords": "Class SplitFileByNotesSettings Defines how a MIDI file should be split by notes using SplitByNotes(MidiFile, SplitFileByNotesSettings) method. Inheritance Object SplitFileByNotesSettings Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class SplitFileByNotesSettings Properties CopyNonNoteEventsToEachFile Gets or sets a value indicating whether to copy all non-note events to all the new files or throw them away. The default value is true >. Declaration public bool CopyNonNoteEventsToEachFile { get; set; } Property Value Type Description Boolean Filter Gets or sets a predicate to filter events out before processing. If predicate returns true , an event will be processed; if false - it won't. If the property set to null (default value), all MIDI events will be processed. Declaration public Predicate<TimedEvent> Filter { get; set; } Property Value Type Description Predicate < TimedEvent > IgnoreChannel Gets or sets a value indicating whether a note channel should be ignored or not. If set to true , notes with the same note number but different channels will be treated as same ones. The default value is false . Declaration public bool IgnoreChannel { get; set; } Property Value Type Description Boolean See Also Splitter"
  },
  "api/Melanchall.DryWetMidi.Tools.Splitter.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.Splitter.html",
    "title": "Class Splitter | DryWetMIDI",
    "keywords": "Class Splitter Provides methods to split MIDI data in many different ways. More info in the Splitter article. Inheritance Object Splitter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public static class Splitter Methods CutPart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) Cuts a part of the specified length from a MIDI file (starting at the specified time within the file) and returns a new instance of MidiFile which is the original one without the part. More info in the MIDI file splitting: CutPart article. Declaration public static MidiFile CutPart(this MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to cut part from. ITimeSpan partStart The start time of part to cut. ITimeSpan partLength The length of part to cut. SliceMidiFileSettings settings Settings according to which midiFile should be split. Returns Type Description MidiFile MidiFile which is the midiFile without a part defined by partStart and partLength . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . partStart is null . partLength is null . SkipPart(MidiFile, ITimeSpan, SliceMidiFileSettings) Skips part of the specified length of MIDI file and returns remaining part as an instance of MidiFile . More info in the MIDI file splitting: SkipPart article. Declaration public static MidiFile SkipPart(this MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to skip part of. ITimeSpan partLength The length of part to skip. SliceMidiFileSettings settings Settings according to which midiFile should be split. Returns Type Description MidiFile MidiFile which is result of skipping a part of the midiFile . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . partLength is null . SplitByChannel(MidiFile, SplitFileByChannelSettings) Splits MidiFile by channel. More info in the MIDI file splitting: SplitByChannel article. Declaration public static IEnumerable<MidiFile> SplitByChannel(this MidiFile midiFile, SplitFileByChannelSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. SplitFileByChannelSettings settings Settings accoridng to which MIDI file should be split. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains events for single channel and meta and sysex ones as defined by settings . Remarks All channel events ( ChannelEvent ) will be grouped by channel and then events for each channel will be placed to separate files. So each new file will contain channel events for single channel. If CopyNonChannelEventsToEachFile of settings set to true (default value), each new file will also contain all non-channel events from the original file. If an input file doesn't contain channel events, result file will be just a copy of the input one. Exceptions Type Condition ArgumentNullException midiFile is null . SplitByChunks(MidiFile, SplitFileByChunksSettings) Splits MidiFile by chunks within it. Declaration public static IEnumerable<MidiFile> SplitByChunks(this MidiFile midiFile, SplitFileByChunksSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. SplitFileByChunksSettings settings Settings accoridng to which MIDI file should be split. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains single chunk from the original file. Exceptions Type Condition ArgumentNullException midiFile is null . SplitByGrid(MidiFile, IGrid, SliceMidiFileSettings) Splits MidiFile by the specified grid. More info in the MIDI file splitting: SplitByGrid article. Declaration public static IEnumerable<MidiFile> SplitByGrid(this MidiFile midiFile, IGrid grid, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. IGrid grid Grid to split midiFile by. SliceMidiFileSettings settings Settings according to which file should be split. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile produced during splitting the input file by grid. Remarks Non-track chunks will not be copied to any of the new files. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . SplitByNotes(MidiFile, SplitFileByNotesSettings) Splits MidiFile by notes. Declaration [Obsolete(\"OBS19: Use Splitter.SplitByObjects method. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs19.\")] public static IEnumerable<MidiFile> SplitByNotes(this MidiFile midiFile, SplitFileByNotesSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. SplitFileByNotesSettings settings Settings accoridng to which notes should be detected and built. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains events for single note and other events as defined by settings . Remarks The method produces new files where each one contains Note On and Note Off events for single note number and channel (if it's not ignored according to IgnoreChannel of settings ). Also files can contain all non-note events as defined by CopyNonNoteEventsToEachFile of settings . If an input file doesn't contain note events, result file will be just a copy of the input one. Exceptions Type Condition ArgumentNullException midiFile is null . SplitByObjects(MidiFile, ObjectType, SplitByObjectsSettings, ObjectDetectionSettings) Splits MidiFile by objects. More info in the MIDI file splitting: SplitByObjects article. Declaration public static IEnumerable<MidiFile> SplitByObjects(this MidiFile midiFile, ObjectType objectType, SplitByObjectsSettings settings = null, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split. ObjectType objectType Combination of desired types of objects to split by. SplitByObjectsSettings settings Settings accoridng to which notes should be detected and built. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Returns Type Description IEnumerable < MidiFile > Collection of MidiFile where each file contains objects as defined by settings . Exceptions Type Condition ArgumentNullException midiFile is null . SplitObjectsAtDistance(MidiFile, ObjectType, ITimeSpan, LengthedObjectTarget, ObjectDetectionSettings) Splits objects within a MidiFile at the specified distance from an object's start or end. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this MidiFile midiFile, ObjectType objectType, ITimeSpan distance, LengthedObjectTarget from, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split objects within. ObjectType objectType The type of objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . distance is null . InvalidEnumArgumentException from specified an invalid value. SplitObjectsAtDistance(MidiFile, ObjectType, Double, TimeSpanType, LengthedObjectTarget, ObjectDetectionSettings) Splits objects within a MidiFile by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this MidiFile midiFile, ObjectType objectType, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split objects within. ObjectType objectType The type of objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitObjectsAtDistance(TrackChunk, ObjectType, ITimeSpan, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splits objects within a TrackChunk at the specified distance from an object's start or end. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this TrackChunk trackChunk, ObjectType objectType, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split objects within. ObjectType objectType The type of objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitObjectsAtDistance(TrackChunk, ObjectType, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splits objects within a TrackChunk by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this TrackChunk trackChunk, ObjectType objectType, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split objects within. ObjectType objectType The type of objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitObjectsAtDistance(IEnumerable<TrackChunk>, ObjectType, ITimeSpan, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splits objects within a collection of TrackChunk at the specified distance from an object's start or end. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks A collection of TrackChunk to split objects within. ObjectType objectType The type of objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitObjectsAtDistance(IEnumerable<TrackChunk>, ObjectType, Double, TimeSpanType, LengthedObjectTarget, TempoMap, ObjectDetectionSettings) Splits objects within a collection of TrackChunk by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static void SplitObjectsAtDistance(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks A collection of TrackChunk to split objects within. ObjectType objectType The type of objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitObjectsAtDistance(IEnumerable<ITimedObject>, ITimeSpan, LengthedObjectTarget, TempoMap) Splits objects at the specified distance from an object's start or end. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static IEnumerable<ITimedObject> SplitObjectsAtDistance(this IEnumerable<ITimedObject> objects, ITimeSpan distance, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to split. ITimeSpan distance Distance to split objects at. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable < ITimedObject > Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . distance is null . tempoMap is null . InvalidEnumArgumentException from specified an invalid value. SplitObjectsAtDistance(IEnumerable<ITimedObject>, Double, TimeSpanType, LengthedObjectTarget, TempoMap) Splits objects by the specified ratio of an object's length measuring it from the object's start or end. For example, 0.5 means splitting at the center of an object. More info in the Objects splitting: SplitObjectsAtDistance article. Declaration public static IEnumerable<ITimedObject> SplitObjectsAtDistance(this IEnumerable<ITimedObject> objects, double ratio, TimeSpanType lengthType, LengthedObjectTarget from, TempoMap tempoMap) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to split. Double ratio Ratio of an object's length to split by. Valid values are from 0 to 1. TimeSpanType lengthType The type an object's length should be processed according to. LengthedObjectTarget from Point of an object distance should be measured from. TempoMap tempoMap Tempo map used for distances calculations. Returns Type Description IEnumerable < ITimedObject > Objects that are result of splitting objects going in the same order as elements of objects . Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . ArgumentOutOfRangeException ratio is out of valid range. InvalidEnumArgumentException One of the following errors occured: lengthType specified an invalid value. from specified an invalid value. SplitObjectsByGrid(MidiFile, ObjectType, IGrid, ObjectDetectionSettings) Splits objects within a MidiFile by the specified grid. More info in the Objects splitting: SplitObjectsByGrid article. Declaration public static void SplitObjectsByGrid(this MidiFile midiFile, ObjectType objectType, IGrid grid, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split objects within. ObjectType objectType The type of objects to split. IGrid grid Grid to split objects by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . SplitObjectsByGrid(TrackChunk, ObjectType, IGrid, TempoMap, ObjectDetectionSettings) Splits objects within a TrackChunk by the specified grid. More info in the Objects splitting: SplitObjectsByGrid article. Declaration public static void SplitObjectsByGrid(this TrackChunk trackChunk, ObjectType objectType, IGrid grid, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split objects within. ObjectType objectType The type of objects to split. IGrid grid Grid to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . SplitObjectsByGrid(IEnumerable<TrackChunk>, ObjectType, IGrid, TempoMap, ObjectDetectionSettings) Splits objects within a collection of TrackChunk by the specified grid. More info in the Objects splitting: SplitObjectsByGrid article. Declaration public static void SplitObjectsByGrid(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, IGrid grid, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks A collection of TrackChunk to split objects within. ObjectType objectType The type of objects to split. IGrid grid Grid to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null . SplitObjectsByGrid(IEnumerable<ITimedObject>, IGrid, TempoMap) Splits objects by the specified grid. More info in the Objects splitting: SplitObjectsByGrid article. Declaration public static IEnumerable<ITimedObject> SplitObjectsByGrid(this IEnumerable<ITimedObject> objects, IGrid grid, TempoMap tempoMap) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to split. IGrid grid Grid to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable < ITimedObject > Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be split and will be returned as null s. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . grid is null . tempoMap is null . SplitObjectsByPartsNumber(MidiFile, ObjectType, Int32, TimeSpanType, ObjectDetectionSettings) Splits objects within a MidiFile into the specified number of parts of the equal length. More info in the Objects splitting: SplitObjectsByPartsNumber article. Declaration public static void SplitObjectsByPartsNumber(this MidiFile midiFile, ObjectType objectType, int partsNumber, TimeSpanType lengthType, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split objects within. ObjectType objectType The type of objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. If an object has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException midiFile is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitObjectsByPartsNumber(TrackChunk, ObjectType, Int32, TimeSpanType, TempoMap, ObjectDetectionSettings) Splits objects within a TrackChunk into the specified number of parts of the equal length. More info in the Objects splitting: SplitObjectsByPartsNumber article. Declaration public static void SplitObjectsByPartsNumber(this TrackChunk trackChunk, ObjectType objectType, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split objects within. ObjectType objectType The type of objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. If an object has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitObjectsByPartsNumber(IEnumerable<TrackChunk>, ObjectType, Int32, TimeSpanType, TempoMap, ObjectDetectionSettings) Splits objects within a collection of TrackChunk into the specified number of parts of the equal length. More info in the Objects splitting: SplitObjectsByPartsNumber article. Declaration public static void SplitObjectsByPartsNumber(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks A collection of TrackChunk to split objects within. ObjectType objectType The type of objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls will not be split and will be returned as null s. If an object has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitObjectsByPartsNumber(IEnumerable<ITimedObject>, Int32, TimeSpanType, TempoMap) Splits objects into the specified number of parts of the equal length. More info in the Objects splitting: SplitObjectsByPartsNumber article. Declaration public static IEnumerable<ITimedObject> SplitObjectsByPartsNumber(this IEnumerable<ITimedObject> objects, int partsNumber, TimeSpanType lengthType, TempoMap tempoMap) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to split. Int32 partsNumber The number of parts to split objects into. TimeSpanType lengthType Type of a part's length. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable < ITimedObject > Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls will not be split and will be returned as null s. If an object has zero length, it will be split into the specified number of parts of zero length. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . tempoMap is null . ArgumentOutOfRangeException partsNumber is zero or negative. InvalidEnumArgumentException lengthType specified an invalid value. SplitObjectsByStep(MidiFile, ObjectType, ITimeSpan, ObjectDetectionSettings) Splits objects within a MidiFile by the specified step so every object will be split at points equally distanced from each other starting from the object's start time. More info in the Objects splitting: SplitObjectsByStep article. Declaration public static void SplitObjectsByStep(this MidiFile midiFile, ObjectType objectType, ITimeSpan step, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description MidiFile midiFile MidiFile to split objects within. ObjectType objectType The type of objects to split. ITimeSpan step Step to split objects by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls, objects with zero length and objects with length smaller than step will not be split and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException One of the following errors occurred: midiFile is null . step is null . SplitObjectsByStep(TrackChunk, ObjectType, ITimeSpan, TempoMap, ObjectDetectionSettings) Splits objects within a TrackChunk by the specified step so every object will be split at points equally distanced from each other starting from the object's start time. More info in the Objects splitting: SplitObjectsByStep article. Declaration public static void SplitObjectsByStep(this TrackChunk trackChunk, ObjectType objectType, ITimeSpan step, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to split objects within. ObjectType objectType The type of objects to split. ITimeSpan step Step to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls, objects with zero length and objects with length smaller than step will not be split and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException One of the following errors occurred: trackChunk is null . step is null . tempoMap is null . SplitObjectsByStep(IEnumerable<TrackChunk>, ObjectType, ITimeSpan, TempoMap, ObjectDetectionSettings) Splits objects within a collection of TrackChunk by the specified step so every object will be split at points equally distanced from each other starting from the object's start time. More info in the Objects splitting: SplitObjectsByStep article. Declaration public static void SplitObjectsByStep(this IEnumerable<TrackChunk> trackChunks, ObjectType objectType, ITimeSpan step, TempoMap tempoMap, ObjectDetectionSettings objectDetectionSettings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks A collection of TrackChunk to split objects within. ObjectType objectType The type of objects to split. ITimeSpan step Step to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. ObjectDetectionSettings objectDetectionSettings Settings according to which objects should be detected and built. Remarks Nulls, objects with zero length and objects with length smaller than step will not be split and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException One of the following errors occurred: trackChunks is null . step is null . tempoMap is null . SplitObjectsByStep(IEnumerable<ITimedObject>, ITimeSpan, TempoMap) Splits objects by the specified step so every object will be split at points equally distanced from each other starting from the object's start time. More info in the Objects splitting: SplitObjectsByStep article. Declaration public static IEnumerable<ITimedObject> SplitObjectsByStep(this IEnumerable<ITimedObject> objects, ITimeSpan step, TempoMap tempoMap) Parameters Type Name Description IEnumerable < ITimedObject > objects Objects to split. ITimeSpan step Step to split objects by. TempoMap tempoMap Tempo map used to calculate times to split by. Returns Type Description IEnumerable < ITimedObject > Objects that are result of splitting objects going in the same order as elements of objects . Remarks Nulls, objects with zero length and objects with length smaller than step will not be split and will be returned as clones of the input objects. Exceptions Type Condition ArgumentNullException One of the following errors occurred: objects is null . step is null . tempoMap is null . TakePart(MidiFile, ITimeSpan, ITimeSpan, SliceMidiFileSettings) Takes a part of the specified length of a MIDI file (starting at the specified time within the file) and returns it as an instance of MidiFile . More info in the MIDI file splitting: TakePart article. Declaration public static MidiFile TakePart(this MidiFile midiFile, ITimeSpan partStart, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to take part of. ITimeSpan partStart The start time of part to take. ITimeSpan partLength The length of part to take. SliceMidiFileSettings settings Settings according to which midiFile should be split. Returns Type Description MidiFile MidiFile which is part of the midiFile . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . partStart is null . partLength is null . TakePart(MidiFile, ITimeSpan, SliceMidiFileSettings) Takes part of the specified length of a MIDI file (starting at the beginning of the file) and returns it as an instance of MidiFile . More info in the MIDI file splitting: TakePart article. Declaration public static MidiFile TakePart(this MidiFile midiFile, ITimeSpan partLength, SliceMidiFileSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to take part of. ITimeSpan partLength The length of part to take. SliceMidiFileSettings settings Settings according to which midiFile should be split. Returns Type Description MidiFile MidiFile which is part of the midiFile . Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . partLength is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizerUtilities.html",
    "title": "Class TimedEventsQuantizerUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsQuantizerUtilities Provides methods to quantize timed events time. Inheritance Object TimedEventsQuantizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static class TimedEventsQuantizerUtilities Methods QuantizeTimedEvents(MidiFile, IGrid, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified MidiFile . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeTimedEvents(this MidiFile midiFile, IGrid grid, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to quantize timed events in. IGrid grid Grid to quantize objects by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . grid is null . QuantizeTimedEvents(TrackChunk, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeTimedEvents(this TrackChunk trackChunk, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to quantize timed events in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . grid is null . tempoMap is null . QuantizeTimedEvents(IEnumerable<TrackChunk>, IGrid, TempoMap, TimedEventsQuantizingSettings) Quantizes timed events contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public static void QuantizeTimedEvents(this IEnumerable<TrackChunk> trackChunks, IGrid grid, TempoMap tempoMap, TimedEventsQuantizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to quantize timed events in. IGrid grid Grid to quantize objects by. TempoMap tempoMap Tempo map used to calculate times to quantize by. TimedEventsQuantizingSettings settings Settings according to which timed events should be quantized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . grid is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsQuantizingSettings.html",
    "title": "Class TimedEventsQuantizingSettings | DryWetMIDI",
    "keywords": "Class TimedEventsQuantizingSettings Settings according to which timed events should be quantized. Inheritance Object QuantizingSettings < TimedEvent > TimedEventsQuantizingSettings Inherited Members QuantizingSettings<TimedEvent>.DistanceCalculationType QuantizingSettings<TimedEvent>.QuantizingLevel QuantizingSettings<TimedEvent>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS13: Use Quantizer class. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs13.\")] public class TimedEventsQuantizingSettings : QuantizingSettings<TimedEvent>"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizer.html",
    "title": "Class TimedEventsRandomizer | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizer Provides methods to randomize timed events time. Inheritance Object Randomizer < TimedEvent , TimedEventsRandomizingSettings > TimedEventsRandomizer Inherited Members Randomizer<TimedEvent, TimedEventsRandomizingSettings>.RandomizeInternal(IEnumerable<TimedEvent>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.GetObjectTime(TimedEvent, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.SetObjectTime(TimedEvent, Int64, TimedEventsRandomizingSettings) Randomizer<TimedEvent, TimedEventsRandomizingSettings>.OnObjectRandomizing(TimedEvent, Int64, TimedEventsRandomizingSettings) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class TimedEventsRandomizer : Randomizer<TimedEvent, TimedEventsRandomizingSettings> Methods GetObjectTime(TimedEvent, TimedEventsRandomizingSettings) Gets the time of an object that should be randomized. Declaration protected override long GetObjectTime(TimedEvent obj, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to get time of. TimedEventsRandomizingSettings settings Settings according to which the object's time should be gotten. Returns Type Description Int64 The time of obj that should be randomized. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.GetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings) OnObjectRandomizing(TimedEvent, Int64, TimedEventsRandomizingSettings) Performs additional actions before the new time will be set to an object. Declaration protected override TimeProcessingInstruction OnObjectRandomizing(TimedEvent obj, long time, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to randomize. Int64 time The new time that is going to be set to the object. Can be changed inside this method. TimedEventsRandomizingSettings settings Settings according to which object should be randomized. Returns Type Description TimeProcessingInstruction An object indicating whether the new time should be set to the object or not. Also returned object contains that new time. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.OnObjectRandomizing(Melanchall.DryWetMidi.Interaction.TimedEvent, System.Int64, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings) Remarks Inside this method the new time can be changed or randomizing of an object can be cancelled. Randomize(IEnumerable<TimedEvent>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes objects time using the specified bounds and settings. Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public void Randomize(IEnumerable<TimedEvent> objects, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TimedEvent > objects Objects to randomize. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which objects should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: objects is null . bounds is null . tempoMap is null . SetObjectTime(TimedEvent, Int64, TimedEventsRandomizingSettings) Sets the new time of an object. Declaration protected override void SetObjectTime(TimedEvent obj, long time, TimedEventsRandomizingSettings settings) Parameters Type Name Description TimedEvent obj Object to set time for. Int64 time New time after randomizing. TimedEventsRandomizingSettings settings Settings according to which the object's time should be set. Overrides Melanchall.DryWetMidi.Tools.Randomizer<Melanchall.DryWetMidi.Interaction.TimedEvent, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings>.SetObjectTime(Melanchall.DryWetMidi.Interaction.TimedEvent, System.Int64, Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings)"
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizerUtilities.html",
    "title": "Class TimedEventsRandomizerUtilities | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizerUtilities Provides methods to randomize timed events time. Inheritance Object TimedEventsRandomizerUtilities Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static class TimedEventsRandomizerUtilities Methods RandomizeTimedEvents(MidiFile, IBounds, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified MidiFile . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeTimedEvents(this MidiFile midiFile, IBounds bounds, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description MidiFile midiFile MidiFile to randomize timed events in. IBounds bounds Bounds to randomize time within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: midiFile is null . bounds is null . RandomizeTimedEvents(TrackChunk, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeTimedEvents(this TrackChunk trackChunk, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description TrackChunk trackChunk TrackChunk to randomize timed events in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunk is null . bounds is null . tempoMap is null . RandomizeTimedEvents(IEnumerable<TrackChunk>, IBounds, TempoMap, TimedEventsRandomizingSettings) Randomizes timed events contained in the specified collection of TrackChunk . Declaration [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public static void RandomizeTimedEvents(this IEnumerable<TrackChunk> trackChunks, IBounds bounds, TempoMap tempoMap, TimedEventsRandomizingSettings settings = null) Parameters Type Name Description IEnumerable < TrackChunk > trackChunks Collection of TrackChunk to randomize timed events in. IBounds bounds Bounds to randomize time within. TempoMap tempoMap Tempo map used to calculate time bounds to randomize within. TimedEventsRandomizingSettings settings Settings according to which timed events should be randomized. Exceptions Type Condition ArgumentNullException One of the following errors occured: trackChunks is null . bounds is null . tempoMap is null ."
  },
  "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimedEventsRandomizingSettings.html",
    "title": "Class TimedEventsRandomizingSettings | DryWetMIDI",
    "keywords": "Class TimedEventsRandomizingSettings Settings according to which timed events should be randomized. Inheritance Object RandomizingSettings < TimedEvent > TimedEventsRandomizingSettings Inherited Members RandomizingSettings<TimedEvent>.Filter Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax [Obsolete(\"OBS10: Use Quantizer class passing QuantizingSettings with its RandomizingSettings property set. More info: https://melanchall.github.io/drywetmidi/obsolete/obsolete.html#obs10.\")] public sealed class TimedEventsRandomizingSettings : RandomizingSettings<TimedEvent>"
  },
  "api/Melanchall.DryWetMidi.Tools.TimeProcessingAction.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimeProcessingAction.html",
    "title": "Enum TimeProcessingAction | DryWetMIDI",
    "keywords": "Enum TimeProcessingAction Indicates whether an object is being processed should be skipped or not. The default value is Apply . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum TimeProcessingAction Fields Name Description Apply Set new time to an object. Skip Skip an object and leave its time untouched."
  },
  "api/Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.TimeProcessingInstruction.html",
    "title": "Class TimeProcessingInstruction | DryWetMIDI",
    "keywords": "Class TimeProcessingInstruction Holds the new time that will be set to an object is being processed and action indicating whether quantizing should be cancelled or not. Inheritance Object TimeProcessingInstruction Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public sealed class TimeProcessingInstruction Constructors TimeProcessingInstruction(Int64) Initializes a new instance of the TimeProcessingInstruction with the specified time. This time will be set to an object is being processed. Declaration public TimeProcessingInstruction(long time) Parameters Type Name Description Int64 time The new time of an object. Exceptions Type Condition ArgumentOutOfRangeException time is negative. Fields Skip Indicates that object should be skipped and new time shouldn't be set. Declaration public static readonly TimeProcessingInstruction Skip Field Value Type Description TimeProcessingInstruction Properties Action Gets an action indicating whether processing should be cancelled or not. Declaration public TimeProcessingAction Action { get; } Property Value Type Description TimeProcessingAction Time Gets the new time of an object. Declaration public long Time { get; } Property Value Type Description Int64"
  },
  "api/Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.html": {
    "href": "api/Melanchall.DryWetMidi.Tools.VelocityMergingPolicy.html",
    "title": "Enum VelocityMergingPolicy | DryWetMIDI",
    "keywords": "Enum VelocityMergingPolicy Determines how velocities should be merged during notes merging. The default value is First . Namespace : Melanchall.DryWetMidi.Tools Assembly : Melanchall.DryWetMidi.dll Syntax public enum VelocityMergingPolicy Fields Name Description Average Take average velocity. First Take velocity of first note. Last Take velocity of last note. Max Take maximum velocity. Min Take minimum velocity."
  },
  "articles/composing/Pattern.html": {
    "href": "articles/composing/Pattern.html",
    "title": "Pattern | DryWetMIDI",
    "keywords": "Pattern DryWetMIDI provides a way to create a MIDI file in more \"musical\" manner. The key class here is the PatternBuilder which allows to build a musical composition. PatternBuilder provides a fluent interface to program the music. For example, you can insert a note like this: using Melanchall.DryWetMidi.Composing; var patternBuilder = new PatternBuilder() // Insert the A4 note with length of 5/17 and velocity of 68 .Note(Octave.Get(4).A, new MusicalTimeSpan(5, 17), (SevenBitNumber)68) // Insert the G#3 note with default length and velocity .Note(Octave.Get(3).GSharp); In the example above the last Note method inserts a note with default length and velocity that can be set via corresponding methods at any moment: var patternBuilder = new PatternBuilder() .SetNoteLength(MusicalTimeSpan.Half) .SetVelocity((SevenBitNumber)50) // All the following notes will have half length and velocity of 50 .Note(Octave.Get(4).A) .Note(Note.Get(NoteName.B, 1)) .Note(-Interval.Two) .SetNoteLength(MusicalTimeSpan.Quarter) // All the following notes will have quarter length .Note(Octave.Get(2).A); Please take a look at entire API provided by PatternBuilder . Following example shows how to create first four bars of Beethoven's 'Moonlight Sonata': // Define a chord for bass part which is just an octave var bassChord = new[] { Interval.Twelve }; // Build the composition var pattern = new PatternBuilder() // The length of all main theme's notes within four first bars is // triplet eight so set it which will free us from necessity to specify // the length of each note explicitly .SetNoteLength(MusicalTimeSpan.Eighth.Triplet()) // Anchor current time (start of the pattern) to jump to it // when we'll start to program bass part .Anchor() // We will add notes relative to G#3. // Instead of Octave.Get(3).GSharp it is possible to use Note.Get(NoteName.GSharp, 3) .SetRootNote(Octave.Get(3).GSharp) // Add first three notes and repeat them seven times which will // give us two bars of the main theme // G#3 .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Repeat(3, 7) // repeat three previous notes seven times // Add notes of the next two bars // G#3 .Note(Interval.One) // +1 (A3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Repeat(3, 1) // repeat three previous notes .Note(Interval.One) // +1 (A3) .Note(Interval.Six) // +6 (D4) .Note(Interval.Ten) // +10 (F#4) .Repeat(3, 1) // repeat three previous notes // reaching the end of third bar .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Four) // +4 (C4) .Note(Interval.Ten) // +10 (F#4) .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Interval.Eight) // +8 (E4) .Note(Interval.Zero) // +0 (G#3) .Note(Interval.Five) // +5 (C#4) .Note(Intervaln.Seven) // +7 (D#4) .Note(-Interval.Two) // -2 (F#3) .Note(Interval.Four) // +4 (C4) .Note(Interval.Seven) // +7 (D#4) // Now we will program bass part. To start adding notes from the // beginning of the pattern we need to move to the anchor we set // above .MoveToFirstAnchor() // First two chords have whole length .SetNoteLength(MusicalTimeSpan.Whole) // insert a chord relative to .Chord(bassChord, Octave.Get(2).CSharp) // C#2 (C#2, C#3) .Chord(bassChord, Octave.Get(1).B) // B1 (B1, B2) // Remaining four chords has half length .SetNoteLength(MusicalTimeSpan.Half) .Chord(bassChord, Octave.Get(1).A) // A1 (A1, A2) .Chord(bassChord, Octave.Get(1).FSharp) // F#1 (F#1, F#2) .Chord(bassChord, Octave.Get(1).GSharp) // G#1 (G#1, G#2) .Repeat() // repeat the previous chord // Build a pattern that can be then saved to a MIDI file .Build(); Build method returns an instance of Pattern . Pattern can be transformed or altered by methods in PatternUtilities . Pattern can be then saved to MidiFile (via ToFile method) or TrackChunk (via ToTrackChunk method). You need to provide a tempo map . Also you can optionally specify the channel that should be set to events. The default channel is 0 . Also please see Extension methods section of the Pattern API."
  },
  "articles/custom-data-structures/Custom-chunks.html": {
    "href": "articles/custom-data-structures/Custom-chunks.html",
    "title": "Custom chunks | DryWetMIDI",
    "keywords": "Custom chunks MIDI files are made up of chunks . Each chunk has a 4-character ID and a 32-bit length, which is the number of bytes in the chunk. This structure allows future or custom chunk types to be designed which may be easily ignored if encountered by a program written before a chunk type is introduced or if the program doesn't know about the type. DryWetMIDI allows you to implement custom chunks which can be written to a MIDI file and be read from it. For example, we want to design a chunk that will contain information about changes in whatever we want. A change is described by date (day, month, year) and comment . Let's create the class to store single change. public sealed class Change { public Change(DateTime date, string comment) { Date = date; Comment = comment; } public DateTime Date { get; } public string Comment { get; } } Now we are going to implement a custom chunk. Custom chunk class must be derived from the MidiChunk and must implement four abstract methods: ReadContent ; WriteContent ; GetContentSize ; Clone . Also the class must have parameterless constructor which calls constructor of the base class ( MidiChunk ) passing chunk's ID to it. ID is a 4-character string which will be Hstr for our chunk. ID of custom chunk should not be the same as one of standard chunks IDs. To get IDs of standard chunks you can call MidiChunk.GetStandardChunkIds . The class will look like this: public sealed class HistoryChunk : MidiChunk { private const string Id = \"Hstr\"; private readonly List<Change> _changes = new List<Change>(); public HistoryChunk() : base(Id) { } public void AddChange(DateTime dateTime, string comment) { _changes.Add(new Change(dateTime, comment)); } protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) { throw new NotImplementedException(); } protected override void WriteContent(MidiWriter writer, WritingSettings settings) { throw new NotImplementedException(); } protected override uint GetContentSize(WritingSettings settings) { throw new NotImplementedException(); } public override MidiChunk Clone() { throw new NotImplementedException(); } } Before we will start to implement four methods mentioned above we need to determine the structure of change records according to which it should be read and written. Chunk's content will be started with the count of changes. We will write this count as variable-length quantity (VLQ) number. The count followed by change records. Each change is: one byte for day ; one byte for month ; two bytes for year ; VLQ number bytes representing size of bytes array which is encoded comment; bytes which represent encoded comment string. To store comments we will use Unicode encoding. Let's implement the ReadContent method: protected override void ReadContent(MidiReader reader, ReadingSettings settings, uint size) { // Read changes count var changesCount = reader.ReadVlqNumber(); for (int i = 0; i < changesCount; i++) { // Read date var day = reader.ReadByte(); var month = reader.ReadByte(); var year = reader.ReadWord(); // ushort // Read comment var commentLength = reader.ReadVlqNumber(); var commentBytes = reader.ReadBytes(commentLength); var comment = Encoding.Unicode.GetString(commentBytes); // Add change to changes list AddChange(new DateTime(year, month, day), comment); } } It is highly recommended that count of the bytes were read by this method is equal to the value passed to size parameter. To be able to write the chunk we need to implement WriteContent method: protected override void WriteContent(MidiWriter writer, WritingSettings settings) { // Write changes count writer.WriteVlqNumber(_changes.Count); foreach (var change in _changes) { // Write date var date = change.Date; writer.WriteByte((byte)date.Day); writer.WriteByte((byte)date.Month); writer.WriteWord((ushort)date.Year); // Write comment var comment = change.Comment; if (string.IsNullOrEmpty(comment)) { writer.WriteVlqNumber(0); continue; } var commentBytes = Encoding.Unicode.GetBytes(comment.ToCharArray()); writer.WriteVlqNumber(commentBytes.Length); writer.WriteBytes(commentBytes); } } Every chunk starts with ID and its size. DryWetMIDI calls GetContentSize method of the MidiChunk to write its return value as chunk's size. You must calculate real size of the chunk's content in order to programs which will be read a MIDI file with your custom chunk will be able to skip it by advancing position of the reader on this size. Let's implement GetContentSize : protected override uint GetContentSize(WritingSettings settings) { return (uint)( _changes.Count.GetVlqLength() + _changes.Select(c => { var commentLength = Encoding.Unicode.GetByteCount(c.Comment.ToCharArray()); return 4 /* 1 for day, 1 for month, 2 for year */ + commentLength.GetVlqLength() + commentLength; }) .DefaultIfEmpty() .Sum()); } Implementation of Clone method is pretty easy: public override MidiChunk Clone() { var result = new HistoryChunk(); result._changes.AddRange(_changes); return result; } That's all! Custom chunk is completely implemented. See code sample below to know how to read and write it: // Create a history chunk and populate it by some changes var historyChunk = new HistoryChunk(); historyChunk.AddChange(new DateTime(2017, 3, 23), \"Start the history!\"); historyChunk.AddChange(new DateTime(2156, 11, 3), \"Comment from the future.\"); historyChunk.AddChange(new DateTime(9999, 2, 12), null); // Add the chunk to an existing MIDI file var file = MidiFile.Read(\"My Great Song.mid\"); file.Chunks.Add(historyChunk); file.Write(\"My Great Song.mid\", true); // Read the file with our chunk var fileWithHistoryChunk = MidiFile.Read( \"My Great Song.mid\", new ReadingSettings { CustomChunkTypes = new ChunkTypesCollection { { typeof(HistoryChunk), \"Hstr\" } } }); var historyChunks = fileWithHistoryChunk.Chunks.OfType<HistoryChunk>(); If you don't provide information about your custom chunk in ReadingSettings , the chunks will be read as UnknownChunk ."
  },
  "articles/custom-data-structures/Custom-meta-events.html": {
    "href": "articles/custom-data-structures/Custom-meta-events.html",
    "title": "Custom meta events | DryWetMIDI",
    "keywords": "Custom meta events Meta events specify non-MIDI information useful to specific application. As with custom chunks , future or custom meta events may be designed. Format of meta events allows to programs which don't know about these new events to skip them without reading process failure. DryWetMIDI allows you to implement custom meta events which can be written to a MIDI file track chunk and be read from it. For example, let's create an event which will hold an image. Custom meta event must be derived from the MetaEvent and must implement four abstract methods: ReadContent ; WriteContent ; GetContentSize ; CloneEvent . Also a class must have parameterless constructor. public sealed class ImageEvent : MetaEvent { public ImageEvent() : base() { } public ImageEvent(Image image) : this() { Image = image; } public Image Image { get; set; } protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) { throw new NotImplementedException(); } protected override void WriteContent(MidiWriter writer, WritingSettings settings) { throw new NotImplementedException(); } protected override int GetContentSize(WritingSettings settings) { throw new NotImplementedException(); } protected override MidiEvent CloneEvent() { throw new NotImplementedException(); } } Now we implement methods mentioned above. Start from the ReadContent : protected override void ReadContent(MidiReader reader, ReadingSettings settings, int size) { if (size == 0) return; var imageBytes = reader.ReadBytes(size); var converter = new ImageConverter(); Image = (Image)converter.ConvertFrom(imageBytes); } Every meta event contains size of the event's content. Size is passed to ReadContent through size parameter so we know how much bytes we need to read in order to restore an image. Now let's implement WriteContent : protected override void WriteContent(MidiWriter writer, WritingSettings settings) { if (Image == null) return; var converter = new ImageConverter(); var imageBytes = (byte[])converter.ConvertTo(Image, typeof(byte[])); writer.WriteBytes(imageBytes); } Now we have to implement GetContentSize : protected override int GetContentSize(WritingSettings settings) { if (Image == null) return 0; var converter = new ImageConverter(); var imageBytes = (byte[])converter.ConvertTo(Image, typeof(byte[])); return imageBytes.Length; } Value returned by this method will be written to the event as its content size. To support cloning of an event we need to implement CloneEvent method: public override MidiEvent CloneEvent() { return new ImageEvent(Image?.Clone() as Image); } Custom meta event is completely implemented. In order to read and write it we must assign status byte to the event. You have to pick value from the [0x5F; 0x7E] range which will be the status byte of your event type. You can get status bytes of standard meta events via MetaEvent.GetStandardMetaEventStatusBytes . See code sample below to know how to read and write custom meta event: // Define collection of custom meta event types along with // corresponding status bytes. var customMetaEventTypes = new EventTypesCollection { { typeof(ImageEvent), 0x5F } }; // Write an image event to an existing file. var file = MidiFile.Read(\"My Great Song.mid\"); var trackChunk = file.Chunks.OfType<TrackChunk>().First(); var image = Image.FromFile(\"My image.jpg\"); var imageEvent = new ImageEvent(image); trackChunk.Events.Add(imageEvent); file.Write(\"My Great Song.mid\", true, MidiFileFormat.MultiTrack, new WritingSettings { CustomMetaEventTypes = customMetaEventTypes }); // Read a MIDI file with ImageEvent inside. // // Note that if you don't specify custom meta event through CustomMetaEventTypes // property of the ReadingSettings it will be read as UnknownMetaEvent. var updatedFile = MidiFile.Read( \"My Great Song.mid\", new ReadingSettings { CustomMetaEventTypes = customMetaEventTypes });"
  },
  "articles/dev/Manual-build.html": {
    "href": "articles/dev/Manual-build.html",
    "title": "Manual build | DryWetMIDI",
    "keywords": "Manual build This article describes how you can manually build the library from sources. Just follow the steps below: Select branch you want to build sources from ( master or develop ). Download sources with any method you want: via Code → Download ZIP button on GitHub, then extract archive; or git clone https://github.com/melanchall/drywetmidi.git ; or somehow else. Download native binaries required to work with MIDI devices and default playback: for master branch take DryWetMIDI.<release_number>-bin-native.zip archive from Releases (<release_number> is the number of the library release you want to build); for develop branch go to https://dev.azure.com/Melanchall/DryWetMIDI/_build/latest?definitionId=6&branchName=develop and download DryWetMIDI.<release_number>-bin-native.zip from Artifacts → Binaries . Extract the archive and place extracted files near <your_local_folder_with_repository>\\DryWetMidi\\Melanchall.DryWetMidi.csproj . Build the solution <your_local_folder_with_repository>\\Melanchall.DryWetMidi.sln . For build you can use any tool you want: dotnet CLI, Visual Studio, Rider and so on. The library uses \"new\" csproj format so your build tools should be modern enough. master branch contains code that the library releases built on. develop one is for current development so if you need the latest code, use this branch."
  },
  "articles/dev/Nativeless-package.html": {
    "href": "articles/dev/Nativeless-package.html",
    "title": "Nativeless package | DryWetMIDI",
    "keywords": "Nativeless package DryWetMIDI is shipped in two versions: Melanchall.DryWetMidi ; Melanchall.DryWetMidi.Nativeless . First one is the version containing all the features of the library and you should use it in most cases. But some things require platform-specific code which placed in native binaries packed along with the main library. If you've encountered problems with such code and you don't need API that depends on native binaries, you can use Melanchall.DryWetMidi.Nativeless package where such things are cut out. Following types are unavailable in the nativeless package: VirtualDevice ; DevicesWatcher ; DeviceAddedRemovedEventArgs ; MidiDevice ; InputDevice ; InputDeviceProperty ; MidiTimeCodeReceivedEventArgs ; OutputDevice ; OutputDeviceOption ; OutputDeviceProperty ; OutputDeviceTechnology ; TickGeneratorException ; HighPrecisionTickGenerator . Also default tick generator for Playback there is RegularPrecisionTickGenerator instead of HighPrecisionTickGenerator . Although built-in implementations of IInputDevice and IOutputDevice are unavailable in the nativeless package, you are still able to create your own implementations and use across the library API (in Playback for example)."
  },
  "articles/dev/Project-health.html": {
    "href": "articles/dev/Project-health.html",
    "title": "Project health | DryWetMIDI",
    "keywords": "Project health Here you can see \"health\" of the project in terms of test pipelines are passed or not. First of all, we need to define two subsets of the library API: Core API - it's all API except Multimedia one; in other words it's the API that is supported by .NET itself, so it can be run on any platform .NET Core / .NET supported. Multimedia API - it's platform-specific API that includes following key classes: InputDevice (more details in the InputDevice article); OutputDevice (more details in the OutputDevice article); VirtualDevice (more details in the VirtualDevice article); DevicesWatcher (more details in the DevicesWatcher article); HighPrecisionTickGenerator . Windows master develop macOS master develop Linux Multimedia API is not available for Linux . master develop Package integration Package integration tests check that NuGet package installed in .NET applications of different types works as expected. master develop"
  },
  "articles/dev/Using-in-Unity.html": {
    "href": "articles/dev/Using-in-Unity.html",
    "title": "Using in Unity | DryWetMIDI",
    "keywords": "Using in Unity This article describes how to integrate DryWetMIDI in a Unity project. You have two main ways: import the DryWetMIDI asset from the Unity Asset Store; install the library manually. There are also ways to import a NuGet package via 3d party tools (for example, NuGetForUnity ). Unity asset It's the simplest way. Just use built-in ways to import the official DryWetMIDI asset into your Unity project from the Asset Store. Manual installation Instruction below shows how to integrate full version of the DryWetMIDI into your Unity project manually. If you want to use nativeless version , just take archive with -nativeless suffix on the second step and skip third one. Create Melanchall folder in project's Assets folder and DryWetMIDI subfolder within the Melanchall one. Download the library main binary: for master branch take DryWetMIDI.<release_number>-bin-netstandard20.zip archive from Releases ( <release_number> is the number of the library release you want to take binaries of); for develop branch go to https://dev.azure.com/Melanchall/DryWetMIDI/_build/latest?definitionId=6&branchName=develop and download DryWetMIDI.<release_number>-bin-netstandard20.zip from Artifacts → Binaries . Download native binaries required to work with MIDI devices and default playback: for master branch take DryWetMIDI.<release_number>-bin-native.zip archive from Releases ; for develop branch go to https://dev.azure.com/Melanchall/DryWetMIDI/_build/latest?definitionId=6&branchName=develop and download DryWetMIDI.<release_number>-bin-native.zip from Artifacts → Binaries . ( master branch contains code that the library releases built on. develop one is for current development so if you need the latest API, use this branch) Extract archives into project's Assets → Melanchall → DryWetMIDI folder. Example Now you can use DryWetMIDI API in your Unity scripts. Following sample script (included in demo scene within the full DryWetMIDI package ) will create a MIDI file containing all possible notes with length of 1/8 and will play the file via Microsoft GS Wavetable Synth output device: using System; using System.Linq; using System.Text; using Melanchall.DryWetMidi.Common; using Melanchall.DryWetMidi.Composing; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Interaction; using Melanchall.DryWetMidi.Multimedia; using Melanchall.DryWetMidi.Standards; using UnityEngine; public class DemoScript : MonoBehaviour { private const string OutputDeviceName = \"Microsoft GS Wavetable Synth\"; private OutputDevice _outputDevice; private Playback _playback; private void Start() { InitializeOutputDevice(); var midiFile = CreateTestFile(); InitializeFilePlayback(midiFile); StartPlayback(); } private void OnApplicationQuit() { Debug.Log(\"Releasing playback and device...\"); if (_playback != null) { _playback.NotesPlaybackStarted -= OnNotesPlaybackStarted; _playback.NotesPlaybackFinished -= OnNotesPlaybackFinished; _playback.Dispose(); } if (_outputDevice != null) _outputDevice.Dispose(); Debug.Log(\"Playback and device released.\"); } private void InitializeOutputDevice() { Debug.Log($\"Initializing output device [{OutputDeviceName}]...\"); var allOutputDevices = OutputDevice.GetAll(); if (!allOutputDevices.Any(d => d.Name == OutputDeviceName)) { var allDevicesList = string.Join(Environment.NewLine, allOutputDevices.Select(d => $\" {d.Name}\")); Debug.Log($\"There is no [{OutputDeviceName}] device presented in the system. Here the list of all device:{Environment.NewLine}{allDevicesList}\"); return; } _outputDevice = OutputDevice.GetByName(OutputDeviceName); Debug.Log($\"Output device [{OutputDeviceName}] initialized.\"); } private MidiFile CreateTestFile() { Debug.Log(\"Creating test MIDI file...\"); var patternBuilder = new PatternBuilder() .SetNoteLength(MusicalTimeSpan.Eighth) .SetVelocity(SevenBitNumber.MaxValue) .ProgramChange(GeneralMidiProgram.Harpsichord); foreach (var noteNumber in SevenBitNumber.Values) { patternBuilder.Note(Melanchall.DryWetMidi.MusicTheory.Note.Get(noteNumber)); } var midiFile = patternBuilder.Build().ToFile(TempoMap.Default); Debug.Log(\"Test MIDI file created.\"); return midiFile; } private void InitializeFilePlayback(MidiFile midiFile) { Debug.Log(\"Initializing playback...\"); _playback = midiFile.GetPlayback(_outputDevice); _playback.Loop = true; _playback.NotesPlaybackStarted += OnNotesPlaybackStarted; _playback.NotesPlaybackFinished += OnNotesPlaybackFinished; Debug.Log($\"Output device [{OutputDeviceName}] initialized.\"); } private void StartPlayback() { Debug.Log(\"Starting playback...\"); _playback.Start(); } private void OnNotesPlaybackFinished(object sender, NotesEventArgs e) { LogNotes(\"Notes finished:\", e); } private void OnNotesPlaybackStarted(object sender, NotesEventArgs e) { LogNotes(\"Notes started:\", e); } private void LogNotes(string title, NotesEventArgs e) { var message = new StringBuilder() .AppendLine(title) .AppendLine(string.Join(Environment.NewLine, e.Notes.Select(n => $\" {n}\"))) .ToString(); Debug.Log(message.Trim()); } } Important Pay attention to OnApplicationQuit method. You should always take care about disposing MIDI devices. Without it all resources taken by the device will live until GC collect them. In case of Unity it means Unity may need be reopened to be able to use the same devices again (for example, on Windows)."
  },
  "articles/devices/Common-problems.html": {
    "href": "articles/devices/Common-problems.html",
    "title": "Common problems | DryWetMIDI",
    "keywords": "Common problems StartCoroutine can only be called from the main thread in Unity Sometimes you want to start Unity coroutine in a handler of EventReceived event of InputDevice . Your code can be executed on separate thread in these case. It can happen because of events are received by device on separate (system) thread. But UI related things like call of StartCoroutine can be executed on UI thread only. You can use the solution from here: https://stackoverflow.com/a/56715254 . Related question on StackOverflow: Catching and processing multiple keyboard inputs at once"
  },
  "articles/devices/Devices-connector.html": {
    "href": "articles/devices/Devices-connector.html",
    "title": "Devices connector | DryWetMIDI",
    "keywords": "Devices connector You can redirect MIDI events from input device to output device(s) using DevicesConnector class. To understand what input and output MIDI device is in DryWetMIDI, please read Overview article. Device connector connects an instance of the IInputDevice to one or multiple instances of the IOutputDevice . To get an instance of DevicesConnector class you can use either its constructor or Connect extension method on IInputDevice . In first case you need to call Connect method after you get DevicesConnector instance. In second case the method will be called automatically. Also you can call Disconnect at any time to disable connection between devices. The image below shows how devices will be connected in DryWetMIDI: Following small example shows basic usage of DevicesConnector : using Melanchall.DryWetMidi.Multimedia; // ... using (var inputDevice = InputDevice.GetByName(\"MIDI In\")) using (var outputDevice1 = OutputDevice.GetByName(\"MIDI Out 1\")) using (var outputDevice2 = OutputDevice.GetByName(\"MIDI Out 2\")) { var devicesConnector = new DevicesConnector(inputDevice, outputDevice1, outputDevice2) devicesConnector.Connect(); } So if a MIDI event will be received by MIDI In device, the event will be sent to both MIDI Out 1 and MIDI Out 2 . Don't forget to call StartEventsListening on input device to make sure EventReceived will be fired and MIDI event redirected to output devices. Read more in Input device article."
  },
  "articles/devices/Devices-watcher.html": {
    "href": "articles/devices/Devices-watcher.html",
    "title": "Devices watcher | DryWetMIDI",
    "keywords": "Devices watcher Important Watching devices available for macOS only. DryWetMIDI allows to track whether a MIDI device added to or removed from the system. There is DevicesWatcher class for that purpose. The class is singleton and you can get the instance with Instance property. DevicesWatcher provides two events: DeviceAdded and DeviceRemoved . First one will be fired when a MIDI device is added to the system, and second one - when a device removed from it. You can then cast device instance from the events arguments to InputDevice or OutputDevice . See following sample program: using System; using System.Threading; using Melanchall.DryWetMidi.Multimedia; namespace DwmExamples { class Program { static void Main(string[] args) { DevicesWatcher.Instance.DeviceAdded += OnDeviceAdded; DevicesWatcher.Instance.DeviceRemoved += OnDeviceRemoved; Console.WriteLine(\"Adding device...\"); var virtualDevice = VirtualDevice.Create(\"MyDevice\"); Thread.Sleep(500); // to get system time to see new device Console.WriteLine(\"Removing device...\"); virtualDevice.Dispose(); Console.ReadKey(); } private static void OnDeviceRemoved(object sender, DeviceAddedRemovedEventArgs e) { Console.WriteLine($\"Device removed: {e.Device.GetType()}\"); } private static void OnDeviceAdded(object sender, DeviceAddedRemovedEventArgs e) { Console.WriteLine($\"Device added: {e.Device.GetType()} ({e.Device.Name})\"); } } } Running the program we'll see following output: Adding device... Device added: Melanchall.DryWetMidi.Multimedia.InputDevice (MyDevice) Device added: Melanchall.DryWetMidi.Multimedia.OutputDevice (MyDevice) Removing device... Device removed: Melanchall.DryWetMidi.Multimedia.InputDevice Device removed: Melanchall.DryWetMidi.Multimedia.OutputDevice When device is added you can immediately interact with it using an instance from the DeviceAdded event's arguments. But an instance from the DeviceRemoved event's arguments is non-interactable, because device is removed and doesn't exist in the system anymore. Any attempt to call methods or properties on that instance will throw an exception: using System; using System.Threading; using Melanchall.DryWetMidi.Multimedia; namespace DwmExamples { class Program { static void Main(string[] args) { DevicesWatcher.Instance.DeviceRemoved += OnDeviceRemoved; var virtualDevice = VirtualDevice.Create(\"MyDevice\"); Thread.Sleep(500); // to get system time to see new device Console.WriteLine(\"Removing device...\"); virtualDevice.Dispose(); Console.ReadKey(); } private static void OnDeviceRemoved(object sender, DeviceAddedRemovedEventArgs e) { Console.WriteLine($\"Device removed. Getting its name...\"); var deviceName = e.Device.Name; } } } The progrum will be crashed with: Removing device... Device removed. Getting its name... Unhandled exception. System.InvalidOperationException: Operation can't be performed on removed device. But you can compare device instances via Equals to know whether two instances of MidiDevice are equal or not. Following example shows how you can get the name of a removed device via info about devices stored at the start of the program: using System; using System.Collections.Generic; using System.Linq; using System.Threading; using Melanchall.DryWetMidi.Multimedia; namespace DwmExamples { class Program { private static Dictionary<MidiDevice, string> _devicesNames; static void Main(string[] args) { DevicesWatcher.Instance.DeviceRemoved += OnDeviceRemoved; var virtualDevice = VirtualDevice.Create(\"MyDevice\"); Thread.Sleep(500); // to get system time to see new device _devicesNames = InputDevice.GetAll() .OfType<MidiDevice>() .Concat(OutputDevice.GetAll()) .ToDictionary(d => d, d => d.Name); Console.WriteLine(\"Removing device...\"); virtualDevice.Dispose(); Console.ReadKey(); } private static void OnDeviceRemoved(object sender, DeviceAddedRemovedEventArgs e) { Console.WriteLine($\"Device removed. Getting its name...\"); var deviceName = _devicesNames[e.Device]; Console.WriteLine($\"Name is {deviceName}\"); } } } Output is: Removing device... Device removed. Getting its name... Name is MyDevice Device removed. Getting its name... Name is MyDevice Device instances comparing can be useful in programs with GUI where you need update the list of available devices. So when a device is added, you just add it to the list. When some device is removed, you find corresponding item in the current list via Equals on device instances and remove that item. Important Checking for devices equality supported for macOS only. On Windows any call of Equals will just compare references."
  },
  "articles/devices/Input-device.html": {
    "href": "articles/devices/Input-device.html",
    "title": "Input device | DryWetMIDI",
    "keywords": "Input device In DryWetMIDI an input MIDI device is represented by IInputDevice interface. It allows to receive events from a MIDI device. To understand what an input MIDI device is in DryWetMIDI, please read Overview article. The library provides built-in implementation of IInputDevice : InputDevice class. To get an instance of InputDevice you can use either GetByName or GetByIndex static methods. ID of a MIDI device is a number from 0 to devices count minus one . To get count of input MIDI devices presented in the system there is the GetDevicesCount method. You can get all input MIDI devices with GetAll method. Important You can use InputDevice built-in implementation of IInputDevice on Windows and macOS only. Of course you can create your own implementation of IInputDevice as described in Custom input device section below. After an instance of InputDevice is obtained, call StartEventsListening to start listening incoming MIDI events going from an input MIDI device. If you don't need to listen for events anymore, call StopEventsListening . Also this method will be called automatically on Dispose . To check whether InputDevice is currently listening for events or not use IsListeningForEvents property. If an input device is listening for events, it will fire EventReceived event for each incoming MIDI event. Received MIDI event will be passed to event's handler. Small example (console app) that shows receiving MIDI data: using System; using Melanchall.DryWetMidi.Multimedia; namespace InputDeviceExample { class Program { private static IInputDevice _inputDevice; static void Main(string[] args) { _inputDevice = InputDevice.GetByName(\"Some MIDI device\"); _inputDevice.EventReceived += OnEventReceived; _inputDevice.StartEventsListening(); Console.WriteLine(\"Input device is listening for events. Press any key to exit...\"); Console.ReadKey(); (_inputDevice as IDisposable)?.Dispose(); } private static void OnEventReceived(object sender, MidiEventReceivedEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event received from '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); } } } Important You should always take care about disposing an InputDevice , so use it inside using block or call Dispose manually. Without it all resources taken by the device will live until GC collect them via finalizer of the InputDevice . It means that sometimes you will not be able to use different instances of the same device across multiple applications or different pieces of a program. InputDevice has MidiTimeCodeReceived event which, by default, will be fired only when all MIDI Time Code components (separate MidiTimeCodeEvent events) are received forming hours:minutes:seconds:frames timestamp. You can turn this behavior off by setting RaiseMidiTimeCodeReceived to false . If an invalid channel , system common or system real-time or system exclusive event received, ErrorOccurred event will be fired with Data property of the exception filled with an information about the error. Custom input device You can create your own input device implementation and use it in your app. For example, let's create device that will listen for specific keyboard keys and report corresponding note via EventReceived event. Also we will control current octave with up arrow and down arrow increasing or decreasing octave number correspondingly. Following image shows the scheme of our device: Now we implement it: public sealed class KeyboardInputDevice : IInputDevice { public event EventHandler<MidiEventReceivedEventArgs> EventReceived; private static readonly Dictionary<ConsoleKey, NoteName> NotesNames = new Dictionary<ConsoleKey, NoteName> { [ConsoleKey.A] = NoteName.C, [ConsoleKey.W] = NoteName.CSharp, [ConsoleKey.S] = NoteName.D, [ConsoleKey.E] = NoteName.DSharp, [ConsoleKey.D] = NoteName.E, [ConsoleKey.F] = NoteName.F, [ConsoleKey.T] = NoteName.FSharp, [ConsoleKey.G] = NoteName.G, [ConsoleKey.Y] = NoteName.GSharp, [ConsoleKey.H] = NoteName.A, [ConsoleKey.U] = NoteName.ASharp, [ConsoleKey.J] = NoteName.B }; private readonly Thread _thread; private int _octaveNumber = 4; private SevenBitNumber? _currentNoteNumber; public KeyboardInputDevice() { _thread = new Thread(ListenEvents); } public bool IsListeningForEvents { get; private set; } public void StartEventsListening() { _thread.Start(); IsListeningForEvents = true; } public void StopEventsListening() { if (_currentNoteNumber != null) EventReceived?.Invoke(this, new MidiEventReceivedEventArgs( new NoteOffEvent(_currentNoteNumber.Value, SevenBitNumber.MinValue))); IsListeningForEvents = false; } public void Dispose() { } private void ListenEvents() { while (IsListeningForEvents) { var key = Console.ReadKey(true); if (!NotesNames.TryGetValue(key.Key, out var noteName)) { switch (key.Key) { case ConsoleKey.UpArrow: _octaveNumber++; Console.WriteLine($\"Octave is {_octaveNumber} now\"); break; case ConsoleKey.DownArrow: _octaveNumber--; Console.WriteLine($\"Octave is {_octaveNumber} now\"); break; case ConsoleKey.Escape: StopEventsListening(); Console.WriteLine(\"Listening stopped.\"); break; } continue; } var noteNumber = CalculateNoteNumber(noteName, _octaveNumber); if (!IsNoteNumberValid(noteNumber)) continue; if (_currentNoteNumber != null) EventReceived?.Invoke(this, new MidiEventReceivedEventArgs( new NoteOffEvent(_currentNoteNumber.Value, SevenBitNumber.MinValue))); EventReceived?.Invoke(this, new MidiEventReceivedEventArgs( new NoteOnEvent((SevenBitNumber)noteNumber, SevenBitNumber.MaxValue))); _currentNoteNumber = (SevenBitNumber)noteNumber; } } private static bool IsNoteNumberValid(int noteNumber) { return noteNumber >= SevenBitNumber.MinValue && noteNumber <= SevenBitNumber.MaxValue; } private static int CalculateNoteNumber(NoteName noteName, int octave) { return (octave + 1) * Octave.OctaveSize + (int)noteName; } } We can then use it for Recording or redirecting received notes to real output device to make them sound: var outputDevice = OutputDevice.GetByName(\"Microsoft GS Wavetable Synth\"); var devicesConnector = keyboardInputDevice.Connect(outputDevice);"
  },
  "articles/devices/Output-device.html": {
    "href": "articles/devices/Output-device.html",
    "title": "Output device | DryWetMIDI",
    "keywords": "Output device In DryWetMIDI an output MIDI device is represented by IOutputDevice interface. It allows to send events to a MIDI device. To understand what an output MIDI device is in DryWetMIDI, please read Overview article. The library provides built-in implementation of IOutputDevice : OutputDevice . To get an instance of OutputDevice you can use either GetByName or GetByIndex static methods. To retrieve count of output MIDI devices presented in the system there is the GetDevicesCount method. You can get all output MIDI devices with GetAll method: using System; using Melanchall.DryWetMidi.Multimedia; // ... foreach (var outputDevice in OutputDevice.GetAll()) { Console.WriteLine(outputDevice.Name); } Important You can use OutputDevice built-in implementation of IOutputDevice on Windows and macOS only. Of course you can create your own implementation of IOutputDevice as described in Custom output device section below. After an instance of OutputDevice is obtained, you can send MIDI events to device via SendEvent method. You cannot send meta events since such events can be inside a MIDI file only. If you pass an instance of meta event class, SendEvent will do nothing. EventSent event will be fired for each event sent with SendEvent (except meta events) holding the MIDI event sent. The value of DeltaTime property of MIDI events will be ignored, events will be sent to device immediately. To take delta-times into account, use Playback class. If you need to interrupt all currently sounding notes, call the TurnAllNotesOff method which will send Note Off events on all channels for all note numbers (kind of \"panic\" button on MIDI devices). Small example that shows sending MIDI data: using System; using Melanchall.DryWetMidi.Multimedia; using Melanchall.DryWetMidi.Core; // ... using (var outputDevice = OutputDevice.GetByName(\"Some MIDI device\")) { outputDevice.EventSent += OnEventSent; outputDevice.SendEvent(new NoteOnEvent()); outputDevice.SendEvent(new NoteOffEvent()); } // ... private void OnEventSent(object sender, MidiEventSentEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event sent to '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); } Important You should always take care about disposing an OutputDevice , so use it inside using block or call Dispose manually. Without it all resources taken by the device will live until GC collect them via finalizer of the OutputDevice . It means that sometimes you will not be able to use different instances of the same device across multiple applications or different pieces of a program. First call of SendEvent method can take some time for allocating resources for device, so if you want to eliminate this operation on sending a MIDI event, you can call PrepareForEventsSending method before any MIDI event will be sent. Custom output device You can create your own output device implementation and use it in your app. For example, let's create super simple device that just outputs MIDI events to console: private sealed class ConsoleOutputDevice : IOutputDevice { public event EventHandler<MidiEventSentEventArgs> EventSent; public void PrepareForEventsSending() { } public void SendEvent(MidiEvent midiEvent) { Console.WriteLine(midiEvent); } public void Dispose() { } } You can then use this device, for example, for debug in Playback . Another one use case for custom output device is plugging some synth. So you create output device where SendEvent will redirect MIDI events to synth."
  },
  "articles/devices/Overview.html": {
    "href": "articles/devices/Overview.html",
    "title": "Overview | DryWetMIDI",
    "keywords": "Overview DryWetMIDI provides ability to send MIDI data to or receive it from MIDI devices. For that purpose there are following types: IInputDevice (see Input device ); IOutputDevice (see Output device ); DevicesConnector (see Devices connector ). The library provides implementations for both IInputDevice and IOutputDevice : InputDevice and OutputDevice correspondingly which represent MIDI devices visible by the operating system. Both classes implement IDisposable interface so you should always dispose them to free devices for using by another applications. Important You can use InputDevice and OutputDevice built-in implementations of IInputDevice and IOutputDevice on Windows and macOS only. Of course you can create your own implementations of IInputDevice and IOutputDevice . All classes that interact with devices work with interfaces mentioned above, so you can create custom implementation of your devices (see examples in Input device and Output device articles) and use it for playback or recording, for example. MIDI devices API classes are placed in the Melanchall.DryWetMidi.Multimedia namespace. To understand what is an input and an output device in DryWetMIDI take a look at the following image: So, as you can see, although a MIDI port is MIDI IN for MIDI device, it will be an output device in DryWetMIDI because your application will send MIDI data to this port. MIDI OUT of MIDI device will be an input device in DryWetMIDI because a program will receive MIDI data from the port. If some error occured during sending or receiving a MIDI event, the ErrorOccurred event will be fired holding an exception caused the error."
  },
  "articles/devices/Virtual-device.html": {
    "href": "articles/devices/Virtual-device.html",
    "title": "Virtual device | DryWetMIDI",
    "keywords": "Virtual device Important Virtual devices API available for macOS only. For Windows you can use products like virtualMIDI SDK or similar to work with virtual MIDI ports programmatically. Be careful with license of these products. With DryWetMIDI you can programmatically create virtual MIDI devices with the specified name using VirtualDevice.Create method. In fact virtual device is an input and an output devices paired together in a way that any MIDI event sent to the output device will be immediately transfered back from the virtual device and can be received by an application from its input subdevice. Thus we have loopback device here. Loopback device is useful, for example, as intermediate layer between an application and some software synthesizer. In this case: you create virtual device, for example, named as MyDevice ; in the application you set MyDevice as an output MIDI port, so the application will send MIDI data to the output subdevice of the virtual device; in software synthesizer you set MyDevice as an input MIDI port. So when you create virtual device an input device and an output one are created with the same name as the one specified on virtual device creation. Subdevices of a virtual device are available via InputDevice and OutputDevice properties of the VirtualDevice class. Of course you can use those device separately as regular input and output devices: using System; using Melanchall.DryWetMidi.Multimedia; namespace DwmExamples { class Program { static void Main(string[] args) { var virtualDevice = VirtualDevice.Create(\"MyDevice\"); Console.WriteLine($\"Virtual device {virtualDevice} created with subdevices:\"); Console.WriteLine($\" input = {virtualDevice.InputDevice.Name}\"); Console.WriteLine($\" output = {virtualDevice.OutputDevice.Name}\"); var inputDevice = InputDevice.GetByName(\"MyDevice\"); Console.WriteLine($\"Input device {inputDevice.Name} got as regular input device.\"); var outputDevice = OutputDevice.GetByName(\"MyDevice\"); Console.WriteLine($\"Output device {outputDevice.Name} got as regular output device.\"); Console.ReadKey(); } } } Output of the program: Virtual device Virtual device created with subdevices: input = MyDevice output = MyDevice Input device MyDevice got as regular input device. Output device MyDevice got as regular output device. You can even combine virtual devices and DevicesConnector to broadcast MIDI data to several applications (synthesizers, for example) at the same time: using System; using Melanchall.DryWetMidi.Common; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Multimedia; namespace DwmExamples { class Program { static void Main(string[] args) { var rootDevice = VirtualDevice.Create(\"Root\"); rootDevice.InputDevice.StartEventsListening(); // Important, don't forget! var leafDevice1 = VirtualDevice.Create(\"Leaf1\"); leafDevice1.InputDevice.EventReceived += OnLeafEventReceived; var leafDevice2 = VirtualDevice.Create(\"Leaf2\"); leafDevice2.InputDevice.EventReceived += OnLeafEventReceived; var devicesConnector = rootDevice.InputDevice.Connect( leafDevice1.OutputDevice, leafDevice2.OutputDevice); leafDevice1.InputDevice.StartEventsListening(); leafDevice2.InputDevice.StartEventsListening(); var midiEvent = new NoteOnEvent((SevenBitNumber)70, (SevenBitNumber)60) { Channel = (FourBitNumber)5 }; Console.WriteLine($\"Sending {midiEvent} event...\"); rootDevice.OutputDevice.SendEvent(midiEvent); Console.ReadKey(); } private static void OnLeafEventReceived(object sender, MidiEventReceivedEventArgs e) { var device = (MidiDevice)sender; Console.WriteLine($\"Event {e.Event} received on device {device.Name}.\"); } } } This program will print following lines: Sending Note On [5] (70, 60) event... Event Note On [5] (70, 60) received on device Leaf1. Event Note On [5] (70, 60) received on device Leaf2. As with input and output device you should always dispose virtual device when you're done with it: virtualDevice.Dispose(); You must not explicitly dispose subdevices of a virtual device. More than that calling Dispose on virtualDevice.InputDevice and virtualDevice.OutputDevice will throw an exception. But if you got references to the subdevices by regular methods (for example, by InputDevice.GetByName ), you can call Dispose on that references of course."
  },
  "articles/file-reading-writing/MIDI-file-reading.html": {
    "href": "articles/file-reading-writing/MIDI-file-reading.html",
    "title": "MIDI file reading | DryWetMIDI",
    "keywords": "MIDI file reading The simplest code for MIDI file reading is: var file = MidiFile.Read(\"Some great song.mid\"); After that you have instance of the MidiFile . Its Chunks property returns collection of chunks within the MIDI file read. Using this collection you can manage chunks (add new, delete existing one and so on). MIDI file reading process can be finely adjusted via ReadingSettings . For example, if we want to abort reading on unknown chunk (about reading custom chunks see Custom chunks article), you can set corresponding policy: var file = MidiFile.Read(\"Some great song.mid\", new ReadingSettings { UnknownChunkIdPolicy = UnknownChunkIdPolicy.Abort }); ReadingSettings has a lot of useful properties. You can read documentation on all of them to learn how you can adjust MIDI file reading. Reading corrupted files DryWetMIDI allows to read MIDI files with various violations of SMF standard. Example below shows how to read a MIDI file with different errors: var file = MidiFile.Read(\"Some great song.mid\", new ReadingSettings { InvalidChannelEventParameterValuePolicy = InvalidChannelEventParameterValuePolicy.ReadValid, InvalidChunkSizePolicy = InvalidChunkSizePolicy.Ignore, InvalidMetaEventParameterValuePolicy = InvalidMetaEventParameterValuePolicy.SnapToLimits, MissedEndOfTrackPolicy = MissedEndOfTrackPolicy.Ignore, NoHeaderChunkPolicy = NoHeaderChunkPolicy.Ignore, NotEnoughBytesPolicy = NotEnoughBytesPolicy.Ignore, UnexpectedTrackChunksCountPolicy = UnexpectedTrackChunksCountPolicy.Ignore, UnknownChannelEventPolicy = UnknownChannelEventPolicy.SkipStatusByteAndOneDataByte, UnknownChunkIdPolicy = UnknownChunkIdPolicy.ReadAsUnknownChunk, UnknownFileFormatPolicy = UnknownFileFormatPolicy.Ignore, }); Please read more about these properties in the API section to learn about what options are available to handle each error. If some policies set to Abort , an instance of corresponding exception will be thrown. All such exceptions types are derived from MidiException and listed in Exceptions section of Read methods ( by file path or by stream ) on API documentation."
  },
  "articles/file-reading-writing/MIDI-file-writing.html": {
    "href": "articles/file-reading-writing/MIDI-file-writing.html",
    "title": "MIDI file writing | DryWetMIDI",
    "keywords": "MIDI file writing The simplest code for MIDI file writing is: file.Write(\"Some great song.mid\"); If file with this name already exist, you'll get an excption. To overwrite existing file pass true to overwriteFile parameter: file.Write(\"Some great song.mid\", overwriteFile: true); Compression You can set specific policies via WritingSettings to reduce size of an output file. For example, to use running status and thus don't write status bytes of channel events of the same type, set properties shown in the following code: file.Write(\"Some great song.mid\", settings: new WritingSettings { UseRunningStatus = true, NoteOffAsSilentNoteOn = true }); Complete list of available properties is placed in documentation of WritingSettings ."
  },
  "articles/high-level-managing/Getting-objects.html": {
    "href": "articles/high-level-managing/Getting-objects.html",
    "title": "Getting objects | DryWetMIDI",
    "keywords": "Getting objects This article describes ways to get different objects (like timed events or notes ) from MIDI files, track chunks and collections of another objects. GetTimedEvents TimedEvent is the basic MIDI object we will describe here. It's just a MIDI event along with its absolute time within a MIDI file or track chunk. To get all timed events in a MIDI file, you can just call GetTimedEvents method: using System; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Interaction; namespace DwmExamples { class Program { static void Main(string[] args) { var midiFile = MidiFile.Read(\"My Great Song.mid\"); var timedEvents = midiFile.GetTimedEvents(); Console.WriteLine($\"{timedEvents.Count} timed events found.\"); } } } Please examine TimedEventsManagingUtilities class to see other GetTimedEvents overloads. GetNotes There is the NotesManagingUtilities class which provides useful methods GetNotes to get notes from a MIDI file or track chunk. For example, you can get notes a MIDI file contains with this code: using System; using Melanchall.DryWetMidi.Common; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Interaction; namespace DwmExamples { class Program { static void Main(string[] args) { var midiFile = new MidiFile( new TrackChunk( new NoteOnEvent(), new NoteOffEvent(), new NoteOnEvent((SevenBitNumber)70, (SevenBitNumber)50) { Channel = (FourBitNumber)5, DeltaTime = 10 }, new NoteOffEvent((SevenBitNumber)70, (SevenBitNumber)30) { Channel = (FourBitNumber)5, DeltaTime = 70 })); Console.WriteLine(\"Notes:\"); foreach (var note in midiFile.GetNotes()) { Console.Write($@\" note {note} (note number = {note.NoteNumber}) time = {note.Time} length = {note.Length} velocity = {note.Velocity} off velocity = {note.OffVelocity}\"); } Console.ReadKey(); } } } Running the program, we'll see following output: Notes: note C-1 (note number = 0) time = 0 length = 0 velocity = 0 off velocity = 0 note A#4 (note number = 70) time = 10 length = 70 velocity = 50 off velocity = 30 Please examine NotesManagingUtilities class to see other GetNotes overloads. Settings All GetNotes overloads can accept NoteDetectionSettings as last parameter. Via this parameter you can adjust the process of notes building. Let's see each setting in details. NoteStartDetectionPolicy The NoteStartDetectionPolicy property defines how start event of a note should be found in case of overlapping notes with the same note number and channel. The default value is NoteStartDetectionPolicy.FirstNoteOn . To understand how this policy works let's take a look at the following events sequence: where empty circle and filled one mean Note On and Note Off events correspondingly; cross means any other event. So we have two overlapped notes here (we assume all note events have the same note number and channel). If we set NoteStartDetectionPolicy to NoteStartDetectionPolicy.FirstNoteOn , notes will be constructed in following way: So every Note Off event will be combined with first free Note On event into a note (events are processed one by one consecutively). But if set NoteStartDetectionPolicy to NoteStartDetectionPolicy.LastNoteOn , we'll get another picture: So Note Off events will be combined with last free Note On event into a note. NoteSearchContext The NoteSearchContext property defines a context to search notes within. The default value is NoteSearchContext.SingleEventsCollection . The property is applicable only to GetChords that accepts collection of TrackChunk s and MidiFile . To understand how this policy works let's take a look at the following events sequences within two track chunks: where empty circle and filled one mean Note On and Note Off events correspondingly; cross means any other event. So we have two overlapped notes here (we assume all note events have the same note number). So we have two overlapped notes here. We assume that NoteStartDetectionPolicy.FirstNoteOn is used to search a note's start and all note events have the same note number. If we use NoteSearchContext.SingleEventsCollection as the context, notes will be constructed in the following way: So every Note On event will be combined with Note Off one within the same events collection. But if we use NoteSearchContext.AllEventsCollections , notes will be constructed in a new way: So Note On event can be combined now with Note Off one within different events collection, i.e. ends of a note can be placed in difefrent track chunks. GetChords There is the ChordsManagingUtilities class which provides useful methods GetChords to get notes from a MIDI file or track chunk. For example, you can get chords a MIDI file contains with this code: using System; using Melanchall.DryWetMidi.Common; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Interaction; namespace DwmExamples { class Program { static void Main(string[] args) { var midiFile = new MidiFile( new TrackChunk( new NoteOnEvent(), new NoteOffEvent(), new NoteOnEvent { Channel = (FourBitNumber)5, DeltaTime = 10 }, new NoteOffEvent { Channel = (FourBitNumber)5 }, new NoteOnEvent((SevenBitNumber)70, (SevenBitNumber)50) { Channel = (FourBitNumber)5 }, new NoteOffEvent((SevenBitNumber)70, (SevenBitNumber)30) { Channel = (FourBitNumber)5, DeltaTime = 70 })); Console.WriteLine(\"Chords:\"); foreach (var chord in midiFile.GetChords()) { Console.Write($@\" chord channel = {chord.Channel} time = {chord.Time} length = {chord.Length} notes:\"); foreach (var note in chord.Notes) { Console.Write($@\" note {note} (note number = {note.NoteNumber}) channel = {note.Channel} time = {note.Time} length = {note.Length} velocity = {note.Velocity} off velocity = {note.OffVelocity}\"); } } Console.ReadKey(); } } } Running the program, we'll see following output: Chords: chord channel = 0 time = 0 length = 0 notes: note C-1 (note number = 0) channel = 0 time = 0 length = 0 velocity = 0 off velocity = 0 chord channel = 5 time = 10 length = 70 notes: note C-1 (note number = 0) channel = 5 time = 10 length = 0 velocity = 0 off velocity = 0 note A#4 (note number = 70) channel = 5 time = 10 length = 70 velocity = 50 off velocity = 30 Please examine ChordsManagingUtilities class to see other GetChords overloads. Settings All GetChords overloads can accept ChordDetectionSettings as last parameter. Via this parameter you can adjust the process of chords building. Let's see each setting in details. NoteDetectionSettings Chords are built on top of notes. So to build chords we need to build notes. The process of notes building is adjustable via NoteDetectionSettings property. Properties of the NoteDetectionSettings are described in detail above . NotesTolerance The NotesTolerance property defines the maximum distance of notes from the start of the first note of a chord. Notes within this tolerance will be included in a chord. The default value is 0 . To understand how this property works let's take a look at the following notes (cross means any non-note event): If we set notes tolerance to 0 (which is default value), we'll get three different chords (each of one note): Different colors denotes different chords. If we set notes tolerance to 1 , we'll get two chords: With tolerance of 2 we'll finally get a single chord: NotesMinCount The NotesMinCount property defines the minimum count of notes a chord can contain. So if count of simultaneously sounding notes is less than this value, they won't make up a chord. The default value is 1 which means a single note can be turned to a chord. To understand how this property works let's take a look at the following notes (cross means any non-note event): So we have three notes. For simplicity we'll assume that NotesTolerance is 0 (default value). If we set notes min count to 1 (which is default value), we'll get two different chords: If we set notes min count to 2 , we'll get only one chord: Last note will not be turned into a chord because count of notes for a chord will be 1 which is less than the specified minimum count. With minimum count of notes of 3 we'll get no chords: First possible chord will contain two notes and second chord will contain one note. In both cases count of notes is less than the specified minimum count. ChordSearchContext The ChordSearchContext property defines a context to search chords within. The default value is ChordSearchContext.SingleEventsCollection . The property is applicable only to GetChords that accepts collection of TrackChunk s and MidiFile . To understand how this policy works let's take a look at the following data within two track chunks: If we use ChordSearchContext.SingleEventsCollection as the context, chords will be constructed in the following way: So chords will be constructed only from notes within the same events collection (track chunk). But if we use ChordSearchContext.AllEventsCollections , chords will be constructed in a new way: So a chord can be constructed from notes within different events collections. GetObjects All methods we saw before return collection of objects of the same type . So you can get only either notes or chords or timed events. To highlight the problem, let's take a look at the following events sequence: where empty circle and filled one mean Note On and Note Off events correspondingly; cross means any other event. We assume all note events have the same note number and channel. With GetTimedEvents we'll just get all these events as is. GetNotes will give us only notes: GetChords will return only chords (single one in this example): So if we run following simple program: using System; using System.Collections.Generic; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Interaction; namespace DwmExamples { class Program { static void Main(string[] args) { var midiFile = new MidiFile( new TrackChunk( new TextEvent(\"1\"), new NoteOnEvent { DeltaTime = 1 }, new TextEvent(\"2\") { DeltaTime = 1 }, new NoteOffEvent { DeltaTime = 1 }, new TextEvent(\"3\") { DeltaTime = 1 }, new NoteOnEvent { DeltaTime = 1 }, new TextEvent(\"4\") { DeltaTime = 1 }, new NoteOffEvent { DeltaTime = 1 }, new TextEvent(\"5\") { DeltaTime = 1 }, new NoteOnEvent { DeltaTime = 1 }, new TextEvent(\"6\")), new TrackChunk( new TextEvent(\"A\"), new TextEvent(\"B\") { DeltaTime = 1 }, new TextEvent(\"C\") { DeltaTime = 1 }, new TextEvent(\"D\") { DeltaTime = 1 }, new TextEvent(\"E\") { DeltaTime = 1 }, new NoteOnEvent { DeltaTime = 1 }, new TextEvent(\"F\") { DeltaTime = 1 }, new NoteOffEvent { DeltaTime = 1 }, new TextEvent(\"G\") { DeltaTime = 1 }, new TextEvent(\"H\") { DeltaTime = 1 }, new TextEvent(\"I\"))); Console.WriteLine(\"Getting timed events...\"); WriteTimedObjects(midiFile.GetTimedEvents()); Console.WriteLine(\"Getting notes...\"); WriteTimedObjects(midiFile.GetNotes()); Console.WriteLine(\"Getting chords...\"); WriteTimedObjects(midiFile.GetChords(new ChordDetectionSettings { ChordSearchContext = ChordSearchContext.AllEventsCollections, NotesMinCount = 2 })); Console.ReadKey(); } private static void WriteTimedObjects<TObject>(ICollection<TObject> timedObjects) where TObject : ITimedObject { foreach (var timedObject in timedObjects) { Console.WriteLine($\"[{timedObject.GetType().Name}] {timedObject} (time = {timedObject.Time})\"); } } } } we'll get this output: Getting timed events... [TimedEvent] Event at 0: Text (1) (time = 0) [TimedEvent] Event at 0: Text (A) (time = 0) [TimedEvent] Event at 1: Note On [0] (0, 0) (time = 1) [TimedEvent] Event at 1: Text (B) (time = 1) [TimedEvent] Event at 2: Text (2) (time = 2) [TimedEvent] Event at 2: Text (C) (time = 2) [TimedEvent] Event at 3: Note Off [0] (0, 0) (time = 3) [TimedEvent] Event at 3: Text (D) (time = 3) [TimedEvent] Event at 4: Text (3) (time = 4) [TimedEvent] Event at 4: Text (E) (time = 4) [TimedEvent] Event at 5: Note On [0] (0, 0) (time = 5) [TimedEvent] Event at 5: Note On [0] (0, 0) (time = 5) [TimedEvent] Event at 6: Text (4) (time = 6) [TimedEvent] Event at 6: Text (F) (time = 6) [TimedEvent] Event at 7: Note Off [0] (0, 0) (time = 7) [TimedEvent] Event at 7: Note Off [0] (0, 0) (time = 7) [TimedEvent] Event at 8: Text (5) (time = 8) [TimedEvent] Event at 8: Text (G) (time = 8) [TimedEvent] Event at 9: Note On [0] (0, 0) (time = 9) [TimedEvent] Event at 9: Text (6) (time = 9) [TimedEvent] Event at 9: Text (H) (time = 9) [TimedEvent] Event at 9: Text (I) (time = 9) Getting notes... [Note] C-1 (time = 1) [Note] C-1 (time = 5) [Note] C-1 (time = 5) Getting chords... [Chord] C-1 C-1 (time = 5) As you can see there is \"free\" Note On event without corresponding Note Off one so we can't build a note for it. What if we want to get all possible notes and all remaining timed events? DryWetMIDI provides GetObjectsUtilities class which contains GetObjects methods (for the same MIDI structures as previous methods). We can change printing part of the program above to: Console.WriteLine(\"Getting notes and timed events...\"); WriteTimedObjects(midiFile.GetObjects(ObjectType.Note | ObjectType.TimedEvent)); which will give us following output: Getting notes and timed events... [TimedEvent] Event at 0: Text (1) (time = 0) [TimedEvent] Event at 0: Text (A) (time = 0) [Note] C-1 (time = 1) [TimedEvent] Event at 1: Text (B) (time = 1) [TimedEvent] Event at 2: Text (2) (time = 2) [TimedEvent] Event at 2: Text (C) (time = 2) [TimedEvent] Event at 3: Text (D) (time = 3) [TimedEvent] Event at 4: Text (3) (time = 4) [TimedEvent] Event at 4: Text (E) (time = 4) [Note] C-1 (time = 5) [Note] C-1 (time = 5) [TimedEvent] Event at 6: Text (4) (time = 6) [TimedEvent] Event at 6: Text (F) (time = 6) [TimedEvent] Event at 8: Text (5) (time = 8) [TimedEvent] Event at 8: Text (G) (time = 8) [TimedEvent] Event at 9: Note On [0] (0, 0) (time = 9) [TimedEvent] Event at 9: Text (6) (time = 9) [TimedEvent] Event at 9: Text (H) (time = 9) [TimedEvent] Event at 9: Text (I) (time = 9) So all note events that build up a note were turned into instances of Note , and all remaining events (including \"free\" Note On one) were returned as instances of TimedEvent . We can go futher and collect all possible chords, notes and timed events: Console.WriteLine(\"Getting chords, notes and timed events...\"); WriteTimedObjects(midiFile.GetObjects( ObjectType.Chord | ObjectType.Note | ObjectType.TimedEvent, new ObjectDetectionSettings { ChordDetectionSettings = new ChordDetectionSettings { ChordSearchContext = ChordSearchContext.AllEventsCollections, NotesMinCount = 2 } })); which will give us following output: Getting chords, notes and timed events... [TimedEvent] Event at 0: Text (1) (time = 0) [TimedEvent] Event at 0: Text (A) (time = 0) [Note] C-1 (time = 1) [TimedEvent] Event at 1: Text (B) (time = 1) [TimedEvent] Event at 2: Text (2) (time = 2) [TimedEvent] Event at 2: Text (C) (time = 2) [TimedEvent] Event at 3: Text (D) (time = 3) [TimedEvent] Event at 4: Text (3) (time = 4) [TimedEvent] Event at 4: Text (E) (time = 4) [Chord] C-1 C-1 (time = 5) [TimedEvent] Event at 6: Text (4) (time = 6) [TimedEvent] Event at 6: Text (F) (time = 6) [TimedEvent] Event at 8: Text (5) (time = 8) [TimedEvent] Event at 8: Text (G) (time = 8) [TimedEvent] Event at 9: Note On [0] (0, 0) (time = 9) [TimedEvent] Event at 9: Text (6) (time = 9) [TimedEvent] Event at 9: Text (H) (time = 9) [TimedEvent] Event at 9: Text (I) (time = 9) Or in visual representation: Currently GetObjects can build objects of the following types: TimedEvent Note Chord Rest Rests Let's see on rests building in details, since GetObjects is the only way to get them. First of all, all GetObjects overloads accept settings as an instance of the ObjectDetectionSettings class. Most of its properties are already discussed in previous sections on notes building settings and chords building ones . But there is the RestDetectionSettings property which controls how rests should be detected. Supposing we have following notes (with two different note numbers on two different channels): RestDetectionSettings provides RestSeparationPolicy property which determines a rule for creating rests. Now we'll see how each possible value of the policy affects the result of rests building. Using NoSeparation (which is the default value) we'll get only one rest: \"No separation\" means \"there is no difference between channels and note numbers\" so rests will be constructed only at spaces where there are no notes at all (with any channels and any note numbers). With SeparateByChannel we'll get three rests: So rests are separated by channels only. Note number of a note doesn't matter, all numbers are treated as the same one. So rests will be constructed for each channel at spaces where there are no notes (with any note numbers). With SeparateByNoteNumber we'll get following rests: As you can see rests now are separated by note number (channel doesn't matter). So rests will be constructed for each note number at spaces where there are no notes (with any channel). With SeparateByChannelAndNoteNumber we'll get rests at every \"free\" space: Let's see all these processes in action with a small program: using System; using System.Collections.Generic; using System.Linq; using Melanchall.DryWetMidi.Common; using Melanchall.DryWetMidi.Interaction; using NoteName = Melanchall.DryWetMidi.MusicTheory.NoteName; namespace DwmExamples { class Program { static void Main(string[] args) { var ch0 = (FourBitNumber)0; var a2Ch0Notes = new[] { new Note(NoteName.A, 2, 3, 0) { Channel = ch0 }, new Note(NoteName.A, 2, 2, 6) { Channel = ch0 }, new Note(NoteName.A, 2, 2, 8) { Channel = ch0 }, new Note(NoteName.A, 2, 3, 11) { Channel = ch0 } }; var b1Ch0Notes = new[] { new Note(NoteName.B, 1, 3, 1) { Channel = ch0 }, new Note(NoteName.B, 1, 4, 4) { Channel = ch0 }, new Note(NoteName.B, 1, 1, 13) { Channel = ch0 } }; var ch1 = (FourBitNumber)1; var a2Ch1Notes = new[] { new Note(NoteName.A, 2, 2, 0) { Channel = ch1 }, new Note(NoteName.A, 2, 2, 7) { Channel = ch1 } }; var b1Ch1Notes = new[] { new Note(NoteName.B, 1, 3, 1) { Channel = ch1 }, new Note(NoteName.B, 1, 3, 5) { Channel = ch1 }, new Note(NoteName.B, 1, 2, 12) { Channel = ch1 } }; var notes = a2Ch0Notes .Concat(b1Ch0Notes) .Concat(a2Ch1Notes) .Concat(b1Ch1Notes) .ToArray(); WriteRests(notes, RestSeparationPolicy.NoSeparation); WriteRests(notes, RestSeparationPolicy.SeparateByChannel); WriteRests(notes, RestSeparationPolicy.SeparateByNoteNumber); WriteRests(notes, RestSeparationPolicy.SeparateByChannelAndNoteNumber); Console.ReadKey(); } private static void WriteRests( ICollection<Note> notes, RestSeparationPolicy restSeparationPolicy) { var rests = notes .GetObjects( ObjectType.Rest, new ObjectDetectionSettings { RestDetectionSettings = new RestDetectionSettings { RestSeparationPolicy = restSeparationPolicy } }) .Cast<Rest>() .ToArray(); Console.WriteLine($\"Rests by {restSeparationPolicy} policy:\"); foreach (var rest in rests) { Console.WriteLine($\"[{rest.Length}] at [{rest.Time}] (note number = {rest.NoteNumber}, channel = {rest.Channel})\"); } } } } Output is: Rests by NoSeparation policy: [1] at [10] (note number = , channel = ) Rests by SeparateByChannel policy: [1] at [4] (note number = , channel = 1) [3] at [9] (note number = , channel = 1) [1] at [10] (note number = , channel = 0) Rests by SeparateByNoteNumber policy: [1] at [0] (note number = 35, channel = ) [3] at [3] (note number = 45, channel = ) [4] at [8] (note number = 35, channel = ) [1] at [10] (note number = 45, channel = ) Rests by SeparateByChannelAndNoteNumber policy: [1] at [0] (note number = 35, channel = 0) [1] at [0] (note number = 35, channel = 1) [5] at [2] (note number = 45, channel = 1) [3] at [3] (note number = 45, channel = 0) [1] at [4] (note number = 35, channel = 1) [4] at [8] (note number = 35, channel = 1) [5] at [8] (note number = 35, channel = 0) [1] at [10] (note number = 45, channel = 0)"
  },
  "articles/high-level-managing/Objects-managers.html": {
    "href": "articles/high-level-managing/Objects-managers.html",
    "title": "Objects managers | DryWetMIDI",
    "keywords": "Objects managers Working with low-level objects (like MIDI event) sometimes is not convenient. In this cases it's much more handy to manage MIDI data via concepts of timed events , notes or chords . DryWetMIDI provides a way to work with such high-level objects - TimedObjectsManager . This class allows to work with objects of different types within an events collection (see TrackChunk.Events ): using (var manager = new TimedObjectsManager(trackChunk.Events, ObjectType.Note | ObjectType.TimedEvent)) { foreach (var obj in manager.Objects) { if (obj is Note note) note.Length -= 10; else if (obj is TimedEvent timedEvent && timedEvent.Event is BaseTextEvent textEvent) textEvent.Text = \"Hello\"; } manager.Objects.RemoveAll(obj => obj is Note note && note.Channel == 9); manager.Objects.Add(new TimedEvent(new ProgramChangeEvent((SevenBitNumber)7), 100)); } All changes made with a manager will not be saved until SaveChanges or Dispose method will be called. So the recommended practice to work with managers is using (var notesManager = trackChunk.ManageNotes()) { // ... } or if managing is happen in different parts of a program var notesManager = new TimedObjectsManager<Note>(trackChunk.Events); // ... notesManager.SaveChanges(); Objects will be placed in the underlying events collection in chronological order of course. Also as you can see there is the generic constructor that allows to manage objects of the single type. Objects property will return in this case objects of this type, no need to cast them to the type. Simultaneous editing of events collection On saving the manager will rewrite all content of the underlying events collection. So you shouldn't modify the collection while working with the manager since all unsaved changes will be lost on manager's SaveChanges or Dispose . For example, this code using (var timedEventsManager = new TimedObjectsManager<TimedEvent>(trackChunk.Events)) using (var notesManager = new TimedObjectsManager<Note>(trackChunk.Events)) { // All changes made with the notesManager will be lost } or var timedEventsManager = new TimedObjectsManager<TimedEvent>(trackChunk.Events); var notesManager = new TimedObjectsManager<Note>(trackChunk.Events); // All changes made with the notesManager will be lost timedEventsManager.SaveChanges(); will cause changes made with the notesManager will be lost because SaveChanges (or Dispose in first code snippet) of timedEventsManager executed after SaveChanges of notesManager , and thus rewrites underlying events collection. You need to save changes made with a previous manager before managing objects with next one."
  },
  "articles/high-level-managing/Tempo-map.html": {
    "href": "articles/high-level-managing/Tempo-map.html",
    "title": "Tempo map | DryWetMIDI",
    "keywords": "Tempo map Tempo map is a set of changes of time signature and tempo. Tempo map is one of the key objects in high-level managing of MIDI data. You need to have a tempo map to convert time and length between different representations, either explicitly or internally at some parts of the library (for example, in tools ). Following image shows how tempo map constructed for a given set of events or MIDI file: So as you can see tempo map doesn't reflect original MIDI events. Tempo map holds real tempo and time signature changes. Default tempo is 120 BPM by MIDI specifications so there is no need to hold first two tempo \"changes\" because tempo is not changed in fact. The same for time signature (which is 4/4 by default). Also any repeated values are ignored since they don't change tempo or time signature. Instead of messing with Time Signature and Set Tempo events DryWetMIDI provides TempoMapManager which helps to manage tempo map of a MIDI file: using (var tempoMapManager = new TempoMapManager( midiFile.TimeDivision, midiFile.GetTrackChunks().Select(c => c.Events))) { TempoMap tempoMap = tempoMapManager.TempoMap; Tempo tempoAt123 = tempoMap.GetTempoAtTime((MidiTimeSpan)123); // Change tempo to 400000 microseconds per quarter note at 20 seconds from // MIDI file start tempoMapManager.SetTempo(new MetricTimeSpan(0, 0, 20), new Tempo(400000)); tempoMapManager.ClearTimeSignature(456); } To get tempo map being managed by the current TempoMapManager you need to use TempoMap property which returns an instance of the TempoMap class. Once you've got an instance of TempoMap you can use GetTempoChanges method to get all tempo changes. Use GetTimeSignatureChanges method to get time signature changes. GetTempoAtTime and GetTimeSignatureAtTime methods allow to get tempo and time signature at the specified time. You can also create new tempo map with TempoMapManager : using (var tempoMapManager = new TempoMapManager()) { // ... } If you want to create a simple tempo map with some fixed tempo or/and time signature without changes, use Create static methods of the TempoMap class. There is another way to get an instance of the TempoMapManager � through the ManageTempoMap extension method: using (var tempoMapManager = midiFile.ManageTempoMap()) { // ... } This method and another useful ones are placed in TempoMapManagingUtilities . For example, to get tempo map of a MIDI file you can write: TempoMap tempoMap = midiFile.GetTempoMap(); Also you can replace the entire tempo map of a MIDI file using ReplaceTempoMap method: midiFile.ReplaceTempoMap(TempoMap.Create(Tempo.FromBeatsPerMinute(140)));"
  },
  "articles/high-level-managing/Time-and-length.html": {
    "href": "articles/high-level-managing/Time-and-length.html",
    "title": "Time and length | DryWetMIDI",
    "keywords": "Time and length All times and lengths in a MIDI file are presented as some long values in units defined by the time division of a MIDI file. In practice it is much more convenient to operate by \"human understandable\" representations like seconds or bars/beats. In fact there is no difference between time and length since time within a MIDI file is just a length that always starts at zero, so the time span term will be used to describe both time and length. DryWetMIDI provides the following classes to represent time span: MetricTimeSpan for time span in terms of microseconds; BarBeatTicksTimeSpan for time span in terms of number of bars, beats and ticks; BarBeatFractionTimeSpan for time span in terms of number of bars and fractional beats (for example, 0.5 beats); MusicalTimeSpan for time span in terms of a fraction of the whole note length; MidiTimeSpan exists for unification purposes and simply holds long value in units defined by the time division of a file. All time span classes implement ITimeSpan interface. To convert time span between different representations you should use TimeConverter or LengthConverter classes (these conversions require tempo map of a MIDI file). (You can use LengthConverter for time conversions too but with the TimeConverter you don't need to specify time where time span starts since it is always zero.) Examples of time conversions: var tempoMap = midiFile.GetTempoMap(); // Some time in MIDI ticks (we assume time division of a MIDI file is \"ticks per quarter note\") long ticks = 123; // Convert ticks to metric time MetricTimeSpan metricTime = TimeConverter.ConvertTo<MetricTimeSpan>(ticks, tempoMap); // Convert ticks to musical time MusicalTimeSpan musicalTimeFromTicks = TimeConverter.ConvertTo<MusicalTimeSpan>(ticks, tempoMap); // Convert metric time to musical time MusicalTimeSpan musicalTimeFromMetric = TimeConverter.ConvertTo<MusicalTimeSpan>(metricTime, tempoMap); // Convert metric time to bar/beat time BarBeatTicksTimeSpan barBeatTicksTimeFromMetric = TimeConverter.ConvertTo<BarBeatTicksTimeSpan>(metricTime, tempoMap); // Convert musical time back to ticks long ticksFromMusical = TimeConverter.ConvertFrom(musicalTimeFromTicks, tempoMap); Examples of length conversions: var tempoMap = midiFile.GetTempoMap(); // Convert ticks to metric length MetricTimeSpan metricLength = LengthConverter.ConvertTo<MetricTimeSpan>(ticks, time, tempoMap); // Convert metric length to musical length using metric time MusicalTimeSpan musicalLengthFromMetric = LengthConverter.ConvertTo<MusicalTimeSpan>(metricLength, metricTime, tempoMap); // Convert musical length back to ticks long ticksFromMetricLength = LengthConverter.ConvertFrom(metricLength, time, tempoMap); You could notice that LengthConverter 's methods take a time as parameter. In general case MIDI file has changes of the tempo and time signature. Thus the same long (X) value can represent different amount of seconds, for example, depending on the time of an object with length of this X value. The methods above can take time either as long or as ITimeSpan . There are some useful methods in the TimedObjectUtilities class. This class contains extension methods for types that implement the ITimedObject interface – TimedEvent , Note and Chord . For example, you can get time of a timed event in hours, minutes, seconds with TimeAs method: var metricTime = timedEvent.TimeAs<MetricTimeSpan>(tempoMap); Or you can find all notes of a MIDI file that start at time of 10 bars and 4 beats: TempoMap tempoMap = midiFile.GetTempoMap(); IEnumerable<Note> notes = midiFile .GetNotes().AtTime(new BarBeatTicksTimeSpan(10, 4), tempoMap); Also there is the LengthedObjectUtilities class. This class contains extension methods for types that implement the ILengthedObject interface – Note and Chord . For example, you can get length of a note as a fraction of the whole note with LengthAs method: var musicalLength = note.LengthAs<MusicalTimeSpan>(tempoMap); Or you can get all notes of a MIDI file that end exactly at 30 seconds from the start of the file: var tempoMap = midiFile.GetTempoMap(); var notesAt30sec = midiFile .GetNotes().EndAtTime(new MetricTimeSpan(0, 0, 30), tempoMap); TimeAs (end EndTimeAs ) and LengthAs methods have non-generic versions where the desired type of result should be passed as an argument of the TimeSpanType type. ITimeSpan interface has several methods to perform arithmetic operations on time spans. For example, to add metric length to metric time you can write: var timeSpan1 = new MetricTimeSpan(0, 2, 20); var timeSpan2 = new MetricTimeSpan(0, 0, 10); ITimeSpan result = timeSpan1.Add(timeSpan2, TimeSpanMode.TimeLength); You need to specify mode of the operation. In the example above TimeLength is used which means that first time span represents a time and the second one represents a length. This information is needed for conversion engine when operands are of different types. There are also TimeTime and LengthLength modes. You can also subtract one time span from another one: var timeSpan1 = new MetricTimeSpan(0, 10, 0); var timeSpan2 = new MusicalTimeSpan(3, 8); ITimeSpan result = timeSpan1.Subtract(timeSpan2, TimeSpanMode.TimeTime); If operands of the same type, result time span will be of this type too. But if you sum or subtract time spans of different types, the type of a result time span will be MathTimeSpan which holds operands along with operation (addition or subtraction) and mode. To stretch or shrink a time span use Multiply or Divide methods: ITimeSpan stretchedTimeSpan = new MetricTimeSpan(0, 0, 10).Multiply(2.5); ITimeSpan shrinkedTimeSpan = new BarBeatTicksTimeSpan(0, 2).Divide(2); There are some useful methods in the TimeSpanUtilities class. These methods include Parse and TryParse ones that allows to parse a string to appropriate time span. Please read article corresponding to desired time span type to learn formats of strings that can be parsed to this type (use links at the start of this article). Representations DryWetMIDI provides several representations of time spans. Metric MetricTimeSpan represents time span as a number of microseconds. Following strings can be parsed to MetricTimeSpan : Hours : Minutes : Seconds : Milliseconds HoursGroup : Minutes : Seconds Minutes : Seconds Hours h Minutes m Seconds s Milliseconds ms Hours h Minutes m Seconds s Hours h Minutes m Milliseconds ms Hours h Seconds s Milliseconds ms Minutes m Seconds s Milliseconds ms Hours h Minutes m Hours h Seconds s Hours h Milliseconds ms Minutes m Seconds s Hours h Milliseconds ms Seconds s Milliseconds ms Hours h Minutes m Seconds s Milliseconds ms where Hours is a number of hours. Minutes is a number of minutes. Seconds is a number of seconds. Milliseconds is a number of milliseconds. Examples: 0:0:0:0 – zero time span 0:0:0:156 – 156 milliseconds 2:0:156 – 2 hours and 156 seconds 1:156 – 1 minute and 156 seconds 1h2m3s4ms – 1 hour 2 minutes 3 seconds 4 milliseconds 1h 2m3s – 1 hour 2 minutes 3 seconds 1h2M 4ms – 1 hour 2 minutes 4 milliseconds 1 h3s4ms – 1 hour 3 seconds 4 milliseconds 2M3 S 4 MS – 2 minutes 3 seconds 4 milliseconds 1h2m – 1 hour 2 minutes 1h 3s – 1 hour 3 seconds 1h4MS – 1 hour 4 milliseconds 2M3s – 2 minutes 3 seconds 2 m 4 Ms – 2 minutes 4 milliseconds 3 s 4 mS – 2 seconds 4 milliseconds Bars, beats and ticks BarBeatTicksTimeSpan represents a time span as a number of bars, beats and MIDI ticks. Following strings can be parsed to BarBeatTicksTimeSpan : Bars.Beats.Ticks where Bars is a number of bars. Beats is a number of beats. Ticks is a number of MIDI ticks. Examples: 0.0.0 – zero time span 1.0.0 – 1 bar 0.10.5 – 10 beats and 5 ticks 100.20.0 – 100 bars and 20 ticks Bars, beats and fraction BarBeatFractionTimeSpan represents a time span as a number of bars and fractional beats (for example, 0.5 beats). Following strings can be parsed to BarBeatFractionTimeSpan : Bars_BeatsIntegerPart.BeatsFractionalPart where Bars is a number of bars. BeatsIntegerPart is an integer part of fractional beats number. BeatsFractionalPart is a fractional part of fractional beats number. Examples: 0_0.0 – zero time span 1_0.0 – 1 bar 0_10.5 – 10.5 beats 100_20.2 – 100 bars and 20.2 beats Musical MusicalTimeSpan represents a time span as a fraction of the whole note, for example, 1/4 (quarter note length). Following strings can be parsed to MusicalTimeSpan : Fraction Tuplet Dots where Fraction defines note length which is one of the following terms: Numerator/Denominator where Numerator and Denominator are nonnegative integer numbers; Numerator can be omitted assuming it's 1 ; w , h , q , e or s which mean whole, half, quarter, eighth or sixteenth note length respectively. Tuplet represents tuplet definition which is one of the following terms: [NotesCount : SpaceSize] where NotesCount is positive integer count of notes with length defined by Fraction part; SpaceSize is the count of notes of normal length. t or d which mean triplet and duplet respectively. Dots is any number of dots. Tuplet and Dots parts can be omitted. Examples: 0/1 – zero time span q – quarter note length 1/4. – dotted quarter note length /8.. – double dotted eighth note length wt. – dotted whole triplet note length w[3:10] – length of 3 whole notes in space of 10 notes of normal length s[3:10]... – length of 3 sixteenth triple dotted notes in space of 10 notes of normal length MIDI MidiTimeSpan exists for unification purposes and simply holds long value in units defined by the time division of a MIDI file. Following strings can be parsed to MidiTimeSpan : Value where Value is a number of MIDI ticks. Examples: 0 – zero time span 100 – 100 ticks 123456 – 123456 ticks"
  },
  "articles/music-theory/Chord.html": {
    "href": "articles/music-theory/Chord.html",
    "title": "Chord | DryWetMIDI",
    "keywords": "Chord Chord represents a musical chord as a collection of notes names. Some examples of usage: // Create chord by root note name and intervals from root var chordByIntervals = new Chord(NoteName.A, Interval.FromHalfSteps(2), Interval.FromHalfSteps(5)); // Create A B chord var chordByNotesNames = new Chord(NoteName.A, NoteName.B); // Create C Major chord var cMajorTriad = Chord.GetByTriad(NoteName.C, ChordQuality.Major); // ... or parse it from string var cMajorTriadFromString = Chord.Parse(\"C\"); // Parse more complex chord from string var cAug7Chord = Chord.Parse(\"Caug7\"); Last chord will contain C, E, G# and A# notes as expected. Chords parsing uses Chord Names Table (CNT) so not all possible chords can be parsed since CNT contains limited set of chords naming rules. If you notice that some known chord name is not parsed by DryWetMIDI, please create an issue on GitHub and CNT will be extended. See following section for details. Parsing Following strings can be parsed to Chord : RootNote ChordCharacteristic RootNote ChordCharacteristic BassNote where RootNote is the root note of a chord, for example, A or C# . ChordCharacteristic is combination of chord quality, altered and added tones and so on. See Chords names table section below to learn what characteristics are supported by the library. BassNote is an added bass note the chord will be placed over. Examples of valid chord strings: C Caug7 Cm Am Cm7 CmM7 Csus2 C9sus4 F/G C7b5 Chords names table Following table shows what chords currently supported for parsing from string and for retrieving names by chords notes. First column lists names and second one shows intervals from root. For example, 0 1 5 for C give us following chord: C C# E . Please note that some interval sets start from number greater than zero. Currently the library doesn't support chords with omitted root, but the feature will be implemented in the future. Names Intervals maj M 0 4 7 min m 0 3 7 sus4 0 5 7 sus2 0 2 7 b5 0 4 6 dim 0 3 6 aug 0 4 8 min6 m6 0 3 7 9 maj6 M6 6 0 4 7 9 7 0 4 7 10 7sus4 0 5 7 10 7sus2 0 2 7 10 min7 m7 0 3 7 10 min9 min7(9) m9 m7(9) 0 3 7 10 14 0 3 10 14 3 10 14 (not supported) 3 7 10 14 (not supported) min11 min7(9,11) m11 m7(9,11) 0 3 7 10 14 17 0 3 10 14 17 3 10 14 17 (not supported) 3 7 10 14 17 (not supported) maj7 0 4 7 11 maj7(9) M7(9) 0 4 7 11 14 0 4 11 14 4 11 14 (not supported) 4 7 11 14 (not supported) maj7(#11) M7(#11) 0 4 7 11 14 18 0 4 11 14 18 4 11 14 18 (not supported) 4 7 11 14 18 (not supported) maj7(13) M7(13) 0 4 7 11 21 0 4 11 21 4 11 21 (not supported) 4 7 11 21 (not supported) maj7(9,13) M7(9,13) 0 4 7 11 14 21 0 4 11 14 21 4 11 14 21 (not supported) 4 7 11 14 21 (not supported) maj7#5 M7#5 0 4 8 11 maj7#5(9) M7#5(9) 0 4 8 11 14 4 8 11 14 (not supported) minMaj7 mM7 0 3 7 11 minMaj7(9) mM7(9) 0 3 7 11 14 0 3 11 14 3 11 14 (not supported) 3 7 11 14 (not supported) 5 0 7 7b5 dom7dim5 7dim5 0 4 6 10 ø ø7 m7b5 min7dim5 m7dim5 min7b5 m7b5 0 3 6 10 aug7 7#5 7+5 0 4 8 10 dim7 0 3 6 9 add9 0 4 7 14 minAdd9 mAdd9 0 3 7 14 maj6(9) 6(9) 6/9 M6/9 M6(9) 0 4 7 9 14 4 7 9 14 (not supported) 0 4 9 14 4 9 14 (not supported) min6(9) m6(9) m6/9 min6/9 0 3 7 9 14 3 7 9 14 (not supported) 0 3 9 14 3 9 14 (not supported) 9 0 4 7 10 14 9sus2 0 2 7 10 14 9sus4 0 5 7 10 14 11 0 4 7 10 14 17 7b9 0 4 7 10 13 add11 0 4 7 17 7#11 7+11 7(#11) 7aug11 0 4 7 10 18"
  },
  "articles/music-theory/Chord-progression.html": {
    "href": "articles/music-theory/Chord-progression.html",
    "title": "Chord progression | DryWetMIDI",
    "keywords": "Chord progression ChordProgression represents set of chords which represents musical chord progression. Some examples of usage: // Get I-II-IV chord progression for C Major scale var chordProgression = ChordProgression.Parse(\"I-II-IV\", Scale.Parse(\"C major\")); // Get chords of chord progression var chords = chordProgression.Chords; Parsing Following strings can be parsed to ChordProgression : DegreeNumber ChordCharacteristic - DegreeNumber ChordCharacteristic - ... - DegreeNumber ChordCharacteristic where DegreeNumber is a scale degree as a roman number, for example, I or IV . ChordCharacteristic is combination of chord quality, altered and added tones and so on. See Parsing section of Chord article to learn more. Examples of valid chord progression strings: I-II-IV Im-II7-V"
  },
  "articles/music-theory/Interval.html": {
    "href": "articles/music-theory/Interval.html",
    "title": "Interval | DryWetMIDI",
    "keywords": "Interval Interval holds number of half steps and used, for example, to transpose notes or describing chords when working with PatternBuilder . Some examples of usage: // Get A4 note var a4 = Octave.Get(4).A; // Transpose the note up by two half steps var twoHalfTonesUp = Interval.FromHalfSteps(2); var b4 = a4 + twoHalfTonesUp; // Transpose the note down by two octaves var twoOctavesDown = Interval.FromHalfSteps(-24); var a2 = a4.Transpose(twoOctavesDown); // Transpose the note up by three half steps var c5 = a4 + Interval.Three; // Invert interval var twoOctavesUp = -twoOctavesDown; Parsing Following strings can be parsed to Interval : HalfSteps IntervalQuality IntervalNumber where HalfSteps is a number of half-steps, for example, +4 or -10 . IntervalQuality is one of the following letters: P for perfect interval; d for diminished interval; A for augmented interval; m for minor interval; M for major interval. IntervalNumber is a number of interval, for example, 1 . A number must be greater than zero. Examples of valid interval strings: +8 0 7 -123 P5 m3 M3 D21 d8 A7 a18"
  },
  "articles/music-theory/Note.html": {
    "href": "articles/music-theory/Note.html",
    "title": "Note | DryWetMIDI",
    "keywords": "Note Note class holds a note's name and octave number. To get an instance of Note , call appropriate Get (for example, Get(noteName, octave) ) static method or parse a note from string. You can also get specific note using corresponding property of Octave class. Some examples of usage: // Get note with number of 100 var note1 = Note.Get((SevenBitNumber)100); // Get A#2 note var note2 = Note.Get(NoteName.ASharp, 2); // ... or var note3 = Octave.Get(2).ASharp; // Parse a note var note4 = Note.Parse(\"a3\"); var note5Parsed = Note.TryParse(\"c#2\", out var note5); Also see Interval article for additional examples. Parsing Following strings can be parsed to Note : NoteName Accidental Accidental ... Accidental OctaveNumber where NoteName is one of the letters: C , D , E , F , G , A or B . Accidental is one of the following strings: # or sharp for sharp; b or flat for flat. OctaveNumber is a number of octave. A number must be between -1 and 9 . Examples of valid note strings: D3 F##3 Fb 1 C#b4"
  },
  "articles/music-theory/Octave.html": {
    "href": "articles/music-theory/Octave.html",
    "title": "Octave | DryWetMIDI",
    "keywords": "Octave The main purpose of the Octave class is to provide alternative way to get an instance of the Note class. Some examples of usage: // Get first octave var firstOctave = Octave.Get(1); // Then we can get notes from this octave in a simple way var aSharpNote = firstOctave.ASharp; var bNote = firstOctave.B; // Get middle C note var middleC = Octave.Middle.C; Parsing Following strings can be parsed to Octave : OctaveNumber where OctaveNumber is a number of octave. A number must be between -1 and 9 . Examples of valid interval strings: -1 8 0"
  },
  "articles/music-theory/Overview.html": {
    "href": "articles/music-theory/Overview.html",
    "title": "Music Theory - Overview | DryWetMIDI",
    "keywords": "Music Theory - Overview DryWetMIDI provides types and methods to work with music theory objects like scale or chord progression, and provides ways to use them within MIDI. Following list shows what objects you can work with: Octave ; Interval ; Note ; Chord ; Chord progression ; Scale . Note that DryWetMIDI uses Scientific Pitch Notation so middle C note is C4 one. Octave.Middle returns that 4th octave. You can read interesting discussion about different notations here: MIDI Octave and Note Numbering Standard . All corresponding classes have Parse and TryParse method so you can get an instance of a class from string. For example, you can parse \"C#\" string to C# note."
  },
  "articles/music-theory/Scale.html": {
    "href": "articles/music-theory/Scale.html",
    "title": "Scale | DryWetMIDI",
    "keywords": "Scale DryWetMIDI provides Scale class to work with musical scales. Some examples of usage: // Create C Major scale var cMajorScale = new Scale(ScaleIntervals.Major, NoteName.C); // Get a note that belongs to C Major scale next to the C2. var d2 = cMajorScale.GetNextNote(Octave.Get(2).C); // Get a note that belongs to C Major scale previous to the F2. var e2 = cMajorScale.GetPreviousNote(Octave.Get(2).F); // Get note by scale degree var c = cMajorScale.GetDegree(ScaleDegree.Tonic); // Get ten ascending notes that belong to C Major scale starting from D2 var tenAscendingNotes = cMajorScale.GetAscendingNotes(Octave.Get(2).D).Take(10); // Get five descending notes that belong to C Major scale starting from F4 var fiveDescendingNotes = cMajorScale.GetDescendingNotes(Octave.Get(4).F).Take(5); // Parse a scale var dMinor = Scale.Parse(\"D minor\"); // Create custom scale by the specified intervals between adjacent notes and root note var customScale1 = new Scale(new[] { Interval.One, Interval.Seven, Interval.Two }, NoteName.CSharp); // Parse custom scale var customScaleParsed = Scale.TryParse(\"C# +1 +7 +2\", out var customScale2); Last example shows parsing of custom scale defined by tonic (C#) and intervals between adjacent degrees (+1, +7 and +2). So notes of the scale are C#, D, A and B. Parsing Following strings can be parsed to Scale : RootNote ScaleName RootNote Interval Interval ... Interval where RootNote is a note name (with or without accidental), for example, C or A# . ScaleName is the name of a known scale, for example, major or bebop minor . You can take a look at ScaleIntervals to see all known scales supported by the library. Interval is a string a musical interval can be parsed from. See Parsing section of the Interval article to see how an interval can be represented as a string. Examples of valid scale strings: C major D blues A# P5 d7 Bb +3 +1 +4"
  },
  "articles/playback/Common-problems.html": {
    "href": "articles/playback/Common-problems.html",
    "title": "Common problems | DryWetMIDI",
    "keywords": "Common problems Playback doesn't produce sound or events logs Make sure an instance of Playback class is holded by class field, global variable or something else that can live longer that method where you instantiate Playback . In this case private void StartPlayback() { var playback = _midiFile.GetPlayback(); playback.Start(); } playback variable will \"die\" (will be ready to be collected by GC) after program exits StartPlayback method so playback won't work. Unity hangs or crash on entering Play mode second time By default Playback uses HighPrecisionTickGenerator tick generator (see Tick generator article to learn more). HighPrecisionTickGenerator uses WinAPI methods by P/Invoke wich causes troubles in Unity environment. You may notice that Unity hangs forever if you hit Play button second time. Unfortunately it seems the problem won't be fixed. Answer of Unity tech support: Unfortunately, that is correct = we will not be able to fix this in the near term because it probably requires rewriting of internal threading functionality, which might introduce new issues. The main case has been tagged for a revisit internally, but it will probably be months until the case is re-valuated again. Solution is to use either RegularPrecisionTickGenerator or a custom one. Related issues on GitHub: Playback produces unexpected results in Unity Visualization of notes SetActive can only be called from the main thread in Unity Sometimes you want to handle playback events or use event or note callbacks. Your code can be executed on separate thread in these cases. It can happen because of Playback 's internals (like tick generator 's tick handling) work on separate thread. But UI related things like call of SetActive can be executed on UI thread only. You can use the solution from here: https://stackoverflow.com/a/56715254 . Related issues on GitHub: trigger object with a note in Unity"
  },
  "articles/playback/Current-time-watching.html": {
    "href": "articles/playback/Current-time-watching.html",
    "title": "Current time watching | DryWetMIDI",
    "keywords": "Current time watching To watch current time of a playback you can create a timer and call GetCurrentTime method on each timer's tick. To simplify this task (especially if you're running multiple playbacks simultaneously) DryWetMIDI provides PlaybackCurrentTimeWatcher class. This class is singleton in order to prevent too many high resolution tick generators are created (which is not good since it can affect whole system performance). Please read Tick generator article to learn how you can ajust internals of the PlaybackCurrentTimeWatcher . Small example: PlaybackCurrentTimeWatcher.Instance.AddPlayback(playback, TimeSpanType.Midi); PlaybackCurrentTimeWatcher.Instance.CurrentTimeChanged += OnCurrentTimeChanged; PlaybackCurrentTimeWatcher.Instance.Start(); // ... private static void OnCurrentTimeChanged(object sender, PlaybackCurrentTimeChangedEventArgs e) { foreach (var playbackTime in e.Times) { var playback = playbackTime.Playback; var time = (MidiTimeSpan)playbackTime.Time; Console.WriteLine($\"Current time is {time}.\"); } } In this example we watch current time of playback and request to report time in MIDI format which is ticks (and thus we cast received time to MidiTimeSpan ). You can set any desired time format and cast to corresponding implementation of the ITimeSpan . You can add multiple different playbacks to watch their current times. When you don't want to watch playback anymore remove it from the watcher: PlaybackCurrentTimeWatcher.Instance.RemovePlayback(playback); By default polling interval of watcher is 100 ms, but you can alter it: PlaybackCurrentTimeWatcher.Instance.PollingInterval = TimeSpan.FromMilliseconds(50); Please don't set too small intervals. Polling interval defines how often CurrentTimeChanged event will be fired. If you want to pause firing the event, call Stop method. When your application is about to close, dispose watcher to kill the internal timer: PlaybackCurrentTimeWatcher.Instance.Dispose();"
  },
  "articles/playback/Custom-playback.html": {
    "href": "articles/playback/Custom-playback.html",
    "title": "Custom playback | DryWetMIDI",
    "keywords": "Custom playback You can subclass from Playback to make your own playback by overriding some protected virtual methods: bool TryPlayEvent(MidiEvent midiEvent, object metadata) IEnumerable GetTimedEvents(ITimedObject timedObject) Let's see what each method needed for. TryPlayEvent TryPlayEvent method called by playback each time an event should be played. Result value of the method tells playback whether the event was played or not. Default implementation of the method just sends a MIDI event to output device and returns true . So you can implement your own logic of playing a MIDI event. Please pay attention to the second parameter of the method - metadata . If input objects of playback implement IMetadata interface, metadata will be passed via that parameter. For example, you can subclass from TimedEvent and implement IMetadata on a new class, and then create your own playback on instances of that class. Sample code below shows how to play a MIDI file filtering out events within first track chunk: private sealed class TimedEventWithTrackChunkIndex : TimedEvent, IMetadata { public TimedEventWithTrackChunkIndex(MidiEvent midiEvent, long time, int trackChunkIndex) : base(midiEvent, time) { Metadata = trackChunkIndex; } public object Metadata { get; set; } } private sealed class MyPlayback : Playback { public MyPlayback(IEnumerable<ITimedObject> timedObjects, TempoMap tempoMap) : base(timedObjects, tempoMap) { } protected override bool TryPlayEvent(MidiEvent midiEvent, object metadata) { if (metadata == 0) return false; OutputDevice?.SendEvent(midiEvent); return true; } } Then create MyPlayback : var timedEvents = midiFile .GetTrackChunks() .SelectMany((c, i) => c.GetTimedEvents().Select(e => new TimedEventWithTrackChunkIndex(e.Event, e.Time, i))) .OrderBy(e => e.Time); var tempoMap = midiFile.GetTempoMap(); var playback = new MyPlayback(timedEvents, tempoMap); GetTimedEvents Playback internally transforms all input objects to instances of TimedEvent . So if some input objects implement ITimedObject but their type is unknown for DryWetMIDI, we need to override GetTimedEvents method to provide transformation of our custom timed object to collection of timed events. Of course those timed events can be subclasses of TimedEvent and implement IMetadata (see previous section) so metadata will correctly go between a playback's internals. By default the method returns empty collection."
  },
  "articles/playback/Data-tracking.html": {
    "href": "articles/playback/Data-tracking.html",
    "title": "Playback data tracking | DryWetMIDI",
    "keywords": "Playback data tracking Playback provides a way to track some MIDI data to correctly handle jumps in time and get properly sounding data. There are two main groups of data to track: notes MIDI parameters (pitch bend, program, control value) Notes tracking Let's take a look at the following events sequence to play: Playback class has TrackNotes property. If its value is true , playback will internally construct notes based on input objects to play. So in our example one note will be constructed: Now let's imagine a playback's time is at some point and we want to jump to a new one (with MoveToTime for example): If we now jump to a new time that falls in the middle of the note, behavior of the playback will be different depending on TrackNotes property value. In case of the property value is false nothing special will happen, just the current time of the playback will be changed. But if we set TrackNotes to true , new Note On event will be generated and played when we jump to the new time: The same situation with opposite case: So we want here to jump from the middle of a note to the time after the note. As in previous example if TrackNotes is false , just the current time of the playback will be changed. But if in case of true , new Note Off event will be generated and played when we jump to the new time. So TrackNotes = true tells playback to track time jumps when the current time pointer of the playback either leaves a note or enters one to finish or start the note correspondingly. Of course in cases like this: playback will play both Note Off event (since we're leaving the first note) and Note On one (since we're entering the second note). MIDI parameters values tracking Let's imagine we have the following events sequence to play: And now we want to jump from the current time of a playback to a new time (with MoveToTime for example): So by the current time A event is played and the current program corresponds to A . If the playback just change the current time, the note will be played using program A which may be wrong since the note is actually is under B program influence. To track a program Playback class has TrackProgram property. If it's set to false , nothing will happen except changing the current time. All following notes can sound incorrectly due to possibly skipped program changes. But if we set TrackProgram to true , playback will play required Program Change event immediately after time changed. So in our example B will be played and then playback continues from new time: Program tracking works in opposite direction too of course: We have program B active at the current time. But when we jump to a new time (before B but after A ), A event will be played. Playback can track at now three MIDI parameters: program ; pitch bend ; control value . We have discussed program tracking above. But tracking the remaining two parameters is absolutely the same. To track pitch bend value there is TrackPitchValue property. To track control value there is TrackControlValue property. Of course all these parameters are tracked separately for each MIDI channel and in addition to this control value tracked separately for each control number."
  },
  "articles/playback/Overview.html": {
    "href": "articles/playback/Overview.html",
    "title": "Playback - Overview | DryWetMIDI",
    "keywords": "Playback - Overview Playback class allows to play MIDI events via an IOutputDevice (see Output device article) or without a device at all (see Playback without device ). To get an instance of the Playback you can use its constructors or GetPlayback extension methods in PlaybackUtilities . Following example shows simple console app where specified MIDI file is played until end of the file reached or B note is about to be played. So in our example B note means to stop playback. using System; using System.Linq; using System.Threading; using Melanchall.DryWetMidi.Core; using Melanchall.DryWetMidi.Multimedia; namespace SimplePlaybackApp { class Program { private static Playback _playback; static void Main(string[] args) { var midiFile = MidiFile.Read(\"The Greatest Song Ever.mid\"); var outputDevice = OutputDevice.GetByName(\"Microsoft GS Wavetable Synth\"); _playback = midiFile.GetPlayback(outputDevice); _playback.NotesPlaybackStarted += OnNotesPlaybackStarted; _playback.Start(); SpinWait.SpinUntil(() => !_playback.IsRunning); Console.WriteLine(\"Playback stopped or finished.\"); outputDevice.Dispose(); _playback.Dispose(); } private static void OnNotesPlaybackStarted(object sender, NotesEventArgs e) { if (e.Notes.Any(n => n.NoteName == Melanchall.DryWetMidi.MusicTheory.NoteName.B)) _playback.Stop(); } } } Please read Tick generator article and PlaybackSettings class documentation to learn how you can adjust playback's internals. Playback without device There are constructors of Playback that don't accept IOutputDevice as an argument. It can be useful, for example, for notes visualization without sound. Playback provides events that will be fired with or without output device (see Events section of the Playback API page). Also all GetPlayback extensions methods have overloads without the outputDevice parameter. Also if you don't specify output device and use tick generator other than HighPrecisionTickGenerator , you can use Playback in cross-platform app like Unity game that is supposed to be built for different platforms. Blocking playback If you call Play method of the Playback , the calling thread will be blocked until entire collection of MIDI events will be played. Note that execution of this method will be infinite if the Loop property set to true . There are also extension methods Play in PlaybackUtilities : using (var outputDevice = OutputDevice.GetByName(\"Output MIDI device\")) { MidiFile.Read(\"Some MIDI file.mid\").Play(outputDevice); // ... } Non-blocking playback Is you call Start method of the Playback , execution of the calling thread will continue immediately after the method is called. To stop playback use Stop method. Note that there is no any pausing method since it's useless. Stop leaves playback at the point where the method was called. To move to the start of the playback use MoveToStart method. Important You should be very careful with this approach and using block. Example below shows the case where part of MIDI data will not be played because of playback is disposed before the last MIDI event will be played: using (var outputDevice = OutputDevice.GetByName(\"Output MIDI device\")) using (var playback = MidiFile.Read(\"Some MIDI file.mid\").GetPlayback(outputDevice)) { playback.Start(); // ... } With non-blocking approach you must call Dispose manually after you've finished work with playback object."
  },
  "articles/playback/Tick-generator.html": {
    "href": "articles/playback/Tick-generator.html",
    "title": "Tick generator | DryWetMIDI",
    "keywords": "Tick generator Playback uses timer under the hood. In DryWetMIDI this timer called tick generator. On every tick of timer playback looks what objects should be played by the current time, plays them and advances position within objects list waiting for next tick. To make playback smooth and correct, precision of timer should be ~1ms. So tick will be generated every one millisecond. By default, DryWetMIDI uses HighPrecisionTickGenerator which is the best option in terms of CPU usage, memory usage and precision. Important HighPrecisionTickGenerator is supported for Windows and macOS only at now. You can also use RegularPrecisionTickGenerator which uses standard Timer and thus provides precision about 16ms on Windows. But this tick generator is cross-platform. Tick generator can be specified via playbackSettings parameter of Playback 's constructors or GetPlayback extension methods within PlaybackUtilities : var playback = midiFile.GetPlayback(new PlaybackSettings { ClockSettings = new MidiClockSettings { CreateTickGeneratorCallback = () => new RegularPrecisionTickGenerator() } }); Custom tick generator All built-in tick generators extend abstract TickGenerator class so you can create your own and use it for Playback and PlaybackCurrentTimeWatcher . As an example we create simple loop tick generator working in separate thread. The code is: private sealed class ThreadTickGenerator : TickGenerator { private Thread _thread; private bool _isRunning; private bool _disposed; protected override void Start(TimeSpan interval) { if (_thread != null) return; _thread = new Thread(() => { var stopwatch = new Stopwatch(); var lastMs = 0L; stopwatch.Start(); _isRunning = true; while (_isRunning) { var elapsedMs = stopwatch.ElapsedMilliseconds; if (elapsedMs - lastMs >= interval.TotalMilliseconds) { GenerateTick(); lastMs = elapsedMs; } } }); _thread.Start(); } protected override void Dispose(bool disposing) { if (_disposed) return; if (disposing) { _isRunning = false; } _disposed = true; } } And then use it: var playback = midiFile.GetPlayback(new PlaybackSettings { ClockSettings = new MidiClockSettings { CreateTickGeneratorCallback = () => new ThreadTickGenerator() } }); Of course this tick generator will use a lot of CPU due to infinite loop but it's for demo purposes only. Manual ticking Also you can tick playback's internal clock manually without tick generator via TickClock method of Playback . For example, you can use manual ticking within every frame update in Unity. To use only manual ticking you should return null in CreateTickGeneratorCallback : var playback = midiFile.GetPlayback(new PlaybackSettings { ClockSettings = new MidiClockSettings { CreateTickGeneratorCallback = () => null } }); and then call playback.TickClock(); when needed. You also can use manual ticking in conjunction with tick generator."
  },
  "articles/recording/Overview.html": {
    "href": "articles/recording/Overview.html",
    "title": "Recording - Overview | DryWetMIDI",
    "keywords": "Recording - Overview To capture MIDI data from an input MIDI device (see Input device article) you can use Recording class which will collect incoming MIDI events. To start recording you need create an instance of the Recording class passing tempo map and input device to its constructor: using Melanchall.DryWetMidi.Multimedia; using Melanchall.DryWetMidi.Interaction; // ... using (var inputDevice = InputDevice.GetByName(\"Input MIDI device\")) { var recording = new Recording(TempoMap.Default, inputDevice); // ... } Don't forget to call StartEventsListening on IInputDevice before you start recording since Recording do nothing with the device you've specified. To start recording call Start method. To stop it call Stop method. You can resume recording after it has been stopped by calling Start again. To check whether recording is currently running or not, get a value of the IsRunning property. Start and Stop methods fire Started and Stopped events respectively. You can get recorded events as with GetEvents method. Take a look at small example of MIDI data recording: using (var inputDevice = InputDevice.GetByName(\"Input MIDI device\")) { var recording = new Recording(TempoMap.Default, inputDevice); inputDevice.StartEventsListening(); recording.Start(); // ... recording.Stop(); var recordedFile = recording.ToFile(); recording.Dispose(); recordedFile.Write(\"Recorded data.mid\"); }"
  },
  "articles/tools/Merger.html": {
    "href": "articles/tools/Merger.html",
    "title": "Merger | DryWetMIDI",
    "keywords": "Merger To merge nearby objects into one DryWetMIDI provides Merger class. Quick example of merging in action: Process of merging can be adjusted via ObjectsMergingSettings . By default two objects should have no gap between them to be merged. But you can specify any desired tolerance via settings: var newObjects = objects.MergeObjects( TempoMap.Default, new ObjectsMergingSettings { Tolerance = new MetricTimeSpan(0, 0, 1) }); Now objects will be merged if the distance between them from 0 to 1 second. So tolerance is maximum distance between two objects to consider them as nearby. Please take a look at how tolerance ( T ) affects process of merging: Of course merging available not for objects collections only. You can use also MergeObjects methods on MidiFile and TrackChunk : midiFile.MergeObjects( ObjectType.Note | ObjectType.Chord, new ObjectsMergingSettings { Filter = obj => obj.Time > 100 }, new ObjectDetectionSettings { ChordDetectionSettings = new ChordDetectionSettings { NotesMinCount = 3 } }); The tool need to determine somehow whether two objects have the same \"key\" or not to take decision about merging them. For example, if we have a C note and D one, by default such notes are different in terms of their keys and thus won't be merged. To understand what the key is, please read MIDI file splitting: SplitByObjects article. Of course you can customize how objects are merged. For example, following picture shows how chords are merged using the default merging logic: Now let's change the logic: chords can be merged only if there are notes in them without gap. Also notes in result chord need to start at the same time and have the same length. Following image shows how chords will be merged: We need to derive from the ObjectsMerger class to implement these rules: private sealed class ChordsMerger : ObjectsMerger { public ChordsMerger(ILengthedObject obj) : base(obj) { } public override bool CanAddObject(ILengthedObject obj, TempoMap tempoMap, ObjectsMergingSettings settings) { if (!base.CanAddObject(obj, tempoMap, settings)) return false; var chordNotes = ((Chord)obj).Notes.ToArray(); var lastChordNotes = ((Chord)_objects.Last()).Notes.ToArray(); return Enumerable .Range(0, lastChordNotes.Length) .Any(i => lastChordNotes[i].EndTime == chordNotes[i].Time); } public override ILengthedObject MergeObjects(ObjectsMergingSettings settings) { var result = (Chord)base.MergeObjects(settings); var time = result.Time; var length = result.Length; foreach (var note in result.Notes) { note.Time = time; note.Length = length; } return result; } } And now we can merge objects using this class: midiFile.MergeObjects( ObjectType.Chord | ObjectType.Note, new ObjectsMergingSettings { ObjectsMergerFactory = obj => obj is Chord ? new ChordsMerger(obj) : new ObjectsMerger(obj) }, new ObjectDetectionSettings { ChordDetectionSettings = new ChordDetectionSettings { NotesTolerance = 100 } }); So if the tool encounters a chord, it uses our custom merger; for any other object's type - default one."
  },
  "articles/tools/MIDI-file-splitting.html": {
    "href": "articles/tools/MIDI-file-splitting.html",
    "title": "MIDI file splitting | DryWetMIDI",
    "keywords": "MIDI file splitting You can split a MIDI file in different ways using extension methods from the Splitter class. Available methods are described below. Please note that the article doesn't cover all possible methods and their settings. Please read API documentation on Splitter to get complete information. SplitByChannel SplitByChannel method splits a MIDI file by channel so all channel events will be separated by channel and copied to corresponding new files. All meta and system exclusive events will be copied to all the new files (that's default behavior that can be turned off). Thus each new file will contain all meta and sysex events and channel ones for a single channel. The image below illustrates this process: SplitByObjects SplitByObjects method splits a MIDI file by objects. The process can be adjusted via SplitByObjectsSettings passed to the second parameter of the method. For example, to split a file by notes copying all MIDI events to each new file: var newFiles = midiFile.SplitByObjects( ObjectType.Note | ObjectType.TimedEvent, new SplitByObjectsSettings { WriteToAllFilesPredicate = obj => obj is TimedEvent }); Here we specify that we need to split the file by notes and timed events, but every timed event must be written to all result files. So in fact we're splitting the file by notes having all non-notes timed events presented in each new file. The image below illustrates the process: To split a file by objects the tool needs to determine the key of each object. Objects with the same key will be outputted in a separate file. In the example above default logic of key calculation is used. The following table shows what a default key is for each type of an object: Object type Key TimedEvent The type of the underlying event ( EventType of TimedEvent.Event ). Note Pair of the channel and note number of a note. Chord Collection of keys of the underlying notes . Rest Pair of the channel and note number of a rest. You can alter key calculation logic providing custom key selector. For example, to separate notes by only note number ignoring a note's channel: var newFiles = midiFile.SplitByObjects( ObjectType.Note | ObjectType.TimedEvent, new SplitByObjectsSettings { KeySelector = obj => obj is Note note ? ObjectIdUtilities.GetObjectId(note.NoteNumber) : obj.GetObjectId(), WriteToAllFilesPredicate = obj => obj is TimedEvent }); ObjectIdUtilities.GetObjectId(value) returns an implementation of IObjectId which simply holds the provided value. ObjectIdUtilities.GetObjectId(object) returns the default ID (key) for an object. So if an object is a note, we use its note number as the key; and default key for any other object types. If custom logic of key selection is complex, you may decide to implement the IObjectId interface and return that implementation. Just for example, let's create an ID class that identifies a chord by its shortest name: private sealed class ChordNameId : IObjectId { private readonly string _name; public ChordNameId(Chord chord) { _name = chord.GetMusicTheoryChord().GetNames().FirstOrDefault(); } public override bool Equals(object obj) => obj is ChordNameId chordNameId && chordNameId._name == _name; public override int GetHashCode() => _name.GetHashCode(); } And now we can use it to split a file by chords of the same name: var newFiles = midiFile.SplitByObjects( ObjectType.Chord, new SplitByObjectsSettings { KeySelector = obj => new ChordNameId((Chord)obj) }); Please see documentation on SplitByObjectsSettings to learn more about how you can adjust the process of splitting. SplitByGrid SplitByGrid method splits MIDI file by the specified grid. Each file will preserve original tempo map and all parameters changes (like a control value or program changes). The image below shows general case of splitting a MIDI file by grid: Splitting can be adjusted via settings parameter of the SliceMidiFileSettings type. SplitNotes and PreserveTimes properties described below. Please see all available properties in documentation for SliceMidiFileSettings . SplitNotes SplitNotes indicates whether notes should be split at points of grid intersection or not. The default value is true . If false used, notes treated as just Note On / Note Off events rather than note objects. Splitting notes produces new Note On / Note Off events at points where grid intersects notes if the property set to true . The following image shows splitting by grid if SplitNotes set to false : PreserveTimes PreserveTimes indicates whether original times of events should be preserved or not. The default value is false . If false used, events will be moved to the start of a new file. If true used, events will be placed in new files at the same times as in the input file. The following image shows splitting in case of PreserveTimes set to true : SkipPart SkipPart method skips part of the specified length of a MIDI file and returns remaining part as an instance of MidiFile . The image below shows general case of skipping a part of a MIDI file: TakePart TakePart methods take part of the specified length of a MIDI file (starting at the start or at the specified time within the file) and return it as an instance of MidiFile . The image below shows both cases of taking a part of a MIDI file: CutPart CutPart method cuts a part of the specified length from a MIDI file (starting at the specified time within the file) and returns a new instance of MidiFile which is the original file without the part. The image below shows how the method works:"
  },
  "articles/tools/Objects-splitting.html": {
    "href": "articles/tools/Objects-splitting.html",
    "title": "Objects splitting | DryWetMIDI",
    "keywords": "Objects splitting With DryWetMIDI you can use methods of the Splitter class to split objects: SplitObjectsByStep SplitObjectsByPartsNumber SplitObjectsByGrid SplitObjectsAtDistance Each method takes collection of timed objects or MIDI containers (like file or track chunk ) and splits objects within by the specified strategy. These methods are discussed in details below. Also please note that every class that implements ILengthedObject has Split method allowing to split an object at the specified time. SplitObjectsByStep SplitObjectsByStep methods split each object by the specified step starting at the start of an object. For example, if step is 1 second, an object will be split at 1 second from its start, at 1 second from previous point of splitting ( 2 seconds from the object's start), at 1 second from previous point of splitting ( 3 seconds from the object's start) and so on. If an object's length is less than the specified step, the object will not be split and copy of it will be returned. The image below illustrates splitting notes and chord by the same step: SplitObjectsByPartsNumber SplitObjectsByPartsNumber methods split each object into the specified number of parts of equal length. It is necessary to specify the lengthType argument to meet your expectations. For example, with metric type each part of an input object will last the same number of microseconds, while with musical type each part's length will represent the same fraction of the whole note's length. But the length of parts can be different in terms of MIDI ticks using different length type depending on tempo map passed to the method. The image below illustrates splitting notes and chord into 4 parts: SplitObjectsByGrid SplitObjectsByGrid methods split each object by the specified grid. Objects will be split at points of crossing the grid. The image below illustrates splitting notes and chord by the same grid: SplitObjectsAtDistance SplitObjectsAtDistance methods split each object at the specified distance or by the specified ratio from start or end of an object (which is defined by from parameter). It is necessary to specify the lengthType argument for splitting by ratio to meet your expectations. The image below illustrates splitting notes and chord at the same distance from the start of an object: Next image illustrates splitting notes and chord by the ration of 0.25 from the end of an object:"
  },
  "articles/tools/Overview.html": {
    "href": "articles/tools/Overview.html",
    "title": "Overview | DryWetMIDI",
    "keywords": "Overview DryWetMIDI provides some useful tools to solve complex tasks: Splitter to split objects and MIDI files in many different ways. Quantizer to quantize objects. Merger to merge nearby objects. Resizer to resize groups of objects or MIDI files. Repeater to repeat groups of objects or MIDI files. CSV converter to convert MIDI objects to CSV representation and read them back."
  },
  "articles/tools/Quantizer.html": {
    "href": "articles/tools/Quantizer.html",
    "title": "Quantizer | DryWetMIDI",
    "keywords": "Quantizer DryWetMIDI provides a tool to perform quantizing of objects of different types by the specified grid. The class aimed to solve this task is Quantizer . Sections below describe usage of the tool in details. Note that quantizing routine modifies passed objects instead of returning new ones with quantized times. So be sure you've cloned input objects if you want to save them. All classes implementing ITimedObject as well as MidiFile and TrackChunk have Clone method you can use for that purpose. Also there are QuantizerUtilities class that contains useful methods to quantize objects inside TrackChunk and MidiFile without necessity to work with objects collections directly. Please note that the article doesn't cover all settings and use cases so please read API documentation on Quantizer to get complete information. General information First of all let's see how arbitrary timed objects quantized: Quantizing can be adjusted in many ways by the QuantizingSettings . Please read documentation on the class to see all available properties. For example, image below shows quantizing with different values of QuantizingLevel : Quantizing ILengthedObject An arbitrary object implements ITimedObject and thus its Time property gets quantized. But if an object implements ILengthedObject interface, you have several options: quantize start time; quantize end time; quantize both start and end times. You choose the desired option specifying QuantizingSettings.Target property. By default if an object quantized, it will be entirely moved to a grid position. So if you quantize start time, end time can be changed since the object will be moved. You can see the process in action on the first image of the article. Of course this behavior can be altered. Just set FixOppositeEnd to true to prevent changing of time that is not the target of quantizing. The following image illustrates quantizing of start time with the property set to true : Of course this property works in case of end time quantizing too. When the start time of an object is not fixed, there is a chance that the object's end time will be quantized in a such way that the start time will be negative due to the object is moved to the left. Negative time is invalid so you can set QuantizingSettings.QuantizingBeyondZeroPolicy property to desired value to handle this situation. The image below shows how quantizing works if the property set to FixAtZero : Also if one side (start or end) of an object is fixed, there is a chance that the object's opposite time will be quantized in a such way that the object will be reversed resulting to negative length. You can handle this situation with QuantizingSettings.QuantizingBeyondFixedEndPolicy property. The image below shows some options in action when start time is being quantized beyond the end one: Custom quantizing You can derive from the Quantizer class and override its OnObjectQuantizing method. Inside this method you can decide whether quantizing for an object should be performed or not and if yes, what new time should be set. Information about what quantizer is going to do with an object is passed via quantizedTime parameter of QuantizedTime type. Image below shows what information is holded within this class: A : GridTime Grid time that was selected for an object as the nearest one. B : NewTime The new time of an object that was calculated during quantizing. C : DistanceToGridTime The distance between an object's current time and the nearest grid time. There is also ConvertedDistanceToGridTime which holds the distance as time span of the type specified by DistanceCalculationType property of quantizing settings. D : Shift The distance an object is going to be moved on toward the new time. If QuantizingLevel is less than 1.0 , D will be less than C . Let's create a simple custom quantizer. We will call it SoftQuantizer : public sealed class SoftQuantizer : Quantizer { protected override TimeProcessingInstruction OnObjectQuantizing( ITimedObject obj, QuantizedTime quantizedTime, IGrid grid, LengthedObjectTarget target, TempoMap tempoMap, QuantizingSettings settings) { return (MusicalTimeSpan)quantizedTime.ConvertedDistanceToGridTime > MusicalTimeSpan.Eighth ? TimeProcessingInstruction.Skip : base.OnObjectQuantizing(obj, quantizedTime, grid, target, tempoMap, settings); } } What it does? If distance between an object and the nearest grid time is greater than 1/8 , just don't quantize the object. Otherwise do base quantizing. Our small program to test the tool: class Program { static void Main(string[] args) { var tempoMap = TempoMap.Default; var midiFile = new PatternBuilder() .SetNoteLength(MusicalTimeSpan.Eighth) .StepForward(MusicalTimeSpan.Sixteenth) .Note(\"A5\") .StepForward(MusicalTimeSpan.Quarter) .Note(\"B2\") .StepForward(new MusicalTimeSpan(3, 8)) .Note(\"C#3\") .Build() .ToFile(tempoMap); Console.WriteLine(\"Notes before quantizing:\"); PrintNotes(midiFile); midiFile.QuantizeObjects( new SoftQuantizer(), ObjectType.Note, new SteppedGrid(MusicalTimeSpan.Whole), new QuantizingSettings { DistanceCalculationType = TimeSpanType.Musical }); Console.WriteLine(\"Notes after quantizing:\"); PrintNotes(midiFile); Console.WriteLine(\"Press any key to exit...\"); Console.ReadKey(); } static void PrintNotes(MidiFile midiFile) { var notes = midiFile.GetNotes(); var tempoMap = midiFile.GetTempoMap(); foreach (var note in notes) { var time = note.TimeAs<MusicalTimeSpan>(tempoMap); var length = note.LengthAs<MusicalTimeSpan>(tempoMap); Console.WriteLine($\"Note [{note}]: time = [{time}], length = [{length}]\"); } } } If we run the program, we'll get following output: Notes before quantizing: Note [A5]: time = [1/16], length = [1/8] Note [B2]: time = [7/16], length = [1/8] Note [C#3]: time = [15/16], length = [1/8] Notes after quantizing: Note [A5]: time = [0/1], length = [1/8] Note [B2]: time = [7/16], length = [1/8] Note [C#3]: time = [1/1], length = [1/8] Press any key to exit... So all works as expected, middle note is not quantized since it's too far from grid times."
  },
  "articles/tools/Repeater.html": {
    "href": "articles/tools/Repeater.html",
    "title": "Repeater | DryWetMIDI",
    "keywords": "Repeater With DryWetMIDI you can easily repeat groups of objects or entire MIDI files using the dedicated tool - Repeater . Quick example of repeating a group of different objects two times: It's a simple case. To calculate the distance to move each new part by, the tool looks at the value of the ShiftPolicy property of the settings passed to Repeat methods. The default value is ShiftPolicy.ShiftByMaxTime and you can see how this options works on the image above - the tool takes maximum time among all objects and shifts objects within each new part by this value. But you can use fixed value to shift objects by. You need to specify ShiftPolicy.ShiftByFixedValue for shift policy and set Shift property of the settings. So times of objects won't affect distance calculation now and data will be shifted by the value of the Shift property: var newFile = midiFile.Repeat(2, new RepeatingSettings { ShiftPolicy = ShiftPolicy.ShiftByFixedValue, Shift = new MetricTimeSpan(0, 0, 10) }); Also RepeatingSettings class provides options to round shift value (calculated by max time or constant one). It can be useful, for example, when objects are not aligned with the grid. Please take a look at the following image: Here the data doesn't reach bar line time, but we want to repeat the objects with aligning to bars lines. Obviously we can't use ShiftPolicy.ShiftByMaxTime option here. But we can't use ShiftPolicy.ShiftByFixedValue too because we don't know the length of data in general case. We just want to repeat the objects and be sure the start of the objects group is always on a bar line. So we can write this code: var newFile = midiFile.Repeat(2, new RepeatingSettings { ShiftPolicy = ShiftPolicy.ShiftByMaxTime, ShiftRoundingPolicy = TimeSpanRoundingPolicy.RoundUp, ShiftRoundingStep = new BarBeatTicksTimeSpan(1) }); We tell the tool here to round calculated shift value up using the step of 1 bar. By default ShiftRoundingPolicy property is set to TimeSpanRoundingPolicy.NoRounding but you can also set it TimeSpanRoundingPolicy.RoundDown along with TimeSpanRoundingPolicy.RoundUp shown above. Please see documentation on TimeSpanRoundingPolicy to learn more about rounding. Custom repeater You can derive from the Repeater class to make your own repeating logic. Let's imagine we want to repeat all notes transposing each repeated note by three semitones up and shifting it by 1/4 forward. So we need to skip non-note events and disable automatic shifting. The following image illustrates what we want to achieve: Well, our custom repeater class will be: private sealed class CustomRepeater : Repeater { protected override void ProcessPart(PartProcessingContext context) { base.ProcessPart(context); var newObjects = context .PartObjects .Where(obj => ((TimedEvent)obj).Event is NoteEvent) .ToArray(); context.PartObjects.Clear(); foreach (var obj in newObjects) { ((NoteEvent)((TimedEvent)obj).Event).NoteNumber += (SevenBitNumber)((context.PartIndex + 1) * 3); var originalTime = obj.TimeAs<MusicalTimeSpan>(context.SourceTempoMap); obj.SetTime( originalTime.Add(MusicalTimeSpan.Quarter * (context.PartIndex + 1), TimeSpanMode.TimeLength), context.SourceTempoMap); context.PartObjects.Add(obj); } } } And we will use it in this way: var newFile = new CustomRepeater().Repeat(midiFile, 3, new RepeatingSettings { ShiftPolicy = ShiftPolicy.None });"
  },
  "articles/tools/Resizer.html": {
    "href": "articles/tools/Resizer.html",
    "title": "Resizer | DryWetMIDI",
    "keywords": "Resizer DryWetMIDI provides the tool to resize a group of objects or an entire MIDI file - Resizer . Quick example of resizing in action: So as you can see the tool treats all passed objects as a single group and then sizes this group to the new length saving all time-to-length ratios. For example, if an event was at the middle of objects group, it will be at the middle of the group too after resizing. Following image explains this visually for the group of three notes: You use ResizeObjectsGroup methods to stretch or shrink a group of timed objects . You can size a group either to the specified new length or by ratio. Ratio means that all distances from the start of a group will be multiplied by this value. So if ratio of 2 is specified, an objects group will be enlarged by 2 times. And 0.5 means the group will be shrinked by 2 times (new length will be half ( 0.5 ) of the original one). There also Resize methods to resize MidiFile or TrackChunk . If you're resizing a group or file to the specified length, please take care of the distance calculation type which can be set via ObjectsGroupResizingSettings.DistanceCalculationType property of the settings that you can pass to the tool's methods. For example, if you specify new length as a metric one - 10 seconds - it worth to set DistanceCalculationType to the TimeSpanType.Metric value."
  },
  "articles/tools/Splitter.html": {
    "href": "articles/tools/Splitter.html",
    "title": "Splitter | DryWetMIDI",
    "keywords": "Splitter You can split MIDI objects in different ways using extension methods from the Splitter class. In following subsections we'll look at some available methods: objects splitting ; MIDI file splitting . Please note that these articles doesn't cover all possible methods and their settings. Please read API documentation on Splitter to get complete information."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | DryWetMIDI",
    "keywords": "Overview DryWetMIDI is the .NET library to work with MIDI data and MIDI devices. It allows: Read, write and create Standard MIDI Files (SMF) . It is also possible to read RMID files where SMF wrapped to RIFF chunk. You can easily catch specific error when reading or writing MIDI file since all possible errors in a MIDI file are presented as separate exception classes. Send MIDI events to/ receive them from MIDI devices, play MIDI data and record it. This APIs support Windows and macOS. Finely adjust process of reading and writing. It allows, for example, to read corrupted files and repair them, or build MIDI file validators. Implement custom meta events and custom chunks that can be written to and read from MIDI files. Manage content of a MIDI file either with low-level objects, like event, or high-level ones, like note (read the High-level data managing section of the library docs ). Build musical compositions (see Pattern page of the library docs) and use music theory API (see Music Theory - Overview article). Perform complex tasks like quantizing, notes splitting or converting MIDI file to CSV representation (see Tools page of the library docs). Please see Getting started section below for quick jump into the library. Useful links NuGet Documentation Project health CodeProject articles: DryWetMIDI: High-Level Processing of MIDI Files DryWetMIDI: Notes Quantization DryWetMIDI: Working with MIDI Devices Projects using DryWetMIDI Here the list of noticeable projects that use DryWetMIDI: Clone Hero Free rhythm game, which can be played with any 5 or 6 button guitar controller, game controllers, or just your standard computer keyboard. The game is a clone of Guitar Hero. Electrophonics A collection of virtual musical instruments that features real MIDI output. Rustissimo Using Rustissimo you can create a concert with your friends and play instruments with synchronization. Sample applications from CIRCE-EYES : https://github.com/melanchall/drywetmidi/issues/105 https://github.com/melanchall/drywetmidi/issues/139 Getting Started Let's see some examples of what you can do with DryWetMIDI. To read a MIDI file you have to use Read static method of the MidiFile : var midiFile = MidiFile.Read(\"Some Great Song.mid\"); or, in more advanced form (visit Reading settings page on the library docs to learn more about how to adjust process of reading) var midiFile = MidiFile.Read( \"Some Great Song.mid\", new ReadingSettings { NoHeaderChunkPolicy = NoHeaderChunkPolicy.Abort, CustomChunkTypes = new ChunkTypesCollection { { typeof(MyCustomChunk), \"Cstm\" } } }); To write MIDI data to a file you have to use Write method of the MidiFile : midiFile.Write(\"My Great Song.mid\"); or, in more advanced form (visit Writing settings page on the library docs to learn more about how to adjust process of writing) midiFile.Write( \"My Great Song.mid\", true, MidiFileFormat.SingleTrack, new WritingSettings { UseRunningStatus = true, NoteOffAsSilentNoteOn = true }); Of course you can create a MIDI file from scratch by creating an instance of the MidiFile and writing it: var midiFile = new MidiFile( new TrackChunk( new SetTempoEvent(500000)), new TrackChunk( new TextEvent(\"It's just single note track...\"), new NoteOnEvent((SevenBitNumber)60, (SevenBitNumber)45), new NoteOffEvent((SevenBitNumber)60, (SevenBitNumber)0) { DeltaTime = 400 })); midiFile.Write(\"My Future Great Song.mid\"); or var midiFile = new MidiFile(); TempoMap tempoMap = midiFile.GetTempoMap(); var trackChunk = new TrackChunk(); using (var notesManager = trackChunk.ManageNotes()) { NotesCollection notes = notesManager.Notes; notes.Add(new Note( NoteName.A, 4, LengthConverter.ConvertFrom( new MetricTimeSpan(hours: 0, minutes: 0, seconds: 10), 0, tempoMap))); } midiFile.Chunks.Add(trackChunk); midiFile.Write(\"My Future Great Song.mid\"); If you want to speed up playing back a MIDI file by two times you can do it with this code: foreach (var trackChunk in midiFile.Chunks.OfType<TrackChunk>()) { foreach (var setTempoEvent in trackChunk.Events.OfType<SetTempoEvent>()) { setTempoEvent.MicrosecondsPerQuarterNote /= 2; } } Of course this code is simplified. In practice a MIDI file may not contain SetTempo event which means it has the default one (500,000 microseconds per beat). Instead of modifying a MIDI file you can use Playback class: using (var outputDevice = OutputDevice.GetByName(\"Microsoft GS Wavetable Synth\")) using (var playback = midiFile.GetPlayback(outputDevice)) { playback.Speed = 2.0; playback.Play(); } To get duration of a MIDI file as TimeSpan use this code: TempoMap tempoMap = midiFile.GetTempoMap(); TimeSpan midiFileDuration = midiFile .GetTimedEvents() .LastOrDefault(e => e.Event is NoteOffEvent) ?.TimeAs<MetricTimeSpan>(tempoMap) ?? new MetricTimeSpan(); or simply: TimeSpan midiFileDuration = midiFile.GetDuration<MetricTimeSpan>(); Suppose you want to remove all C# notes from a MIDI file. It can be done with this code: foreach (var trackChunk in midiFile.GetTrackChunks()) { using (var notesManager = trackChunk.ManageNotes()) { notesManager.Notes.RemoveAll(n => n.NoteName == NoteName.CSharp); } } or midiFile.RemoveNotes(n => n.NoteName == NoteName.CSharp); To get all chords of a MIDI file at 20 seconds from the start of the file write this: TempoMap tempoMap = midiFile.GetTempoMap(); IEnumerable<Chord> chordsAt20seconds = midiFile .GetChords() .AtTime( new MetricTimeSpan(0, 0, 20), tempoMap, LengthedObjectPart.Entire); To create a MIDI file with single note which length will be equal to length of two triplet eighth notes you can use this code: var midiFile = new MidiFile(); var tempoMap = midiFile.GetTempoMap(); var trackChunk = new TrackChunk(); using (var notesManager = trackChunk.ManageNotes()) { var length = LengthConverter.ConvertFrom( 2 * MusicalTimeSpan.Eighth.Triplet(), 0, tempoMap); var note = new Note(NoteName.A, 4, length); notesManager.Notes.Add(note); } midiFile.Chunks.Add(trackChunk); midiFile.Write(\"Single note great song.mid\"); You can even build a musical composition: Pattern pattern = new PatternBuilder() // Insert a pause of 5 seconds .StepForward(new MetricTimeSpan(0, 0, 5)) // Insert an eighth C# note of the 4th octave .Note(Octave.Get(4).CSharp, MusicalTimeSpan.Eighth) // Set default note length to triplet eighth and default octave to 5 .SetNoteLength(MusicalTimeSpan.Eighth.Triplet()) .SetOctave(Octave.Get(5)) // Now we can add triplet eighth notes of the 5th octave in a simple way .Note(NoteName.A) .Note(NoteName.B) .Note(NoteName.GSharp) // Get pattern .Build(); MidiFile midiFile = pattern.ToFile(TempoMap.Default); DryWetMIDI provides devices API allowing to send MIDI events to and receive them from MIDI devices. Following example shows how to send events to MIDI device and handle them as they are received by the device: using System; using Melanchall.DryWetMidi.Multimedia; using Melanchall.DryWetMidi.Core; // ... using (var outputDevice = OutputDevice.GetByName(\"MIDI Device\")) { outputDevice.EventSent += OnEventSent; using (var inputDevice = InputDevice.GetByName(\"MIDI Device\")) { inputDevice.EventReceived += OnEventReceived; inputDevice.StartEventsListening(); outputDevice.SendEvent(new NoteOnEvent()); outputDevice.SendEvent(new NoteOffEvent()); } } // ... private void OnEventReceived(object sender, MidiEventReceivedEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event received from '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); } private void OnEventSent(object sender, MidiEventSentEventArgs e) { var midiDevice = (MidiDevice)sender; Console.WriteLine($\"Event sent to '{midiDevice.Name}' at {DateTime.Now}: {e.Event}\"); }"
  },
  "obsolete/OBS1/description.html": {
    "href": "obsolete/OBS1/description.html",
    "title": "| DryWetMIDI",
    "keywords": "WritingSettings.CompressionPolicy has been replaced by corresponding properties of WritingSettings . No compression applied by default, as before. For example, to write using running status and write Note Off events as Note On ones with zero velocity we need to write: midiFile.Write(\"Great MIDI file.mid\", settings: new WritingSettings { UseRunningStatus = true, NoteOffAsSilentNoteOn = true });"
  },
  "obsolete/OBS1/new.html": {
    "href": "obsolete/OBS1/new.html",
    "title": "| DryWetMIDI",
    "keywords": "WritingSettings.DeleteDefaultKeySignature WritingSettings.DeleteDefaultSetTempo WritingSettings.DeleteDefaultTimeSignature WritingSettings.DeleteUnknownChunks WritingSettings.DeleteUnknownMetaEvents WritingSettings.NoteOffAsSilentNoteOn WritingSettings.UseRunningStatus"
  },
  "obsolete/OBS1/old.html": {
    "href": "obsolete/OBS1/old.html",
    "title": "| DryWetMIDI",
    "keywords": "WritingSettings.CompressionPolicy CompressionPolicy"
  },
  "obsolete/OBS10/description.html": {
    "href": "obsolete/OBS10/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Randomizer tool is obsolete now. Randomization feature has been moved to Quantizer so you can quantize and randomize MIDI data at the same time. Following small example shows how to randomize timed events and start times of notes in range from -100 to +100 ticks: midiFile.QuantizeObjects( ObjectType.Note | ObjectType.TimedEvent, new ArbitraryGrid(), new QuantizingSettings { RandomizingSettings = new RandomizingSettings { Bounds = new ConstantBounds((MidiTimeSpan)100) } });"
  },
  "obsolete/OBS10/new.html": {
    "href": "obsolete/OBS10/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Quantizer QuantizingSettings RandomizingSettings QuantizingSettings.RandomizingSettings QuantizerUtilities"
  },
  "obsolete/OBS10/old.html": {
    "href": "obsolete/OBS10/old.html",
    "title": "| DryWetMIDI",
    "keywords": "Randomizer<TObject, TSettings> RandomizingSettings<TObject> LengthedObjectsRandomizer<TObject, TSettings> LengthedObjectsRandomizingSettings<TObject> TimedEventsRandomizer NotesRandomizer ChordsRandomizer TimedEventsRandomizingSettings NotesRandomizingSettings ChordsRandomizingSettings TimedEventsRandomizerUtilities NotesRandomizerUtilities ChordsRandomizerUtilities"
  },
  "obsolete/OBS11/description.html": {
    "href": "obsolete/OBS11/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Separate manager classes for each MIDI object type are replaced with TimedObjectsManager which can manage objects of different types simultaneously. For example, to manage just timed events : using (var objectsManager = new TimedObjectsManager(trackChunk.Events, ObjectType.TimedEvent)) { var firstTimedEvent = (TimedEvent)objectsManager.Objects.FirstOrDefault(); } or using (var objectsManager = new TimedObjectsManager<TimedEvent>(trackChunk.Events)) { var firstTimedEvent = objectsManager.Objects.FirstOrDefault(); } To manage both timed events and notes : using (var objectsManager = new TimedObjectsManager(trackChunk.Events, ObjectType.TimedEvent | ObjectType.Note)) { var firstObject = objectsManager.Objects.FirstOrDefault(); if (firstObject is Note note) { // do smth with note } else { // do smth with timed event } }"
  },
  "obsolete/OBS11/new.html": {
    "href": "obsolete/OBS11/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedObjectsManager"
  },
  "obsolete/OBS11/old.html": {
    "href": "obsolete/OBS11/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManager NotesManager ChordsManager"
  },
  "obsolete/OBS12/description.html": {
    "href": "obsolete/OBS12/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Separate splitter classes for notes and chords have been replaced by Splitter class which can split objects of different types simultaneously. For example, to split notes and chords into 4 parts: midiFile.SplitObjectsByPartsNumber( ObjectType.Note | ObjectType.Chord, 4, TimeSpanType.Metric);"
  },
  "obsolete/OBS12/new.html": {
    "href": "obsolete/OBS12/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Splitter Splitter.SplitObjectsByStep Splitter.SplitObjectsByGrid Splitter.SplitObjectsAtDistance Splitter.SplitObjectsByPartsNumber"
  },
  "obsolete/OBS12/old.html": {
    "href": "obsolete/OBS12/old.html",
    "title": "| DryWetMIDI",
    "keywords": "LengthedObjectsSplitter<TObject> ChordsSplitter NotesSplitter ChordsSplitterUtilities NotesSplitterUtilities"
  },
  "obsolete/OBS13/description.html": {
    "href": "obsolete/OBS13/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Complex inheritance hierarchy of quantizer classes has been reduced to general-purpose new Quantizer class which can quantize objects of different types at the same time. More than that, it can quantize both start and end time simultaneously. For example, to quantize both ends of objects by the grid of 1/8 step: var quantizer = new Quantizer(); quantizer.Quantize( objects, new SteppedGrid(MusicalTimeSpan.Eighth), TempoMap.Default, new QuantizingSettings { Target = QuantizerTarget.Start | QuantizerTarget.End }); Of course, there is the new class with utility methods for quantizing objects within a MIDI file or track chunk - QuantizerUtilities . Following example shows how to quantize both ends of notes and chords by the grid of 1 second step within a MIDI file. We'll define a chord as a set of notes with minimum length of 2 : midiFile.QuantizeObjects( ObjectType.Note | ObjectType.Chord, new SteppedGrid(new MetricTimeSpan(0, 0, 1)), new QuantizingSettings { Target = QuantizerTarget.Start | QuantizerTarget.End }, new ObjectDetectionSettings { ChordDetectionSettings = new ChordDetectionSettings { NotesMinCount = 2 } });"
  },
  "obsolete/OBS13/new.html": {
    "href": "obsolete/OBS13/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Quantizer QuantizingSettings QuantizerUtilities"
  },
  "obsolete/OBS13/old.html": {
    "href": "obsolete/OBS13/old.html",
    "title": "| DryWetMIDI",
    "keywords": "Quantizer<TObject, TSettings> QuantizingSettings<TObject> LengthedObjectsQuantizer<TObject, TSettings> LengthedObjectsQuantizingSettings<TObject> TimedEventsQuantizer NotesQuantizer ChordsQuantizer TimedEventsQuantizingSettings NotesQuantizingSettings ChordsQuantizingSettings TimedEventsQuantizerUtilities NotesQuantizerUtilities ChordsQuantizerUtilities"
  },
  "obsolete/OBS14/description.html": {
    "href": "obsolete/OBS14/description.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.SetTime method has been replaced with generic TimedObjectUtilities.SetTime allowing to set time for objects of different types, not for only timed events . Small example: timedEvent.SetTime(new BarBeatTicksTimeSpan(2), tempoMap); note.SetTime(MusicalTimeSpan.Half.SingleDotted(), tempoMap); chord.SetTime(new MetricTimeSpan(0, 1, 10), tempoMap);"
  },
  "obsolete/OBS14/new.html": {
    "href": "obsolete/OBS14/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedObjectUtilities.SetTime"
  },
  "obsolete/OBS14/old.html": {
    "href": "obsolete/OBS14/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.SetTime"
  },
  "obsolete/OBS15/description.html": {
    "href": "obsolete/OBS15/description.html",
    "title": "| DryWetMIDI",
    "keywords": "SetTimeAndLength separate methods for notes and chords have been replaced with generic SetLength . Since SetTime method also exists, the new way to set time and length with one instruction is: note .SetTime(new MetricTimeSpan(0, 0, 0, 500), tempoMap) .SetLength(new MetricTimeSpan(0, 0, 10), tempoMap);"
  },
  "obsolete/OBS15/new.html": {
    "href": "obsolete/OBS15/new.html",
    "title": "| DryWetMIDI",
    "keywords": "LengthedObjectUtilities.SetLength"
  },
  "obsolete/OBS15/old.html": {
    "href": "obsolete/OBS15/old.html",
    "title": "| DryWetMIDI",
    "keywords": "NotesManagingUtilities.SetTimeAndLength* ChordsManagingUtilities.SetTimeAndLength*"
  },
  "obsolete/OBS16/description.html": {
    "href": "obsolete/OBS16/description.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.AddEvent methods are now obsolete since they are nothing more than just calling TimedEvent constructor and adding a new instance to a collection: eventsCollection.Add(new TimedEvent(midiEvent, time));"
  },
  "obsolete/OBS16/new.html": {
    "href": "obsolete/OBS16/new.html",
    "title": "| DryWetMIDI",
    "keywords": "no"
  },
  "obsolete/OBS16/old.html": {
    "href": "obsolete/OBS16/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.AddEvent"
  },
  "obsolete/OBS17/description.html": {
    "href": "obsolete/OBS17/description.html",
    "title": "| DryWetMIDI",
    "keywords": "NotesMerger class has been generalized by the Merger class which can merge objects of different types simultaneously. To merge objects within a collection of timed objects : var newObjects = objects.MergeObjects( TempoMap.Default, new ObjectsMergingSettings { Tolerance = new MetricTimeSpan(0, 0, 1) }); Quick example of how to merge notes within a MIDI file with the new tool: midiFile.MergeObjects( ObjectType.Note, new ObjectsMergingSettings { VelocityMergingPolicy = VelocityMergingPolicy.Max, Tolerance = (MidiTimeSpan)0 });"
  },
  "obsolete/OBS17/new.html": {
    "href": "obsolete/OBS17/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Merger Merger.MergeObjects"
  },
  "obsolete/OBS17/old.html": {
    "href": "obsolete/OBS17/old.html",
    "title": "| DryWetMIDI",
    "keywords": "NotesMerger NotesMergerUtilities NotesMergingSettings"
  },
  "obsolete/OBS18/description.html": {
    "href": "obsolete/OBS18/description.html",
    "title": "| DryWetMIDI",
    "keywords": "ResizeNotesUtilities class and its methods have been generalized by the Resizer class which can resize groups of objects of different types simultaneously. Quick example of how to resize objects group using the new tool: objects.ResizeObjectsGroup( new MetricTimeSpan(0, 1, 0), TempoMap.Default, new ObjectsGroupResizingSettings { DistanceCalculationType = TimeSpanType.Metric });"
  },
  "obsolete/OBS18/new.html": {
    "href": "obsolete/OBS18/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Resizer Resizer.ResizeObjectsGroup"
  },
  "obsolete/OBS18/old.html": {
    "href": "obsolete/OBS18/old.html",
    "title": "| DryWetMIDI",
    "keywords": "ResizeNotesUtilities"
  },
  "obsolete/OBS19/description.html": {
    "href": "obsolete/OBS19/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Splitter.SplitByNotes method is now obsolere since it has been replaced by Splitter.SplitByObjects one which can split a MIDI file by objects of difefrent types and with more flexibility. Simple example of how to split a file by notes with the new tool: var newFiles = midiFile.SplitByObjects(ObjectType.Note); To split ignoring a note's channel: var newFiles = midiFile.SplitByObjects( ObjectType.Note, new SplitByObjectsSettings { KeySelector = obj => ObjectIdUtilities.GetObjectId(((Note)obj).NoteNumber) }); To split by notes with all other events transferred to each new file: var newFiles = midiFile.SplitByObjects( ObjectType.Note | ObjectType.TimedEvent, new SplitByObjectsSettings { KeySelector = obj => ObjectIdUtilities.GetObjectId(((Note)obj).NoteNumber), WriteToAllFilesPredicate = obj => obj is TimedEvent });"
  },
  "obsolete/OBS19/new.html": {
    "href": "obsolete/OBS19/new.html",
    "title": "| DryWetMIDI",
    "keywords": "Splitter.SplitByObjects"
  },
  "obsolete/OBS19/old.html": {
    "href": "obsolete/OBS19/old.html",
    "title": "| DryWetMIDI",
    "keywords": "Splitter.SplitByNotes"
  },
  "obsolete/OBS2/description.html": {
    "href": "obsolete/OBS2/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Now MIDI file reading uses buffering by default so ReaderSettings.ReadFromMemory property is deprecated. By default buffering policy is BufferingPolicy.UseFixedSizeBuffer and BufferSize is 4096 which gives the same reading speed as putting all data in memory. But if you want, you can specify BufferingPolicy = BufferingPolicy.BufferAllData to achieve the same behavior as with ReadFromMemory : MidiFile.Read(\"Great MIDI file.mid\", new ReadingSettings { ReaderSettings = new ReaderSettings { BufferingPolicy = BufferingPolicy.BufferAllData } });"
  },
  "obsolete/OBS2/new.html": {
    "href": "obsolete/OBS2/new.html",
    "title": "| DryWetMIDI",
    "keywords": "ReaderSettings.BufferingPolicy BufferingPolicy BufferingPolicy.BufferAllData"
  },
  "obsolete/OBS2/old.html": {
    "href": "obsolete/OBS2/old.html",
    "title": "| DryWetMIDI",
    "keywords": "ReaderSettings.ReadFromMemory"
  },
  "obsolete/OBS3/description.html": {
    "href": "obsolete/OBS3/description.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.TimeSignature property has been replaced with more explicit and straightforward methods: GetTimeSignatureChanges and GetTimeSignatureAtTime : foreach (var timeSignatureChange in tempoMap.GetTimeSignatureChanges()) { var time = timeSignatureChange.Time; var timeSignature = timeSignatureChange.Value; } // ... tempoMap.GetTimeSignatureAtTime(MusicalTimeSpan.Whole);"
  },
  "obsolete/OBS3/new.html": {
    "href": "obsolete/OBS3/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.GetTimeSignatureChanges TempoMap.GetTimeSignatureAtTime"
  },
  "obsolete/OBS3/old.html": {
    "href": "obsolete/OBS3/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.TimeSignature"
  },
  "obsolete/OBS4/description.html": {
    "href": "obsolete/OBS4/description.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.Tempo property has been replaced with more explicit and straightforward methods: GetTempoChanges and GetTempoAtTime : foreach (var tempoChange in tempoMap.GetTempoChanges()) { var time = tempoChange.Time; var timeSignature = tempoChange.Value; } // ... tempoMap.GetTempoAtTime(MusicalTimeSpan.Whole);"
  },
  "obsolete/OBS4/new.html": {
    "href": "obsolete/OBS4/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.GetTempoChanges TempoMap.GetTempoAtTime"
  },
  "obsolete/OBS4/old.html": {
    "href": "obsolete/OBS4/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TempoMap.Tempo"
  },
  "obsolete/OBS5/description.html": {
    "href": "obsolete/OBS5/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Methods from GetTimedEventsAndNotesUtilities are now obsolete and you should use GetObjects methods from GetObjectsUtilities . Example how you can get timed events and notes: var timedEventsAndNotes = midiFile.GetObjects(ObjectType.TimedEvent | ObjectType.Note);"
  },
  "obsolete/OBS5/new.html": {
    "href": "obsolete/OBS5/new.html",
    "title": "| DryWetMIDI",
    "keywords": "GetObjectsUtilities"
  },
  "obsolete/OBS5/old.html": {
    "href": "obsolete/OBS5/old.html",
    "title": "| DryWetMIDI",
    "keywords": "GetTimedEventsAndNotesUtilities"
  },
  "obsolete/OBS6/description.html": {
    "href": "obsolete/OBS6/description.html",
    "title": "| DryWetMIDI",
    "keywords": "Methods from GetNotesAndRestsUtilities are now obsolete and you should use GetObjects methods from GetObjectsUtilities . Example how you can get notes and rests: var notesAndRests = midiFile.GetObjects(ObjectType.Note | ObjectType.Rest); RestSeparationPolicy can be specified via ObjectDetectionSettings : var notesAndRests = midiFile.GetObjects( ObjectType.Note | ObjectType.Rest, new ObjectDetectionSettings { RestDetectionSettings = new RestDetectionSettings { RestSeparationPolicy = RestSeparationPolicy.SeparateByChannel } });"
  },
  "obsolete/OBS6/new.html": {
    "href": "obsolete/OBS6/new.html",
    "title": "| DryWetMIDI",
    "keywords": "GetObjectsUtilities"
  },
  "obsolete/OBS6/old.html": {
    "href": "obsolete/OBS6/old.html",
    "title": "| DryWetMIDI",
    "keywords": "GetNotesAndRestsUtilities"
  },
  "obsolete/OBS7/description.html": {
    "href": "obsolete/OBS7/description.html",
    "title": "| DryWetMIDI",
    "keywords": "ToTrackChunk methods for collections of objects of one type (for example, collection of TimedEvent or Note instances) are replaced now with single TimedObjectUtilities.ToTrackChunk method which can save objects of different types to track chunk."
  },
  "obsolete/OBS7/new.html": {
    "href": "obsolete/OBS7/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedObjectUtilities.ToTrackChunk"
  },
  "obsolete/OBS7/old.html": {
    "href": "obsolete/OBS7/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.ToTrackChunk NotesManagingUtilities.ToTrackChunk ChordsManagingUtilities.ToTrackChunk"
  },
  "obsolete/OBS8/description.html": {
    "href": "obsolete/OBS8/description.html",
    "title": "| DryWetMIDI",
    "keywords": "ToFile methods for collections of objects of one type (for example, collection of TimedEvent or Note instances) are replaced now with single TimedObjectUtilities.ToFile method which can save objects of different types to MIDI file."
  },
  "obsolete/OBS8/new.html": {
    "href": "obsolete/OBS8/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedObjectUtilities.ToFile"
  },
  "obsolete/OBS8/old.html": {
    "href": "obsolete/OBS8/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.ToFile NotesManagingUtilities.ToFile ChordsManagingUtilities.ToFile"
  },
  "obsolete/OBS9/description.html": {
    "href": "obsolete/OBS9/description.html",
    "title": "| DryWetMIDI",
    "keywords": "AddTimedEvents , AddNotes and AddChords methods are replaced now with single TimedObjectUtilities.AddObjects method which can save objects of different types to events collection or track chunk."
  },
  "obsolete/OBS9/new.html": {
    "href": "obsolete/OBS9/new.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedObjectUtilities.AddObjects"
  },
  "obsolete/OBS9/old.html": {
    "href": "obsolete/OBS9/old.html",
    "title": "| DryWetMIDI",
    "keywords": "TimedEventsManagingUtilities.AddTimedEvents NotesManagingUtilities.AddNotes ChordsManagingUtilities.AddChords"
  },
  "obsolete/obsolete.html": {
    "href": "obsolete/obsolete.html",
    "title": "Obsolete API | DryWetMIDI",
    "keywords": "Obsolete API Here the table of API that is obsolete and thus either will be removed from the library by a next release or already removed from the DryWetMIDI. Title of each obsolete API is just ID, please see description to see an old API and new replacement. OBS19 Splitter.SplitByNotes method is now obsolere since it has been replaced by Splitter.SplitByObjects one which can split a MIDI file by objects of difefrent types and with more flexibility. Simple example of how to split a file by notes with the new tool: var newFiles = midiFile.SplitByObjects(ObjectType.Note); To split ignoring a note's channel: var newFiles = midiFile.SplitByObjects( ObjectType.Note, new SplitByObjectsSettings { KeySelector = obj => ObjectIdUtilities.GetObjectId(((Note)obj).NoteNumber) }); To split by notes with all other events transferred to each new file: var newFiles = midiFile.SplitByObjects( ObjectType.Note | ObjectType.TimedEvent, new SplitByObjectsSettings { KeySelector = obj => ObjectIdUtilities.GetObjectId(((Note)obj).NoteNumber), WriteToAllFilesPredicate = obj => obj is TimedEvent }); Obsolete from version 6.1.1 . Old API Splitter.SplitByNotes New API Splitter.SplitByObjects OBS18 ResizeNotesUtilities class and its methods have been generalized by the Resizer class which can resize groups of objects of different types simultaneously. Quick example of how to resize objects group using the new tool: objects.ResizeObjectsGroup( new MetricTimeSpan(0, 1, 0), TempoMap.Default, new ObjectsGroupResizingSettings { DistanceCalculationType = TimeSpanType.Metric }); Obsolete from version 6.1.1 . Old API ResizeNotesUtilities New API Resizer Resizer.ResizeObjectsGroup OBS17 NotesMerger class has been generalized by the Merger class which can merge objects of different types simultaneously. To merge objects within a collection of timed objects : var newObjects = objects.MergeObjects( TempoMap.Default, new ObjectsMergingSettings { Tolerance = new MetricTimeSpan(0, 0, 1) }); Quick example of how to merge notes within a MIDI file with the new tool: midiFile.MergeObjects( ObjectType.Note, new ObjectsMergingSettings { VelocityMergingPolicy = VelocityMergingPolicy.Max, Tolerance = (MidiTimeSpan)0 }); Obsolete from version 6.1.1 . Old API NotesMerger NotesMergerUtilities NotesMergingSettings New API Merger Merger.MergeObjects OBS16 TimedEventsManagingUtilities.AddEvent methods are now obsolete since they are nothing more than just calling TimedEvent constructor and adding a new instance to a collection: eventsCollection.Add(new TimedEvent(midiEvent, time)); Obsolete from version 6.1.0 . Old API TimedEventsManagingUtilities.AddEvent New API no OBS15 SetTimeAndLength separate methods for notes and chords have been replaced with generic SetLength . Since SetTime method also exists, the new way to set time and length with one instruction is: note .SetTime(new MetricTimeSpan(0, 0, 0, 500), tempoMap) .SetLength(new MetricTimeSpan(0, 0, 10), tempoMap); Obsolete from version 6.1.0 . Old API NotesManagingUtilities.SetTimeAndLength* ChordsManagingUtilities.SetTimeAndLength* New API LengthedObjectUtilities.SetLength OBS14 TimedEventsManagingUtilities.SetTime method has been replaced with generic TimedObjectUtilities.SetTime allowing to set time for objects of different types, not for only timed events . Small example: timedEvent.SetTime(new BarBeatTicksTimeSpan(2), tempoMap); note.SetTime(MusicalTimeSpan.Half.SingleDotted(), tempoMap); chord.SetTime(new MetricTimeSpan(0, 1, 10), tempoMap); Obsolete from version 6.1.0 . Old API TimedEventsManagingUtilities.SetTime New API TimedObjectUtilities.SetTime OBS13 Complex inheritance hierarchy of quantizer classes has been reduced to general-purpose new Quantizer class which can quantize objects of different types at the same time. More than that, it can quantize both start and end time simultaneously. For example, to quantize both ends of objects by the grid of 1/8 step: var quantizer = new Quantizer(); quantizer.Quantize( objects, new SteppedGrid(MusicalTimeSpan.Eighth), TempoMap.Default, new QuantizingSettings { Target = QuantizerTarget.Start | QuantizerTarget.End }); Of course, there is the new class with utility methods for quantizing objects within a MIDI file or track chunk - QuantizerUtilities . Following example shows how to quantize both ends of notes and chords by the grid of 1 second step within a MIDI file. We'll define a chord as a set of notes with minimum length of 2 : midiFile.QuantizeObjects( ObjectType.Note | ObjectType.Chord, new SteppedGrid(new MetricTimeSpan(0, 0, 1)), new QuantizingSettings { Target = QuantizerTarget.Start | QuantizerTarget.End }, new ObjectDetectionSettings { ChordDetectionSettings = new ChordDetectionSettings { NotesMinCount = 2 } }); Obsolete from version 6.1.0 . Old API Quantizer<TObject, TSettings> QuantizingSettings<TObject> LengthedObjectsQuantizer<TObject, TSettings> LengthedObjectsQuantizingSettings<TObject> TimedEventsQuantizer NotesQuantizer ChordsQuantizer TimedEventsQuantizingSettings NotesQuantizingSettings ChordsQuantizingSettings TimedEventsQuantizerUtilities NotesQuantizerUtilities ChordsQuantizerUtilities New API Quantizer QuantizingSettings QuantizerUtilities OBS12 Separate splitter classes for notes and chords have been replaced by Splitter class which can split objects of different types simultaneously. For example, to split notes and chords into 4 parts: midiFile.SplitObjectsByPartsNumber( ObjectType.Note | ObjectType.Chord, 4, TimeSpanType.Metric); Obsolete from version 6.1.0 . Old API LengthedObjectsSplitter<TObject> ChordsSplitter NotesSplitter ChordsSplitterUtilities NotesSplitterUtilities New API Splitter Splitter.SplitObjectsByStep Splitter.SplitObjectsByGrid Splitter.SplitObjectsAtDistance Splitter.SplitObjectsByPartsNumber OBS11 Separate manager classes for each MIDI object type are replaced with TimedObjectsManager which can manage objects of different types simultaneously. For example, to manage just timed events : using (var objectsManager = new TimedObjectsManager(trackChunk.Events, ObjectType.TimedEvent)) { var firstTimedEvent = (TimedEvent)objectsManager.Objects.FirstOrDefault(); } or using (var objectsManager = new TimedObjectsManager<TimedEvent>(trackChunk.Events)) { var firstTimedEvent = objectsManager.Objects.FirstOrDefault(); } To manage both timed events and notes : using (var objectsManager = new TimedObjectsManager(trackChunk.Events, ObjectType.TimedEvent | ObjectType.Note)) { var firstObject = objectsManager.Objects.FirstOrDefault(); if (firstObject is Note note) { // do smth with note } else { // do smth with timed event } } Obsolete from version 6.1.0 . Old API TimedEventsManager NotesManager ChordsManager New API TimedObjectsManager OBS10 Randomizer tool is obsolete now. Randomization feature has been moved to Quantizer so you can quantize and randomize MIDI data at the same time. Following small example shows how to randomize timed events and start times of notes in range from -100 to +100 ticks: midiFile.QuantizeObjects( ObjectType.Note | ObjectType.TimedEvent, new ArbitraryGrid(), new QuantizingSettings { RandomizingSettings = new RandomizingSettings { Bounds = new ConstantBounds((MidiTimeSpan)100) } }); Obsolete from version 6.1.0 . Old API Randomizer<TObject, TSettings> RandomizingSettings<TObject> LengthedObjectsRandomizer<TObject, TSettings> LengthedObjectsRandomizingSettings<TObject> TimedEventsRandomizer NotesRandomizer ChordsRandomizer TimedEventsRandomizingSettings NotesRandomizingSettings ChordsRandomizingSettings TimedEventsRandomizerUtilities NotesRandomizerUtilities ChordsRandomizerUtilities New API Quantizer QuantizingSettings RandomizingSettings QuantizingSettings.RandomizingSettings QuantizerUtilities OBS9 Important API removed from the library by 6.0.0 release. AddTimedEvents , AddNotes and AddChords methods are replaced now with single TimedObjectUtilities.AddObjects method which can save objects of different types to events collection or track chunk. Obsolete from version 5.2.0 . Old API TimedEventsManagingUtilities.AddTimedEvents NotesManagingUtilities.AddNotes ChordsManagingUtilities.AddChords New API TimedObjectUtilities.AddObjects OBS8 Important API removed from the library by 6.0.0 release. ToFile methods for collections of objects of one type (for example, collection of TimedEvent or Note instances) are replaced now with single TimedObjectUtilities.ToFile method which can save objects of different types to MIDI file. Obsolete from version 5.2.0 . Old API TimedEventsManagingUtilities.ToFile NotesManagingUtilities.ToFile ChordsManagingUtilities.ToFile New API TimedObjectUtilities.ToFile OBS7 Important API removed from the library by 6.0.0 release. ToTrackChunk methods for collections of objects of one type (for example, collection of TimedEvent or Note instances) are replaced now with single TimedObjectUtilities.ToTrackChunk method which can save objects of different types to track chunk. Obsolete from version 5.2.0 . Old API TimedEventsManagingUtilities.ToTrackChunk NotesManagingUtilities.ToTrackChunk ChordsManagingUtilities.ToTrackChunk New API TimedObjectUtilities.ToTrackChunk OBS6 Important API removed from the library by 6.0.0 release. Methods from GetNotesAndRestsUtilities are now obsolete and you should use GetObjects methods from GetObjectsUtilities . Example how you can get notes and rests: var notesAndRests = midiFile.GetObjects(ObjectType.Note | ObjectType.Rest); RestSeparationPolicy can be specified via ObjectDetectionSettings : var notesAndRests = midiFile.GetObjects( ObjectType.Note | ObjectType.Rest, new ObjectDetectionSettings { RestDetectionSettings = new RestDetectionSettings { RestSeparationPolicy = RestSeparationPolicy.SeparateByChannel } }); Obsolete from version 5.2.0 . Old API GetNotesAndRestsUtilities New API GetObjectsUtilities OBS5 Important API removed from the library by 6.0.0 release. Methods from GetTimedEventsAndNotesUtilities are now obsolete and you should use GetObjects methods from GetObjectsUtilities . Example how you can get timed events and notes: var timedEventsAndNotes = midiFile.GetObjects(ObjectType.TimedEvent | ObjectType.Note); Obsolete from version 5.2.0 . Old API GetTimedEventsAndNotesUtilities New API GetObjectsUtilities OBS4 Important API removed from the library by 6.0.0 release. TempoMap.Tempo property has been replaced with more explicit and straightforward methods: GetTempoChanges and GetTempoAtTime : foreach (var tempoChange in tempoMap.GetTempoChanges()) { var time = tempoChange.Time; var timeSignature = tempoChange.Value; } // ... tempoMap.GetTempoAtTime(MusicalTimeSpan.Whole); Obsolete from version 5.1.2 . Old API TempoMap.Tempo New API TempoMap.GetTempoChanges TempoMap.GetTempoAtTime OBS3 Important API removed from the library by 6.0.0 release. TempoMap.TimeSignature property has been replaced with more explicit and straightforward methods: GetTimeSignatureChanges and GetTimeSignatureAtTime : foreach (var timeSignatureChange in tempoMap.GetTimeSignatureChanges()) { var time = timeSignatureChange.Time; var timeSignature = timeSignatureChange.Value; } // ... tempoMap.GetTimeSignatureAtTime(MusicalTimeSpan.Whole); Obsolete from version 5.1.2 . Old API TempoMap.TimeSignature New API TempoMap.GetTimeSignatureChanges TempoMap.GetTimeSignatureAtTime OBS2 Important API removed from the library by 6.0.0 release. Now MIDI file reading uses buffering by default so ReaderSettings.ReadFromMemory property is deprecated. By default buffering policy is BufferingPolicy.UseFixedSizeBuffer and BufferSize is 4096 which gives the same reading speed as putting all data in memory. But if you want, you can specify BufferingPolicy = BufferingPolicy.BufferAllData to achieve the same behavior as with ReadFromMemory : MidiFile.Read(\"Great MIDI file.mid\", new ReadingSettings { ReaderSettings = new ReaderSettings { BufferingPolicy = BufferingPolicy.BufferAllData } }); Obsolete from version 5.1.2 . Old API ReaderSettings.ReadFromMemory New API ReaderSettings.BufferingPolicy BufferingPolicy BufferingPolicy.BufferAllData OBS1 Important API removed from the library by 6.0.0 release. WritingSettings.CompressionPolicy has been replaced by corresponding properties of WritingSettings . No compression applied by default, as before. For example, to write using running status and write Note Off events as Note On ones with zero velocity we need to write: midiFile.Write(\"Great MIDI file.mid\", settings: new WritingSettings { UseRunningStatus = true, NoteOffAsSilentNoteOn = true }); Obsolete from version 5.1.2 . Old API WritingSettings.CompressionPolicy CompressionPolicy New API WritingSettings.DeleteDefaultKeySignature WritingSettings.DeleteDefaultSetTempo WritingSettings.DeleteDefaultTimeSignature WritingSettings.DeleteUnknownChunks WritingSettings.DeleteUnknownMetaEvents WritingSettings.NoteOffAsSilentNoteOn WritingSettings.UseRunningStatus"
  },
  "obsolete/template.html": {
    "href": "obsolete/template.html",
    "title": "$ID$ | DryWetMIDI",
    "keywords": "$ID$ $REMOVED$ $DESCRIPTION$ Obsolete from version $OBSOLETE_FROM_VERSION$ . Old API $OLD_API$ New API $NEW_API$"
  }
}